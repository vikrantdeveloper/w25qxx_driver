
usb_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  0800b3b4  0800b3b4  0001b3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf40  0800bf40  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf40  0800bf40  0001bf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf48  0800bf48  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf48  0800bf48  0001bf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf4c  0800bf4c  0001bf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800bf50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  200001d0  0800c120  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  0800c120  00020cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191bc  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a5b  00000000  00000000  000393b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f40  00000000  00000000  0003ce10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  0003dd50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018601  00000000  00000000  0003eb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001181b  00000000  00000000  00057119  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b99f  00000000  00000000  00068934  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e42d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b34  00000000  00000000  000e4350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d0 	.word	0x200001d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b39c 	.word	0x0800b39c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d4 	.word	0x200001d4
 8000104:	0800b39c 	.word	0x0800b39c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fa4c 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f824 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f8c6 	bl	8000628 <MX_GPIO_Init>
  MX_SPI1_Init();
 800049c:	f000 f88c 	bl	80005b8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004a0:	f008 fe18 	bl	80090d4 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */

  W25qxx_Init();
 80004a4:	f009 fc88 	bl	8009db8 <W25qxx_Init>
  W25qxx_EraseChip();
 80004a8:	f009 fdd8 	bl	800a05c <W25qxx_EraseChip>
  //W25qxx_EraseBlock(1);
  HAL_Delay(1000);
 80004ac:	23fa      	movs	r3, #250	; 0xfa
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 faab 	bl	8000a0c <HAL_Delay>
  W25qxx_WritePage(&config_wr_Buffer[0], 1, 0,  76);
 80004b6:	4808      	ldr	r0, [pc, #32]	; (80004d8 <main+0x4c>)
 80004b8:	234c      	movs	r3, #76	; 0x4c
 80004ba:	2200      	movs	r2, #0
 80004bc:	2101      	movs	r1, #1
 80004be:	f009 fe29 	bl	800a114 <W25qxx_WritePage>
  HAL_Delay(50);
 80004c2:	2032      	movs	r0, #50	; 0x32
 80004c4:	f000 faa2 	bl	8000a0c <HAL_Delay>
  W25qxx_ReadPage(&config_rec_Buffer[0], 1, 0, 76);
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <main+0x50>)
 80004ca:	234c      	movs	r3, #76	; 0x4c
 80004cc:	2200      	movs	r2, #0
 80004ce:	2101      	movs	r1, #1
 80004d0:	f009 feec 	bl	800a2ac <W25qxx_ReadPage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x48>
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	20000000 	.word	0x20000000
 80004dc:	2000046c 	.word	0x2000046c

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b09d      	sub	sp, #116	; 0x74
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	2438      	movs	r4, #56	; 0x38
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2338      	movs	r3, #56	; 0x38
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f009 ffc9 	bl	800a488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	2324      	movs	r3, #36	; 0x24
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	0018      	movs	r0, r3
 80004fc:	2314      	movs	r3, #20
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f009 ffc1 	bl	800a488 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000506:	003b      	movs	r3, r7
 8000508:	0018      	movs	r0, r3
 800050a:	2324      	movs	r3, #36	; 0x24
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f009 ffba 	bl	800a488 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000514:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <SystemClock_Config+0xd0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <SystemClock_Config+0xd4>)
 800051a:	401a      	ands	r2, r3
 800051c:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <SystemClock_Config+0xd0>)
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	0109      	lsls	r1, r1, #4
 8000522:	430a      	orrs	r2, r1
 8000524:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2222      	movs	r2, #34	; 0x22
 800052c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2201      	movs	r2, #1
 8000532:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2210      	movs	r2, #16
 8000538:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2201      	movs	r2, #1
 800053e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	187b      	adds	r3, r7, r1
 8000548:	0018      	movs	r0, r3
 800054a:	f002 fb7d 	bl	8002c48 <HAL_RCC_OscConfig>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000552:	f000 f89f 	bl	8000694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	2124      	movs	r1, #36	; 0x24
 8000558:	187b      	adds	r3, r7, r1
 800055a:	220f      	movs	r2, #15
 800055c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2201      	movs	r2, #1
 8000562:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f002 ff2c 	bl	80033d8 <HAL_RCC_ClockConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000584:	f000 f886 	bl	8000694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000588:	003b      	movs	r3, r7
 800058a:	2240      	movs	r2, #64	; 0x40
 800058c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800058e:	003b      	movs	r3, r7
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	04d2      	lsls	r2, r2, #19
 8000594:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	003b      	movs	r3, r7
 8000598:	0018      	movs	r0, r3
 800059a:	f003 f907 	bl	80037ac <HAL_RCCEx_PeriphCLKConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005a2:	f000 f877 	bl	8000694 <Error_Handler>
  }
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b01d      	add	sp, #116	; 0x74
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40007000 	.word	0x40007000
 80005b4:	ffffe7ff 	.word	0xffffe7ff

080005b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_SPI1_Init+0x68>)
 80005be:	4a19      	ldr	r2, [pc, #100]	; (8000624 <MX_SPI1_Init+0x6c>)
 80005c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_SPI1_Init+0x68>)
 80005c4:	2282      	movs	r2, #130	; 0x82
 80005c6:	0052      	lsls	r2, r2, #1
 80005c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_SPI1_Init+0x68>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_SPI1_Init+0x68>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_SPI1_Init+0x68>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_SPI1_Init+0x68>)
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_SPI1_Init+0x68>)
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	0092      	lsls	r2, r2, #2
 80005e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_SPI1_Init+0x68>)
 80005ec:	2210      	movs	r2, #16
 80005ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_SPI1_Init+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_SPI1_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_SPI1_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_SPI1_Init+0x68>)
 8000604:	2207      	movs	r2, #7
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MX_SPI1_Init+0x68>)
 800060a:	0018      	movs	r0, r3
 800060c:	f003 fa32 	bl	8003a74 <HAL_SPI_Init>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000614:	f000 f83e 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	200004b8 	.word	0x200004b8
 8000624:	40013000 	.word	0x40013000

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	0018      	movs	r0, r3
 8000632:	2314      	movs	r3, #20
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f009 ff26 	bl	800a488 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_GPIO_Init+0x68>)
 800063e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_GPIO_Init+0x68>)
 8000642:	2101      	movs	r1, #1
 8000644:	430a      	orrs	r2, r1
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_GPIO_Init+0x68>)
 800064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064c:	2201      	movs	r2, #1
 800064e:	4013      	ands	r3, r2
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fc4b 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2210      	movs	r2, #16
 8000666:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2201      	movs	r2, #1
 800066c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2201      	movs	r2, #1
 8000678:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fac2 	bl	8000c0c <HAL_GPIO_Init>

}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b006      	add	sp, #24
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069a:	e7fe      	b.n	800069a <Error_Handler+0x6>

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <HAL_MspInit+0x24>)
 80006a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x24>)
 80006a6:	2101      	movs	r1, #1
 80006a8:	430a      	orrs	r2, r1
 80006aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_MspInit+0x24>)
 80006ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_MspInit+0x24>)
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	0549      	lsls	r1, r1, #21
 80006b6:	430a      	orrs	r2, r1
 80006b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	230c      	movs	r3, #12
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	0018      	movs	r0, r3
 80006d2:	2314      	movs	r3, #20
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f009 fed6 	bl	800a488 <memset>
  if(hspi->Instance==SPI1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a18      	ldr	r2, [pc, #96]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d129      	bne.n	800073a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_SPI_MspInit+0x84>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <HAL_SPI_MspInit+0x84>)
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	0149      	lsls	r1, r1, #5
 80006f0:	430a      	orrs	r2, r1
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_SPI_MspInit+0x84>)
 80006f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_SPI_MspInit+0x84>)
 80006fa:	2101      	movs	r1, #1
 80006fc:	430a      	orrs	r2, r1
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_SPI_MspInit+0x84>)
 8000702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000704:	2201      	movs	r2, #1
 8000706:	4013      	ands	r3, r2
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800070c:	210c      	movs	r1, #12
 800070e:	187b      	adds	r3, r7, r1
 8000710:	22e0      	movs	r2, #224	; 0xe0
 8000712:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2202      	movs	r2, #2
 8000718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2203      	movs	r2, #3
 8000724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	187a      	adds	r2, r7, r1
 800072e:	23a0      	movs	r3, #160	; 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fa69 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b008      	add	sp, #32
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40013000 	.word	0x40013000
 8000748:	40021000 	.word	0x40021000

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f930 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <USB_IRQHandler+0x14>)
 8000782:	0018      	movs	r0, r3
 8000784:	f000 fd0c 	bl	80011a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	200009d8 	.word	0x200009d8

08000794 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e00a      	b.n	80007bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007a6:	e000      	b.n	80007aa <_read+0x16>
 80007a8:	bf00      	nop
 80007aa:	0001      	movs	r1, r0
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf0      	blt.n	80007a6 <_read+0x12>
	}

return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b006      	add	sp, #24
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	e009      	b.n	80007f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	0018      	movs	r0, r3
 80007ea:	e000      	b.n	80007ee <_write+0x20>
 80007ec:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf1      	blt.n	80007e0 <_write+0x12>
	}
	return len;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	0018      	movs	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	b006      	add	sp, #24
 8000804:	bd80      	pop	{r7, pc}

08000806 <_close>:

int _close(int file)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	return -1;
 800080e:	2301      	movs	r3, #1
 8000810:	425b      	negs	r3, r3
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	0192      	lsls	r2, r2, #6
 800082a:	605a      	str	r2, [r3, #4]
	return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}

08000836 <_isatty>:

int _isatty(int file)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	return 1;
 800083e:	2301      	movs	r3, #1
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}

08000848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <_sbrk+0x5c>)
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <_sbrk+0x60>)
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <_sbrk+0x64>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <_sbrk+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <_sbrk+0x64>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	18d3      	adds	r3, r2, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	429a      	cmp	r2, r3
 800088e:	d207      	bcs.n	80008a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000890:	f009 fdd0 	bl	800a434 <__errno>
 8000894:	0003      	movs	r3, r0
 8000896:	220c      	movs	r2, #12
 8000898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089a:	2301      	movs	r3, #1
 800089c:	425b      	negs	r3, r3
 800089e:	e009      	b.n	80008b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	18d2      	adds	r2, r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <_sbrk+0x64>)
 80008b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008b2:	68fb      	ldr	r3, [r7, #12]
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b006      	add	sp, #24
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20002000 	.word	0x20002000
 80008c0:	00000400 	.word	0x00000400
 80008c4:	200001ec 	.word	0x200001ec
 80008c8:	20000d00 	.word	0x20000d00

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490e      	ldr	r1, [pc, #56]	; (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0b      	ldr	r4, [pc, #44]	; (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000902:	f7ff ffe3 	bl	80008cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f009 fd9b 	bl	800a440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090a:	f7ff fdbf 	bl	800048c <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800091c:	0800bf50 	.word	0x0800bf50
  ldr r2, =_sbss
 8000920:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000924:	20000cfc 	.word	0x20000cfc

08000928 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_COMP_IRQHandler>
	...

0800092c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_Init+0x3c>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_Init+0x3c>)
 800093e:	2140      	movs	r1, #64	; 0x40
 8000940:	430a      	orrs	r2, r1
 8000942:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000944:	2000      	movs	r0, #0
 8000946:	f000 f811 	bl	800096c <HAL_InitTick>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d003      	beq.n	8000956 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e001      	b.n	800095a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000956:	f7ff fea1 	bl	800069c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_InitTick+0x5c>)
 8000976:	681c      	ldr	r4, [r3, #0]
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_InitTick+0x60>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	0019      	movs	r1, r3
 800097e:	23fa      	movs	r3, #250	; 0xfa
 8000980:	0098      	lsls	r0, r3, #2
 8000982:	f7ff fbc1 	bl	8000108 <__udivsi3>
 8000986:	0003      	movs	r3, r0
 8000988:	0019      	movs	r1, r3
 800098a:	0020      	movs	r0, r4
 800098c:	f7ff fbbc 	bl	8000108 <__udivsi3>
 8000990:	0003      	movs	r3, r0
 8000992:	0018      	movs	r0, r3
 8000994:	f000 f92d 	bl	8000bf2 <HAL_SYSTICK_Config>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e00f      	b.n	80009c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d80b      	bhi.n	80009be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	2301      	movs	r3, #1
 80009aa:	425b      	negs	r3, r3
 80009ac:	2200      	movs	r2, #0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f8fa 	bl	8000ba8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_InitTick+0x64>)
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b003      	add	sp, #12
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	2000004c 	.word	0x2000004c
 80009cc:	20000054 	.word	0x20000054
 80009d0:	20000050 	.word	0x20000050

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	001a      	movs	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	18d2      	adds	r2, r2, r3
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000054 	.word	0x20000054
 80009f4:	20000510 	.word	0x20000510

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000510 	.word	0x20000510

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_Delay+0x40>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	189b      	adds	r3, r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	0002      	movs	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b004      	add	sp, #16
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000054 	.word	0x20000054

08000a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b7f      	cmp	r3, #127	; 0x7f
 8000a62:	d809      	bhi.n	8000a78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	231f      	movs	r3, #31
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_EnableIRQ+0x30>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	4091      	lsls	r1, r2
 8000a74:	000a      	movs	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]
  }
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b7f      	cmp	r3, #127	; 0x7f
 8000a98:	d828      	bhi.n	8000aec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9a:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <__NVIC_SetPriority+0xd4>)
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	33c0      	adds	r3, #192	; 0xc0
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	589b      	ldr	r3, [r3, r2]
 8000aaa:	1dfa      	adds	r2, r7, #7
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	0011      	movs	r1, r2
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	21ff      	movs	r1, #255	; 0xff
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	000a      	movs	r2, r1
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	401a      	ands	r2, r3
 8000ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	22ff      	movs	r2, #255	; 0xff
 8000ac8:	401a      	ands	r2, r3
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	4003      	ands	r3, r0
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	481f      	ldr	r0, [pc, #124]	; (8000b58 <__NVIC_SetPriority+0xd4>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	33c0      	adds	r3, #192	; 0xc0
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aea:	e031      	b.n	8000b50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <__NVIC_SetPriority+0xd8>)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	0019      	movs	r1, r3
 8000af4:	230f      	movs	r3, #15
 8000af6:	400b      	ands	r3, r1
 8000af8:	3b08      	subs	r3, #8
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3306      	adds	r3, #6
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	3304      	adds	r3, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	400a      	ands	r2, r1
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	21ff      	movs	r1, #255	; 0xff
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	401a      	ands	r2, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4003      	ands	r3, r0
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <__NVIC_SetPriority+0xd8>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	001c      	movs	r4, r3
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	4023      	ands	r3, r4
 8000b40:	3b08      	subs	r3, #8
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	430a      	orrs	r2, r1
 8000b46:	3306      	adds	r3, #6
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	18c3      	adds	r3, r0, r3
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b003      	add	sp, #12
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <SysTick_Config+0x40>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d901      	bls.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e010      	b.n	8000b98 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <SysTick_Config+0x44>)
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	3a01      	subs	r2, #1
 8000b7c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	425b      	negs	r3, r3
 8000b82:	2103      	movs	r1, #3
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ff7d 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SysTick_Config+0x44>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x44>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	00ffffff 	.word	0x00ffffff
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	1c02      	adds	r2, r0, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff ff5d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b004      	add	sp, #16
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	0002      	movs	r2, r0
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff ff33 	bl	8000a50 <__NVIC_EnableIRQ>
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ffaf 	bl	8000b60 <SysTick_Config>
 8000c02:	0003      	movs	r3, r0
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c22:	e14f      	b.n	8000ec4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d100      	bne.n	8000c3c <HAL_GPIO_Init+0x30>
 8000c3a:	e140      	b.n	8000ebe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d005      	beq.n	8000c54 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d130      	bne.n	8000cb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0013      	movs	r3, r2
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	43da      	mvns	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d017      	beq.n	8000cf2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d123      	bne.n	8000d46 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	58d3      	ldr	r3, [r2, r3]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2207      	movs	r2, #7
 8000d10:	4013      	ands	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	691a      	ldr	r2, [r3, #16]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	2107      	movs	r1, #7
 8000d2a:	400b      	ands	r3, r1
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	6939      	ldr	r1, [r7, #16]
 8000d44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	43da      	mvns	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2203      	movs	r2, #3
 8000d64:	401a      	ands	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	23c0      	movs	r3, #192	; 0xc0
 8000d80:	029b      	lsls	r3, r3, #10
 8000d82:	4013      	ands	r3, r2
 8000d84:	d100      	bne.n	8000d88 <HAL_GPIO_Init+0x17c>
 8000d86:	e09a      	b.n	8000ebe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8c:	4b53      	ldr	r3, [pc, #332]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	430a      	orrs	r2, r1
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d94:	4a52      	ldr	r2, [pc, #328]	; (8000ee0 <HAL_GPIO_Init+0x2d4>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	589b      	ldr	r3, [r3, r2]
 8000da0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2203      	movs	r2, #3
 8000da6:	4013      	ands	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	409a      	lsls	r2, r3
 8000dae:	0013      	movs	r3, r2
 8000db0:	43da      	mvns	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x1ea>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a47      	ldr	r2, [pc, #284]	; (8000ee4 <HAL_GPIO_Init+0x2d8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x1e6>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a46      	ldr	r2, [pc, #280]	; (8000ee8 <HAL_GPIO_Init+0x2dc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x1e2>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a45      	ldr	r2, [pc, #276]	; (8000eec <HAL_GPIO_Init+0x2e0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x1de>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a44      	ldr	r2, [pc, #272]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x1da>
 8000de2:	2305      	movs	r3, #5
 8000de4:	e008      	b.n	8000df8 <HAL_GPIO_Init+0x1ec>
 8000de6:	2306      	movs	r3, #6
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x1ec>
 8000dea:	2303      	movs	r3, #3
 8000dec:	e004      	b.n	8000df8 <HAL_GPIO_Init+0x1ec>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_Init+0x1ec>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <HAL_GPIO_Init+0x1ec>
 8000df6:	2300      	movs	r3, #0
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4093      	lsls	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e08:	4935      	ldr	r1, [pc, #212]	; (8000ee0 <HAL_GPIO_Init+0x2d4>)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	025b      	lsls	r3, r3, #9
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43da      	mvns	r2, r3
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	029b      	lsls	r3, r3, #10
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	035b      	lsls	r3, r3, #13
 8000e82:	4013      	ands	r3, r2
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	039b      	lsls	r3, r3, #14
 8000eac:	4013      	ands	r3, r2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	40da      	lsrs	r2, r3
 8000ecc:	1e13      	subs	r3, r2, #0
 8000ece:	d000      	beq.n	8000ed2 <HAL_GPIO_Init+0x2c6>
 8000ed0:	e6a8      	b.n	8000c24 <HAL_GPIO_Init+0x18>
  }
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b006      	add	sp, #24
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	50000400 	.word	0x50000400
 8000ee8:	50000800 	.word	0x50000800
 8000eec:	50000c00 	.word	0x50000c00
 8000ef0:	50001c00 	.word	0x50001c00
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	0008      	movs	r0, r1
 8000f02:	0011      	movs	r1, r2
 8000f04:	1cbb      	adds	r3, r7, #2
 8000f06:	1c02      	adds	r2, r0, #0
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	1c7b      	adds	r3, r7, #1
 8000f0c:	1c0a      	adds	r2, r1, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f10:	1c7b      	adds	r3, r7, #1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f18:	1cbb      	adds	r3, r7, #2
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f22:	1cbb      	adds	r3, r7, #2
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f36:	b08b      	sub	sp, #44	; 0x2c
 8000f38:	af06      	add	r7, sp, #24
 8000f3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e100      	b.n	8001148 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a81      	ldr	r2, [pc, #516]	; (8001150 <HAL_PCD_Init+0x21c>)
 8000f4a:	5c9b      	ldrb	r3, [r3, r2]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d108      	bne.n	8000f64 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	23aa      	movs	r3, #170	; 0xaa
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	2100      	movs	r1, #0
 8000f5a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f008 fa7c 	bl	800945c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a7a      	ldr	r2, [pc, #488]	; (8001150 <HAL_PCD_Init+0x21c>)
 8000f68:	2103      	movs	r1, #3
 8000f6a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f003 fb9f 	bl	80046b4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e058      	b.n	8001032 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f80:	200f      	movs	r0, #15
 8000f82:	183b      	adds	r3, r7, r0
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	18cb      	adds	r3, r1, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f9a:	183b      	adds	r3, r7, r0
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	189b      	adds	r3, r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	183a      	adds	r2, r7, r0
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fb0:	183b      	adds	r3, r7, r0
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	0004      	movs	r4, r0
 8000fb6:	183b      	adds	r3, r7, r0
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	18cb      	adds	r3, r1, r3
 8000fc8:	3336      	adds	r3, #54	; 0x36
 8000fca:	1c02      	adds	r2, r0, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	189b      	adds	r3, r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	18cb      	adds	r3, r1, r3
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	0013      	movs	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	189b      	adds	r3, r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	18cb      	adds	r3, r1, r3
 8000ff6:	3338      	adds	r3, #56	; 0x38
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	0013      	movs	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	189b      	adds	r3, r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	18cb      	adds	r3, r1, r3
 800100c:	333c      	adds	r3, #60	; 0x3c
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001012:	193b      	adds	r3, r7, r4
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	0013      	movs	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	189b      	adds	r3, r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	18cb      	adds	r3, r1, r3
 8001022:	3340      	adds	r3, #64	; 0x40
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001028:	193b      	adds	r3, r7, r4
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	193b      	adds	r3, r7, r4
 800102e:	3201      	adds	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	230f      	movs	r3, #15
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	d39f      	bcc.n	8000f80 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001040:	230f      	movs	r3, #15
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e056      	b.n	80010f8 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800104a:	240f      	movs	r4, #15
 800104c:	193b      	adds	r3, r7, r4
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	236a      	movs	r3, #106	; 0x6a
 8001054:	33ff      	adds	r3, #255	; 0xff
 8001056:	0019      	movs	r1, r3
 8001058:	0013      	movs	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	189b      	adds	r3, r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	18c3      	adds	r3, r0, r3
 8001062:	185b      	adds	r3, r3, r1
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	23b4      	movs	r3, #180	; 0xb4
 8001070:	0059      	lsls	r1, r3, #1
 8001072:	0013      	movs	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	189b      	adds	r3, r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	18c3      	adds	r3, r0, r3
 800107c:	185b      	adds	r3, r3, r1
 800107e:	193a      	adds	r2, r7, r4
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	236c      	movs	r3, #108	; 0x6c
 800108c:	33ff      	adds	r3, #255	; 0xff
 800108e:	0019      	movs	r1, r3
 8001090:	0013      	movs	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	189b      	adds	r3, r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	18c3      	adds	r3, r0, r3
 800109a:	185b      	adds	r3, r3, r1
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	23bc      	movs	r3, #188	; 0xbc
 80010a8:	0059      	lsls	r1, r3, #1
 80010aa:	0013      	movs	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	189b      	adds	r3, r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	18c3      	adds	r3, r0, r3
 80010b4:	185b      	adds	r3, r3, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	23be      	movs	r3, #190	; 0xbe
 80010c2:	0059      	lsls	r1, r3, #1
 80010c4:	0013      	movs	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	189b      	adds	r3, r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	18c3      	adds	r3, r0, r3
 80010ce:	185b      	adds	r3, r3, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	23c0      	movs	r3, #192	; 0xc0
 80010dc:	0059      	lsls	r1, r3, #1
 80010de:	0013      	movs	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	18c3      	adds	r3, r0, r3
 80010e8:	185b      	adds	r3, r3, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	3201      	adds	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3a1      	bcc.n	800104a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	466a      	mov	r2, sp
 800110e:	0011      	movs	r1, r2
 8001110:	001a      	movs	r2, r3
 8001112:	3210      	adds	r2, #16
 8001114:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001116:	c170      	stmia	r1!, {r4, r5, r6}
 8001118:	ca30      	ldmia	r2!, {r4, r5}
 800111a:	c130      	stmia	r1!, {r4, r5}
 800111c:	6859      	ldr	r1, [r3, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f003 fae1 	bl	80046e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2224      	movs	r2, #36	; 0x24
 800112a:	2100      	movs	r1, #0
 800112c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_PCD_Init+0x21c>)
 8001132:	2101      	movs	r1, #1
 8001134:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d103      	bne.n	8001146 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0018      	movs	r0, r3
 8001142:	f001 fd4b 	bl	8002bdc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b005      	add	sp, #20
 800114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001150:	000002a9 	.word	0x000002a9

08001154 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	23aa      	movs	r3, #170	; 0xaa
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_PCD_Start+0x18>
 8001168:	2302      	movs	r3, #2
 800116a:	e014      	b.n	8001196 <HAL_PCD_Start+0x42>
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	23aa      	movs	r3, #170	; 0xaa
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	2101      	movs	r1, #1
 8001174:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0018      	movs	r0, r3
 800117c:	f003 fa84 	bl	8004688 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0018      	movs	r0, r3
 8001186:	f005 f9fb 	bl	8006580 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	23aa      	movs	r3, #170	; 0xaa
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	2100      	movs	r1, #0
 8001192:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f005 f9fd 	bl	80065ac <USB_ReadInterrupts>
 80011b2:	0002      	movs	r2, r0
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	401a      	ands	r2, r3
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	429a      	cmp	r2, r3
 80011c0:	d103      	bne.n	80011ca <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 fbc7 	bl	8001958 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f005 f9ec 	bl	80065ac <USB_ReadInterrupts>
 80011d4:	0002      	movs	r2, r0
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	401a      	ands	r2, r3
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d114      	bne.n	800120e <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2244      	movs	r2, #68	; 0x44
 80011ea:	5a9b      	ldrh	r3, [r3, r2]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	49a2      	ldr	r1, [pc, #648]	; (800147c <HAL_PCD_IRQHandler+0x2dc>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	b291      	uxth	r1, r2
 80011f8:	2244      	movs	r2, #68	; 0x44
 80011fa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	0018      	movs	r0, r3
 8001200:	f008 f9af 	bl	8009562 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2100      	movs	r1, #0
 8001208:	0018      	movs	r0, r3
 800120a:	f000 f945 	bl	8001498 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	f005 f9ca 	bl	80065ac <USB_ReadInterrupts>
 8001218:	0002      	movs	r2, r0
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	01db      	lsls	r3, r3, #7
 800121e:	401a      	ands	r2, r3
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	429a      	cmp	r2, r3
 8001226:	d10b      	bne.n	8001240 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2244      	movs	r2, #68	; 0x44
 800122e:	5a9b      	ldrh	r3, [r3, r2]
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4992      	ldr	r1, [pc, #584]	; (8001480 <HAL_PCD_IRQHandler+0x2e0>)
 8001238:	400a      	ands	r2, r1
 800123a:	b291      	uxth	r1, r2
 800123c:	2244      	movs	r2, #68	; 0x44
 800123e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0018      	movs	r0, r3
 8001246:	f005 f9b1 	bl	80065ac <USB_ReadInterrupts>
 800124a:	0002      	movs	r2, r0
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	019b      	lsls	r3, r3, #6
 8001250:	401a      	ands	r2, r3
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	429a      	cmp	r2, r3
 8001258:	d10b      	bne.n	8001272 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2244      	movs	r2, #68	; 0x44
 8001260:	5a9b      	ldrh	r3, [r3, r2]
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4986      	ldr	r1, [pc, #536]	; (8001484 <HAL_PCD_IRQHandler+0x2e4>)
 800126a:	400a      	ands	r2, r1
 800126c:	b291      	uxth	r1, r2
 800126e:	2244      	movs	r2, #68	; 0x44
 8001270:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	f005 f998 	bl	80065ac <USB_ReadInterrupts>
 800127c:	0002      	movs	r2, r0
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	401a      	ands	r2, r3
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	429a      	cmp	r2, r3
 800128a:	d137      	bne.n	80012fc <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2240      	movs	r2, #64	; 0x40
 8001292:	5a9b      	ldrh	r3, [r3, r2]
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2104      	movs	r1, #4
 800129c:	438a      	bics	r2, r1
 800129e:	b291      	uxth	r1, r2
 80012a0:	2240      	movs	r2, #64	; 0x40
 80012a2:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	5a9b      	ldrh	r3, [r3, r2]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2108      	movs	r1, #8
 80012b4:	438a      	bics	r2, r1
 80012b6:	b291      	uxth	r1, r2
 80012b8:	2240      	movs	r2, #64	; 0x40
 80012ba:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	23b8      	movs	r3, #184	; 0xb8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d109      	bne.n	80012dc <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	23b8      	movs	r3, #184	; 0xb8
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	2100      	movs	r1, #0
 80012d0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2100      	movs	r1, #0
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 fcaa 	bl	8002c30 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	0018      	movs	r0, r3
 80012e0:	f008 f980 	bl	80095e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2244      	movs	r2, #68	; 0x44
 80012ea:	5a9b      	ldrh	r3, [r3, r2]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4965      	ldr	r1, [pc, #404]	; (8001488 <HAL_PCD_IRQHandler+0x2e8>)
 80012f4:	400a      	ands	r2, r1
 80012f6:	b291      	uxth	r1, r2
 80012f8:	2244      	movs	r2, #68	; 0x44
 80012fa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0018      	movs	r0, r3
 8001302:	f005 f953 	bl	80065ac <USB_ReadInterrupts>
 8001306:	0002      	movs	r2, r0
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	401a      	ands	r2, r3
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	429a      	cmp	r2, r3
 8001314:	d127      	bne.n	8001366 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	5a9b      	ldrh	r3, [r3, r2]
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2108      	movs	r1, #8
 8001326:	430a      	orrs	r2, r1
 8001328:	b291      	uxth	r1, r2
 800132a:	2240      	movs	r2, #64	; 0x40
 800132c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2244      	movs	r2, #68	; 0x44
 8001334:	5a9b      	ldrh	r3, [r3, r2]
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4953      	ldr	r1, [pc, #332]	; (800148c <HAL_PCD_IRQHandler+0x2ec>)
 800133e:	400a      	ands	r2, r1
 8001340:	b291      	uxth	r1, r2
 8001342:	2244      	movs	r2, #68	; 0x44
 8001344:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2240      	movs	r2, #64	; 0x40
 800134c:	5a9b      	ldrh	r3, [r3, r2]
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2104      	movs	r1, #4
 8001356:	430a      	orrs	r2, r1
 8001358:	b291      	uxth	r1, r2
 800135a:	2240      	movs	r2, #64	; 0x40
 800135c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	0018      	movs	r0, r3
 8001362:	f008 f923 	bl	80095ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	0018      	movs	r0, r3
 800136c:	f005 f91e 	bl	80065ac <USB_ReadInterrupts>
 8001370:	0002      	movs	r2, r0
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	4013      	ands	r3, r2
 8001376:	2b80      	cmp	r3, #128	; 0x80
 8001378:	d145      	bne.n	8001406 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2244      	movs	r2, #68	; 0x44
 8001380:	5a9b      	ldrh	r3, [r3, r2]
 8001382:	b29a      	uxth	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	438a      	bics	r2, r1
 800138c:	b291      	uxth	r1, r2
 800138e:	2244      	movs	r2, #68	; 0x44
 8001390:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	23b8      	movs	r3, #184	; 0xb8
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d12f      	bne.n	80013fe <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	5a9b      	ldrh	r3, [r3, r2]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2104      	movs	r1, #4
 80013ae:	430a      	orrs	r2, r1
 80013b0:	b291      	uxth	r1, r2
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	5a9b      	ldrh	r3, [r3, r2]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2108      	movs	r1, #8
 80013c6:	430a      	orrs	r2, r1
 80013c8:	b291      	uxth	r1, r2
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	23b8      	movs	r3, #184	; 0xb8
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	2101      	movs	r1, #1
 80013d6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2254      	movs	r2, #84	; 0x54
 80013de:	5a9b      	ldrh	r3, [r3, r2]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	223c      	movs	r2, #60	; 0x3c
 80013e6:	4013      	ands	r3, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	23b9      	movs	r3, #185	; 0xb9
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2101      	movs	r1, #1
 80013f6:	0018      	movs	r0, r3
 80013f8:	f001 fc1a 	bl	8002c30 <HAL_PCDEx_LPM_Callback>
 80013fc:	e003      	b.n	8001406 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f008 f8d3 	bl	80095ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	f005 f8ce 	bl	80065ac <USB_ReadInterrupts>
 8001410:	0002      	movs	r2, r0
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	401a      	ands	r2, r3
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	429a      	cmp	r2, r3
 800141e:	d10f      	bne.n	8001440 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2244      	movs	r2, #68	; 0x44
 8001426:	5a9b      	ldrh	r3, [r3, r2]
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4918      	ldr	r1, [pc, #96]	; (8001490 <HAL_PCD_IRQHandler+0x2f0>)
 8001430:	400a      	ands	r2, r1
 8001432:	b291      	uxth	r1, r2
 8001434:	2244      	movs	r2, #68	; 0x44
 8001436:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0018      	movs	r0, r3
 800143c:	f008 f882 	bl	8009544 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0018      	movs	r0, r3
 8001446:	f005 f8b1 	bl	80065ac <USB_ReadInterrupts>
 800144a:	0002      	movs	r2, r0
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	401a      	ands	r2, r3
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	429a      	cmp	r2, r3
 8001458:	d10b      	bne.n	8001472 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2244      	movs	r2, #68	; 0x44
 8001460:	5a9b      	ldrh	r3, [r3, r2]
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	490a      	ldr	r1, [pc, #40]	; (8001494 <HAL_PCD_IRQHandler+0x2f4>)
 800146a:	400a      	ands	r2, r1
 800146c:	b291      	uxth	r1, r2
 800146e:	2244      	movs	r2, #68	; 0x44
 8001470:	5299      	strh	r1, [r3, r2]
  }
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	fffffbff 	.word	0xfffffbff
 8001480:	ffffbfff 	.word	0xffffbfff
 8001484:	ffffdfff 	.word	0xffffdfff
 8001488:	ffffefff 	.word	0xffffefff
 800148c:	fffff7ff 	.word	0xfffff7ff
 8001490:	fffffdff 	.word	0xfffffdff
 8001494:	fffffeff 	.word	0xfffffeff

08001498 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	000a      	movs	r2, r1
 80014a2:	1cfb      	adds	r3, r7, #3
 80014a4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	23aa      	movs	r3, #170	; 0xaa
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_PCD_SetAddress+0x1e>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e017      	b.n	80014e6 <HAL_PCD_SetAddress+0x4e>
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	23aa      	movs	r3, #170	; 0xaa
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	2101      	movs	r1, #1
 80014be:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	1cfa      	adds	r2, r7, #3
 80014c4:	2124      	movs	r1, #36	; 0x24
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	1cfb      	adds	r3, r7, #3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	0019      	movs	r1, r3
 80014d4:	0010      	movs	r0, r2
 80014d6:	f005 f83f 	bl	8006558 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	23aa      	movs	r3, #170	; 0xaa
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	2100      	movs	r1, #0
 80014e2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014ee:	b590      	push	{r4, r7, lr}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	000c      	movs	r4, r1
 80014f8:	0010      	movs	r0, r2
 80014fa:	0019      	movs	r1, r3
 80014fc:	1cfb      	adds	r3, r7, #3
 80014fe:	1c22      	adds	r2, r4, #0
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	003b      	movs	r3, r7
 8001504:	1c02      	adds	r2, r0, #0
 8001506:	801a      	strh	r2, [r3, #0]
 8001508:	1cbb      	adds	r3, r7, #2
 800150a:	1c0a      	adds	r2, r1, #0
 800150c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800150e:	230b      	movs	r3, #11
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001516:	1cfb      	adds	r3, r7, #3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25b      	sxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	da0f      	bge.n	8001540 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001520:	1cfb      	adds	r3, r7, #3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2207      	movs	r2, #7
 8001526:	4013      	ands	r3, r2
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	0013      	movs	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	189b      	adds	r3, r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	18d3      	adds	r3, r2, r3
 8001536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	705a      	strb	r2, [r3, #1]
 800153e:	e00f      	b.n	8001560 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001540:	1cfb      	adds	r3, r7, #3
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2207      	movs	r2, #7
 8001546:	401a      	ands	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	189b      	adds	r3, r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	3369      	adds	r3, #105	; 0x69
 8001552:	33ff      	adds	r3, #255	; 0xff
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	18d3      	adds	r3, r2, r3
 8001558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001560:	1cfb      	adds	r3, r7, #3
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2207      	movs	r2, #7
 8001566:	4013      	ands	r3, r2
 8001568:	b2da      	uxtb	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800156e:	003b      	movs	r3, r7
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1cba      	adds	r2, r7, #2
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001590:	1cbb      	adds	r3, r7, #2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d102      	bne.n	800159e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	23aa      	movs	r3, #170	; 0xaa
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_PCD_EP_Open+0xc0>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e013      	b.n	80015d6 <HAL_PCD_EP_Open+0xe8>
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	23aa      	movs	r3, #170	; 0xaa
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	2101      	movs	r1, #1
 80015b6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f003 f8bd 	bl	8004740 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	23aa      	movs	r3, #170	; 0xaa
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	2100      	movs	r1, #0
 80015ce:	54d1      	strb	r1, [r2, r3]

  return ret;
 80015d0:	230b      	movs	r3, #11
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	781b      	ldrb	r3, [r3, #0]
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b005      	add	sp, #20
 80015dc:	bd90      	pop	{r4, r7, pc}

080015de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	000a      	movs	r2, r1
 80015e8:	1cfb      	adds	r3, r7, #3
 80015ea:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015ec:	1cfb      	adds	r3, r7, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da0f      	bge.n	8001616 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	1cfb      	adds	r3, r7, #3
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2207      	movs	r2, #7
 80015fc:	4013      	ands	r3, r2
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	0013      	movs	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	189b      	adds	r3, r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	18d3      	adds	r3, r2, r3
 800160c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	705a      	strb	r2, [r3, #1]
 8001614:	e00f      	b.n	8001636 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001616:	1cfb      	adds	r3, r7, #3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2207      	movs	r2, #7
 800161c:	401a      	ands	r2, r3
 800161e:	0013      	movs	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	189b      	adds	r3, r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	3369      	adds	r3, #105	; 0x69
 8001628:	33ff      	adds	r3, #255	; 0xff
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001636:	1cfb      	adds	r3, r7, #3
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2207      	movs	r2, #7
 800163c:	4013      	ands	r3, r2
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	23aa      	movs	r3, #170	; 0xaa
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_PCD_EP_Close+0x76>
 8001650:	2302      	movs	r3, #2
 8001652:	e011      	b.n	8001678 <HAL_PCD_EP_Close+0x9a>
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	23aa      	movs	r3, #170	; 0xaa
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	2101      	movs	r1, #1
 800165c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	0011      	movs	r1, r2
 8001666:	0018      	movs	r0, r3
 8001668:	f003 fbde 	bl	8004e28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	23aa      	movs	r3, #170	; 0xaa
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	2100      	movs	r1, #0
 8001674:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b004      	add	sp, #16
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	200b      	movs	r0, #11
 800168e:	183b      	adds	r3, r7, r0
 8001690:	1c0a      	adds	r2, r1, #0
 8001692:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001694:	0001      	movs	r1, r0
 8001696:	187b      	adds	r3, r7, r1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2207      	movs	r2, #7
 800169c:	401a      	ands	r2, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	3369      	adds	r3, #105	; 0x69
 80016a8:	33ff      	adds	r3, #255	; 0xff
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2200      	movs	r2, #0
 80016c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2207      	movs	r2, #7
 80016ce:	4013      	ands	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2207      	movs	r2, #7
 80016dc:	4013      	ands	r3, r2
 80016de:	d107      	bne.n	80016f0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	0011      	movs	r1, r2
 80016e8:	0018      	movs	r0, r3
 80016ea:	f003 fd5d 	bl	80051a8 <USB_EPStartXfer>
 80016ee:	e006      	b.n	80016fe <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f003 fd55 	bl	80051a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	000a      	movs	r2, r1
 8001712:	1cfb      	adds	r3, r7, #3
 8001714:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001716:	1cfb      	adds	r3, r7, #3
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2207      	movs	r2, #7
 800171c:	401a      	ands	r2, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	23c2      	movs	r3, #194	; 0xc2
 8001722:	0059      	lsls	r1, r3, #1
 8001724:	0013      	movs	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	189b      	adds	r3, r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	18c3      	adds	r3, r0, r3
 800172e:	185b      	adds	r3, r3, r1
 8001730:	681b      	ldr	r3, [r3, #0]
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	200b      	movs	r0, #11
 8001748:	183b      	adds	r3, r7, r0
 800174a:	1c0a      	adds	r2, r1, #0
 800174c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800174e:	183b      	adds	r3, r7, r0
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2207      	movs	r2, #7
 8001754:	4013      	ands	r3, r2
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	0013      	movs	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	189b      	adds	r3, r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	18d3      	adds	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2224      	movs	r2, #36	; 0x24
 8001776:	2101      	movs	r1, #1
 8001778:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2201      	movs	r2, #1
 800178a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800178c:	183b      	adds	r3, r7, r0
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2207      	movs	r2, #7
 8001792:	4013      	ands	r3, r2
 8001794:	b2da      	uxtb	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800179a:	183b      	adds	r3, r7, r0
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2207      	movs	r2, #7
 80017a0:	4013      	ands	r3, r2
 80017a2:	d107      	bne.n	80017b4 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f003 fcfb 	bl	80051a8 <USB_EPStartXfer>
 80017b2:	e006      	b.n	80017c2 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f003 fcf3 	bl	80051a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b006      	add	sp, #24
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	000a      	movs	r2, r1
 80017d6:	1cfb      	adds	r3, r7, #3
 80017d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017da:	1cfb      	adds	r3, r7, #3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2207      	movs	r2, #7
 80017e0:	401a      	ands	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d901      	bls.n	80017ee <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e046      	b.n	800187c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017ee:	1cfb      	adds	r3, r7, #3
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da0f      	bge.n	8001818 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f8:	1cfb      	adds	r3, r7, #3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2207      	movs	r2, #7
 80017fe:	4013      	ands	r3, r2
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	0013      	movs	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	189b      	adds	r3, r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	18d3      	adds	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	705a      	strb	r2, [r3, #1]
 8001816:	e00d      	b.n	8001834 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001818:	1cfb      	adds	r3, r7, #3
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	0013      	movs	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	189b      	adds	r3, r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	3369      	adds	r3, #105	; 0x69
 8001826:	33ff      	adds	r3, #255	; 0xff
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	18d3      	adds	r3, r2, r3
 800182c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800183a:	1cfb      	adds	r3, r7, #3
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2207      	movs	r2, #7
 8001840:	4013      	ands	r3, r2
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	23aa      	movs	r3, #170	; 0xaa
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_PCD_EP_SetStall+0x8c>
 8001854:	2302      	movs	r3, #2
 8001856:	e011      	b.n	800187c <HAL_PCD_EP_SetStall+0xb0>
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	23aa      	movs	r3, #170	; 0xaa
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	2101      	movs	r1, #1
 8001860:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f004 fd72 	bl	8006354 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	23aa      	movs	r3, #170	; 0xaa
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	2100      	movs	r1, #0
 8001878:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	000a      	movs	r2, r1
 800188e:	1cfb      	adds	r3, r7, #3
 8001890:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001892:	1cfb      	adds	r3, r7, #3
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	220f      	movs	r2, #15
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d901      	bls.n	80018a6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e048      	b.n	8001938 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018a6:	1cfb      	adds	r3, r7, #3
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da0f      	bge.n	80018d0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b0:	1cfb      	adds	r3, r7, #3
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2207      	movs	r2, #7
 80018b6:	4013      	ands	r3, r2
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	0013      	movs	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	705a      	strb	r2, [r3, #1]
 80018ce:	e00f      	b.n	80018f0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d0:	1cfb      	adds	r3, r7, #3
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2207      	movs	r2, #7
 80018d6:	401a      	ands	r2, r3
 80018d8:	0013      	movs	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	189b      	adds	r3, r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	3369      	adds	r3, #105	; 0x69
 80018e2:	33ff      	adds	r3, #255	; 0xff
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	18d3      	adds	r3, r2, r3
 80018e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f6:	1cfb      	adds	r3, r7, #3
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	23aa      	movs	r3, #170	; 0xaa
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_PCD_EP_ClrStall+0x90>
 8001910:	2302      	movs	r3, #2
 8001912:	e011      	b.n	8001938 <HAL_PCD_EP_ClrStall+0xb4>
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	23aa      	movs	r3, #170	; 0xaa
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	2101      	movs	r1, #1
 800191c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	0011      	movs	r1, r2
 8001926:	0018      	movs	r0, r3
 8001928:	f004 fd64 	bl	80063f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	23aa      	movs	r3, #170	; 0xaa
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	2100      	movs	r1, #0
 8001934:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b004      	add	sp, #16
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	000a      	movs	r2, r1
 800194a:	1cfb      	adds	r3, r7, #3
 800194c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b097      	sub	sp, #92	; 0x5c
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001960:	f000 fbe1 	bl	8002126 <PCD_EP_ISR_Handler+0x7ce>
  {
    wIstr = hpcd->Instance->ISTR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2056      	movs	r0, #86	; 0x56
 800196a:	183b      	adds	r3, r7, r0
 800196c:	2144      	movs	r1, #68	; 0x44
 800196e:	5a52      	ldrh	r2, [r2, r1]
 8001970:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001972:	183b      	adds	r3, r7, r0
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	2055      	movs	r0, #85	; 0x55
 800197a:	183b      	adds	r3, r7, r0
 800197c:	210f      	movs	r1, #15
 800197e:	400a      	ands	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001982:	183b      	adds	r3, r7, r0
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d000      	beq.n	800198c <PCD_EP_ISR_Handler+0x34>
 800198a:	e17b      	b.n	8001c84 <PCD_EP_ISR_Handler+0x32c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800198c:	2356      	movs	r3, #86	; 0x56
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	2210      	movs	r2, #16
 8001994:	4013      	ands	r3, r2
 8001996:	d155      	bne.n	8001a44 <PCD_EP_ISR_Handler+0xec>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	200a      	movs	r0, #10
 80019a2:	183b      	adds	r3, r7, r0
 80019a4:	49af      	ldr	r1, [pc, #700]	; (8001c64 <PCD_EP_ISR_Handler+0x30c>)
 80019a6:	400a      	ands	r2, r1
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	183a      	adds	r2, r7, r0
 80019b0:	8812      	ldrh	r2, [r2, #0]
 80019b2:	49ad      	ldr	r1, [pc, #692]	; (8001c68 <PCD_EP_ISR_Handler+0x310>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	b292      	uxth	r2, r2
 80019b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3328      	adds	r3, #40	; 0x28
 80019be:	647b      	str	r3, [r7, #68]	; 0x44

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2250      	movs	r2, #80	; 0x50
 80019c6:	5a9b      	ldrh	r3, [r3, r2]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	001a      	movs	r2, r3
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	18d2      	adds	r2, r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	18d3      	adds	r3, r2, r3
 80019da:	4aa4      	ldr	r2, [pc, #656]	; (8001c6c <PCD_EP_ISR_Handler+0x314>)
 80019dc:	4694      	mov	ip, r2
 80019de:	4463      	add	r3, ip
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	059b      	lsls	r3, r3, #22
 80019e4:	0d9a      	lsrs	r2, r3, #22
 80019e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	18d2      	adds	r2, r2, r3
 80019f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2100      	movs	r1, #0
 80019fc:	0018      	movs	r0, r3
 80019fe:	f007 fd83 	bl	8009508 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2224      	movs	r2, #36	; 0x24
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <PCD_EP_ISR_Handler+0xba>
 8001a0e:	f000 fb8a 	bl	8002126 <PCD_EP_ISR_Handler+0x7ce>
 8001a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <PCD_EP_ISR_Handler+0xc6>
 8001a1a:	f000 fb84 	bl	8002126 <PCD_EP_ISR_Handler+0x7ce>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2224      	movs	r2, #36	; 0x24
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	4252      	negs	r2, r2
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b291      	uxth	r1, r2
 8001a34:	224c      	movs	r2, #76	; 0x4c
 8001a36:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2224      	movs	r2, #36	; 0x24
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	5499      	strb	r1, [r3, r2]
 8001a40:	f000 fb71 	bl	8002126 <PCD_EP_ISR_Handler+0x7ce>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3369      	adds	r3, #105	; 0x69
 8001a48:	33ff      	adds	r3, #255	; 0xff
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2152      	movs	r1, #82	; 0x52
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	8812      	ldrh	r2, [r2, #0]
 8001a56:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	881a      	ldrh	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	d037      	beq.n	8001ad4 <PCD_EP_ISR_Handler+0x17c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2250      	movs	r2, #80	; 0x50
 8001a6a:	5a9b      	ldrh	r3, [r3, r2]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	001a      	movs	r2, r3
 8001a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	18d2      	adds	r2, r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	18d3      	adds	r3, r2, r3
 8001a7e:	4a7c      	ldr	r2, [pc, #496]	; (8001c70 <PCD_EP_ISR_Handler+0x318>)
 8001a80:	4694      	mov	ip, r2
 8001a82:	4463      	add	r3, ip
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	059b      	lsls	r3, r3, #22
 8001a88:	0d9a      	lsrs	r2, r3, #22
 8001a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	22ac      	movs	r2, #172	; 0xac
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	1899      	adds	r1, r3, r2
 8001a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f004 fdd3 	bl	800664e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	200c      	movs	r0, #12
 8001ab2:	183b      	adds	r3, r7, r0
 8001ab4:	496f      	ldr	r1, [pc, #444]	; (8001c74 <PCD_EP_ISR_Handler+0x31c>)
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	183a      	adds	r2, r7, r0
 8001ac0:	8812      	ldrh	r2, [r2, #0]
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	b292      	uxth	r2, r2
 8001ac8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f007 fce5 	bl	800949c <HAL_PCD_SetupStageCallback>
 8001ad2:	e328      	b.n	8002126 <PCD_EP_ISR_Handler+0x7ce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ad4:	2352      	movs	r3, #82	; 0x52
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2200      	movs	r2, #0
 8001ada:	5e9b      	ldrsh	r3, [r3, r2]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db00      	blt.n	8001ae2 <PCD_EP_ISR_Handler+0x18a>
 8001ae0:	e321      	b.n	8002126 <PCD_EP_ISR_Handler+0x7ce>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	201a      	movs	r0, #26
 8001aec:	183b      	adds	r3, r7, r0
 8001aee:	4961      	ldr	r1, [pc, #388]	; (8001c74 <PCD_EP_ISR_Handler+0x31c>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	801a      	strh	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	183a      	adds	r2, r7, r0
 8001afa:	8812      	ldrh	r2, [r2, #0]
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	430a      	orrs	r2, r1
 8001b00:	b292      	uxth	r2, r2
 8001b02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2250      	movs	r2, #80	; 0x50
 8001b0a:	5a9b      	ldrh	r3, [r3, r2]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	001a      	movs	r2, r3
 8001b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	18d2      	adds	r2, r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	18d3      	adds	r3, r2, r3
 8001b1e:	4a54      	ldr	r2, [pc, #336]	; (8001c70 <PCD_EP_ISR_Handler+0x318>)
 8001b20:	4694      	mov	ip, r2
 8001b22:	4463      	add	r3, ip
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	059b      	lsls	r3, r3, #22
 8001b28:	0d9a      	lsrs	r2, r3, #22
 8001b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01a      	beq.n	8001b6c <PCD_EP_ISR_Handler+0x214>
 8001b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d016      	beq.n	8001b6c <PCD_EP_ISR_Handler+0x214>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b44:	6959      	ldr	r1, [r3, #20]
 8001b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b48:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b4c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	f004 fd7d 	bl	800664e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	18d2      	adds	r2, r2, r3
 8001b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b60:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2100      	movs	r1, #0
 8001b66:	0018      	movs	r0, r3
 8001b68:	f007 fcad 	bl	80094c6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	001a      	movs	r2, r3
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d000      	beq.n	8001b80 <PCD_EP_ISR_Handler+0x228>
 8001b7e:	e2d2      	b.n	8002126 <PCD_EP_ISR_Handler+0x7ce>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2250      	movs	r2, #80	; 0x50
 8001b8c:	5a9b      	ldrh	r3, [r3, r2]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	001a      	movs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	189b      	adds	r3, r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	4a35      	ldr	r2, [pc, #212]	; (8001c70 <PCD_EP_ISR_Handler+0x318>)
 8001b9c:	4694      	mov	ip, r2
 8001b9e:	4463      	add	r3, ip
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d110      	bne.n	8001bcc <PCD_EP_ISR_Handler+0x274>
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4a31      	ldr	r2, [pc, #196]	; (8001c78 <PCD_EP_ISR_Handler+0x320>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <PCD_EP_ISR_Handler+0x310>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	e02b      	b.n	8001c24 <PCD_EP_ISR_Handler+0x2cc>
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8001bd2:	d812      	bhi.n	8001bfa <PCD_EP_ISR_Handler+0x2a2>
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d002      	beq.n	8001bec <PCD_EP_ISR_Handler+0x294>
 8001be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be8:	3301      	adds	r3, #1
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	801a      	strh	r2, [r3, #0]
 8001bf8:	e014      	b.n	8001c24 <PCD_EP_ISR_Handler+0x2cc>
 8001bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	221f      	movs	r2, #31
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d102      	bne.n	8001c12 <PCD_EP_ISR_Handler+0x2ba>
 8001c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <PCD_EP_ISR_Handler+0x310>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	200e      	movs	r0, #14
 8001c2e:	183b      	adds	r3, r7, r0
 8001c30:	4912      	ldr	r1, [pc, #72]	; (8001c7c <PCD_EP_ISR_Handler+0x324>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	183b      	adds	r3, r7, r0
 8001c38:	183a      	adds	r2, r7, r0
 8001c3a:	8812      	ldrh	r2, [r2, #0]
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0149      	lsls	r1, r1, #5
 8001c40:	404a      	eors	r2, r1
 8001c42:	801a      	strh	r2, [r3, #0]
 8001c44:	183b      	adds	r3, r7, r0
 8001c46:	183a      	adds	r2, r7, r0
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	0189      	lsls	r1, r1, #6
 8001c4e:	404a      	eors	r2, r1
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	183a      	adds	r2, r7, r0
 8001c58:	8812      	ldrh	r2, [r2, #0]
 8001c5a:	4909      	ldr	r1, [pc, #36]	; (8001c80 <PCD_EP_ISR_Handler+0x328>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	e260      	b.n	8002126 <PCD_EP_ISR_Handler+0x7ce>
 8001c64:	ffff8f0f 	.word	0xffff8f0f
 8001c68:	ffff8000 	.word	0xffff8000
 8001c6c:	00000402 	.word	0x00000402
 8001c70:	00000406 	.word	0x00000406
 8001c74:	00000f8f 	.word	0x00000f8f
 8001c78:	ffff83ff 	.word	0xffff83ff
 8001c7c:	ffffbf8f 	.word	0xffffbf8f
 8001c80:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	001a      	movs	r2, r3
 8001c8a:	2355      	movs	r3, #85	; 0x55
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	18d2      	adds	r2, r2, r3
 8001c94:	2152      	movs	r1, #82	; 0x52
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	8812      	ldrh	r2, [r2, #0]
 8001c9a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	5e9b      	ldrsh	r3, [r3, r2]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db00      	blt.n	8001ca8 <PCD_EP_ISR_Handler+0x350>
 8001ca6:	e0ff      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x550>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	001a      	movs	r2, r3
 8001cae:	2055      	movs	r0, #85	; 0x55
 8001cb0:	183b      	adds	r3, r7, r0
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	18d3      	adds	r3, r2, r3
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	2450      	movs	r4, #80	; 0x50
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	49d1      	ldr	r1, [pc, #836]	; (8002008 <PCD_EP_ISR_Handler+0x6b0>)
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	001a      	movs	r2, r3
 8001ccc:	183b      	adds	r3, r7, r0
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	18d3      	adds	r3, r2, r3
 8001cd4:	193a      	adds	r2, r7, r4
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ce0:	183b      	adds	r3, r7, r0
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	189b      	adds	r3, r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	3369      	adds	r3, #105	; 0x69
 8001cee:	33ff      	adds	r3, #255	; 0xff
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	18d3      	adds	r3, r2, r3
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf8:	7b1b      	ldrb	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d126      	bne.n	8001d4c <PCD_EP_ISR_Handler+0x3f4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2250      	movs	r2, #80	; 0x50
 8001d04:	5a9b      	ldrh	r3, [r3, r2]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	001a      	movs	r2, r3
 8001d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	18d2      	adds	r2, r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	18d3      	adds	r3, r2, r3
 8001d18:	4abc      	ldr	r2, [pc, #752]	; (800200c <PCD_EP_ISR_Handler+0x6b4>)
 8001d1a:	4694      	mov	ip, r2
 8001d1c:	4463      	add	r3, ip
 8001d1e:	881a      	ldrh	r2, [r3, #0]
 8001d20:	214e      	movs	r1, #78	; 0x4e
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	0592      	lsls	r2, r2, #22
 8001d26:	0d92      	lsrs	r2, r2, #22
 8001d28:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d100      	bne.n	8001d34 <PCD_EP_ISR_Handler+0x3dc>
 8001d32:	e090      	b.n	8001e56 <PCD_EP_ISR_Handler+0x4fe>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3a:	6959      	ldr	r1, [r3, #20]
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3e:	88da      	ldrh	r2, [r3, #6]
 8001d40:	234e      	movs	r3, #78	; 0x4e
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	f004 fc82 	bl	800664e <USB_ReadPMA>
 8001d4a:	e084      	b.n	8001e56 <PCD_EP_ISR_Handler+0x4fe>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d4e:	78db      	ldrb	r3, [r3, #3]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d10c      	bne.n	8001d6e <PCD_EP_ISR_Handler+0x416>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d54:	234e      	movs	r3, #78	; 0x4e
 8001d56:	18fc      	adds	r4, r7, r3
 8001d58:	2352      	movs	r3, #82	; 0x52
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	881a      	ldrh	r2, [r3, #0]
 8001d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 f9f2 	bl	800214c <HAL_PCD_EP_DB_Receive>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	8023      	strh	r3, [r4, #0]
 8001d6c:	e073      	b.n	8001e56 <PCD_EP_ISR_Handler+0x4fe>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	001a      	movs	r2, r3
 8001d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	18d3      	adds	r3, r2, r3
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	2042      	movs	r0, #66	; 0x42
 8001d82:	183b      	adds	r3, r7, r0
 8001d84:	49a2      	ldr	r1, [pc, #648]	; (8002010 <PCD_EP_ISR_Handler+0x6b8>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	801a      	strh	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	001a      	movs	r2, r3
 8001d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	18d3      	adds	r3, r2, r3
 8001d98:	183a      	adds	r2, r7, r0
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	499d      	ldr	r1, [pc, #628]	; (8002014 <PCD_EP_ISR_Handler+0x6bc>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	b292      	uxth	r2, r2
 8001da2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	001a      	movs	r2, r3
 8001daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	18d3      	adds	r3, r2, r3
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	001a      	movs	r2, r3
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	01db      	lsls	r3, r3, #7
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d025      	beq.n	8001e0c <PCD_EP_ISR_Handler+0x4b4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2250      	movs	r2, #80	; 0x50
 8001dc6:	5a9b      	ldrh	r3, [r3, r2]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	001a      	movs	r2, r3
 8001dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	18d2      	adds	r2, r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	18d3      	adds	r3, r2, r3
 8001dda:	4a8f      	ldr	r2, [pc, #572]	; (8002018 <PCD_EP_ISR_Handler+0x6c0>)
 8001ddc:	4694      	mov	ip, r2
 8001dde:	4463      	add	r3, ip
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	214e      	movs	r1, #78	; 0x4e
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	0592      	lsls	r2, r2, #22
 8001de8:	0d92      	lsrs	r2, r2, #22
 8001dea:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d030      	beq.n	8001e56 <PCD_EP_ISR_Handler+0x4fe>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfa:	6959      	ldr	r1, [r3, #20]
 8001dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfe:	891a      	ldrh	r2, [r3, #8]
 8001e00:	234e      	movs	r3, #78	; 0x4e
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	f004 fc22 	bl	800664e <USB_ReadPMA>
 8001e0a:	e024      	b.n	8001e56 <PCD_EP_ISR_Handler+0x4fe>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2250      	movs	r2, #80	; 0x50
 8001e12:	5a9b      	ldrh	r3, [r3, r2]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	001a      	movs	r2, r3
 8001e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	18d2      	adds	r2, r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	18d3      	adds	r3, r2, r3
 8001e26:	4a79      	ldr	r2, [pc, #484]	; (800200c <PCD_EP_ISR_Handler+0x6b4>)
 8001e28:	4694      	mov	ip, r2
 8001e2a:	4463      	add	r3, ip
 8001e2c:	881a      	ldrh	r2, [r3, #0]
 8001e2e:	214e      	movs	r1, #78	; 0x4e
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	0592      	lsls	r2, r2, #22
 8001e34:	0d92      	lsrs	r2, r2, #22
 8001e36:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <PCD_EP_ISR_Handler+0x4fe>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e46:	6959      	ldr	r1, [r3, #20]
 8001e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4a:	895a      	ldrh	r2, [r3, #10]
 8001e4c:	234e      	movs	r3, #78	; 0x4e
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	f004 fbfc 	bl	800664e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	214e      	movs	r1, #78	; 0x4e
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	18d2      	adds	r2, r2, r3
 8001e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	18d2      	adds	r2, r2, r3
 8001e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <PCD_EP_ISR_Handler+0x532>
 8001e7c:	234e      	movs	r3, #78	; 0x4e
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d207      	bcs.n	8001e9a <PCD_EP_ISR_Handler+0x542>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0011      	movs	r1, r2
 8001e92:	0018      	movs	r0, r3
 8001e94:	f007 fb17 	bl	80094c6 <HAL_PCD_DataOutStageCallback>
 8001e98:	e006      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x550>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ea0:	0011      	movs	r1, r2
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f003 f980 	bl	80051a8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ea8:	2352      	movs	r3, #82	; 0x52
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <PCD_EP_ISR_Handler+0x55e>
 8001eb4:	e137      	b.n	8002126 <PCD_EP_ISR_Handler+0x7ce>
      {
        ep = &hpcd->IN_ep[epindex];
 8001eb6:	2055      	movs	r0, #85	; 0x55
 8001eb8:	183b      	adds	r3, r7, r0
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	0013      	movs	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	189b      	adds	r3, r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	18d3      	adds	r3, r2, r3
 8001eca:	647b      	str	r3, [r7, #68]	; 0x44

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	183b      	adds	r3, r7, r0
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	18d3      	adds	r3, r2, r3
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	2440      	movs	r4, #64	; 0x40
 8001ee0:	193b      	adds	r3, r7, r4
 8001ee2:	494e      	ldr	r1, [pc, #312]	; (800201c <PCD_EP_ISR_Handler+0x6c4>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	001a      	movs	r2, r3
 8001eee:	183b      	adds	r3, r7, r0
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	193a      	adds	r2, r7, r4
 8001ef8:	8812      	ldrh	r2, [r2, #0]
 8001efa:	4949      	ldr	r1, [pc, #292]	; (8002020 <PCD_EP_ISR_Handler+0x6c8>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	b292      	uxth	r2, r2
 8001f00:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8001f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f04:	78db      	ldrb	r3, [r3, #3]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d100      	bne.n	8001f0c <PCD_EP_ISR_Handler+0x5b4>
 8001f0a:	e0ae      	b.n	800206a <PCD_EP_ISR_Handler+0x712>
        {
          ep->xfer_len = 0U;
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f12:	2352      	movs	r3, #82	; 0x52
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d046      	beq.n	8001fac <PCD_EP_ISR_Handler+0x654>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d125      	bne.n	8001f72 <PCD_EP_ISR_Handler+0x61a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2250      	movs	r2, #80	; 0x50
 8001f32:	5a9b      	ldrh	r3, [r3, r2]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	001a      	movs	r2, r3
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	623b      	str	r3, [r7, #32]
 8001f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	00da      	lsls	r2, r3, #3
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	18d3      	adds	r3, r2, r3
 8001f48:	4a33      	ldr	r2, [pc, #204]	; (8002018 <PCD_EP_ISR_Handler+0x6c0>)
 8001f4a:	4694      	mov	ip, r2
 8001f4c:	4463      	add	r3, ip
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4a33      	ldr	r2, [pc, #204]	; (8002024 <PCD_EP_ISR_Handler+0x6cc>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	801a      	strh	r2, [r3, #0]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <PCD_EP_ISR_Handler+0x6c8>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	e073      	b.n	800205a <PCD_EP_ISR_Handler+0x702>
 8001f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d16f      	bne.n	800205a <PCD_EP_ISR_Handler+0x702>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2250      	movs	r2, #80	; 0x50
 8001f86:	5a9b      	ldrh	r3, [r3, r2]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	189b      	adds	r3, r3, r2
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	00da      	lsls	r2, r3, #3
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	18d3      	adds	r3, r2, r3
 8001f9c:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <PCD_EP_ISR_Handler+0x6c0>)
 8001f9e:	4694      	mov	ip, r2
 8001fa0:	4463      	add	r3, ip
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	e056      	b.n	800205a <PCD_EP_ISR_Handler+0x702>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d136      	bne.n	8002028 <PCD_EP_ISR_Handler+0x6d0>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2250      	movs	r2, #80	; 0x50
 8001fc6:	5a9b      	ldrh	r3, [r3, r2]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	001a      	movs	r2, r3
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	189b      	adds	r3, r3, r2
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	00da      	lsls	r2, r3, #3
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	18d3      	adds	r3, r2, r3
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <PCD_EP_ISR_Handler+0x6b4>)
 8001fde:	4694      	mov	ip, r2
 8001fe0:	4463      	add	r3, ip
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <PCD_EP_ISR_Handler+0x6cc>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <PCD_EP_ISR_Handler+0x6c8>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002002:	801a      	strh	r2, [r3, #0]
 8002004:	e029      	b.n	800205a <PCD_EP_ISR_Handler+0x702>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	00000f8f 	.word	0x00000f8f
 800200c:	00000406 	.word	0x00000406
 8002010:	ffff8f8f 	.word	0xffff8f8f
 8002014:	ffff80c0 	.word	0xffff80c0
 8002018:	00000402 	.word	0x00000402
 800201c:	ffff8f0f 	.word	0xffff8f0f
 8002020:	ffff8000 	.word	0xffff8000
 8002024:	ffff83ff 	.word	0xffff83ff
 8002028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d114      	bne.n	800205a <PCD_EP_ISR_Handler+0x702>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2250      	movs	r2, #80	; 0x50
 8002036:	5a9b      	ldrh	r3, [r3, r2]
 8002038:	b29b      	uxth	r3, r3
 800203a:	001a      	movs	r2, r3
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	189b      	adds	r3, r3, r2
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
 8002042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	00da      	lsls	r2, r3, #3
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204a:	18d3      	adds	r3, r2, r3
 800204c:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <PCD_EP_ISR_Handler+0x7ec>)
 800204e:	4694      	mov	ip, r2
 8002050:	4463      	add	r3, ip
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	2200      	movs	r2, #0
 8002058:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800205a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0011      	movs	r1, r2
 8002062:	0018      	movs	r0, r3
 8002064:	f007 fa50 	bl	8009508 <HAL_PCD_DataInStageCallback>
 8002068:	e05d      	b.n	8002126 <PCD_EP_ISR_Handler+0x7ce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800206a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206c:	78db      	ldrb	r3, [r3, #3]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d151      	bne.n	8002116 <PCD_EP_ISR_Handler+0x7be>
 8002072:	2352      	movs	r3, #82	; 0x52
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	881a      	ldrh	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4013      	ands	r3, r2
 800207e:	d14a      	bne.n	8002116 <PCD_EP_ISR_Handler+0x7be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2250      	movs	r2, #80	; 0x50
 8002086:	5a9b      	ldrh	r3, [r3, r2]
 8002088:	b29b      	uxth	r3, r3
 800208a:	001a      	movs	r2, r3
 800208c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	18d2      	adds	r2, r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	18d3      	adds	r3, r2, r3
 800209a:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <PCD_EP_ISR_Handler+0x7f0>)
 800209c:	4694      	mov	ip, r2
 800209e:	4463      	add	r3, ip
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	213e      	movs	r1, #62	; 0x3e
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	0592      	lsls	r2, r2, #22
 80020a8:	0d92      	lsrs	r2, r2, #22
 80020aa:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 80020ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d908      	bls.n	80020ca <PCD_EP_ISR_Handler+0x772>
          {
            ep->xfer_len -= TxByteNbre;
 80020b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ba:	699a      	ldr	r2, [r3, #24]
 80020bc:	233e      	movs	r3, #62	; 0x3e
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c6:	619a      	str	r2, [r3, #24]
 80020c8:	e002      	b.n	80020d0 <PCD_EP_ISR_Handler+0x778>
          }
          else
          {
            ep->xfer_len = 0U;
 80020ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <PCD_EP_ISR_Handler+0x790>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0011      	movs	r1, r2
 80020e0:	0018      	movs	r0, r3
 80020e2:	f007 fa11 	bl	8009508 <HAL_PCD_DataInStageCallback>
 80020e6:	e01e      	b.n	8002126 <PCD_EP_ISR_Handler+0x7ce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	213e      	movs	r1, #62	; 0x3e
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	18d2      	adds	r2, r2, r3
 80020f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	18d2      	adds	r2, r2, r3
 8002102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002104:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800210c:	0011      	movs	r1, r2
 800210e:	0018      	movs	r0, r3
 8002110:	f003 f84a 	bl	80051a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002114:	e007      	b.n	8002126 <PCD_EP_ISR_Handler+0x7ce>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002116:	2352      	movs	r3, #82	; 0x52
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	881a      	ldrh	r2, [r3, #0]
 800211c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f933 	bl	800238c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2244      	movs	r2, #68	; 0x44
 800212c:	5a9b      	ldrh	r3, [r3, r2]
 800212e:	b29b      	uxth	r3, r3
 8002130:	b21b      	sxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	da01      	bge.n	800213a <PCD_EP_ISR_Handler+0x7e2>
 8002136:	f7ff fc15 	bl	8001964 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b017      	add	sp, #92	; 0x5c
 8002142:	bd90      	pop	{r4, r7, pc}
 8002144:	00000406 	.word	0x00000406
 8002148:	00000402 	.word	0x00000402

0800214c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	1dbb      	adds	r3, r7, #6
 8002158:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800215a:	1dbb      	adds	r3, r7, #6
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	01db      	lsls	r3, r3, #7
 8002162:	4013      	ands	r3, r2
 8002164:	d100      	bne.n	8002168 <HAL_PCD_EP_DB_Receive+0x1c>
 8002166:	e07f      	b.n	8002268 <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2250      	movs	r2, #80	; 0x50
 800216e:	5a9b      	ldrh	r3, [r3, r2]
 8002170:	b29b      	uxth	r3, r3
 8002172:	001a      	movs	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	18d2      	adds	r2, r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	18d3      	adds	r3, r2, r3
 8002182:	4a7c      	ldr	r2, [pc, #496]	; (8002374 <HAL_PCD_EP_DB_Receive+0x228>)
 8002184:	4694      	mov	ip, r2
 8002186:	4463      	add	r3, ip
 8002188:	881a      	ldrh	r2, [r3, #0]
 800218a:	211a      	movs	r1, #26
 800218c:	187b      	adds	r3, r7, r1
 800218e:	0592      	lsls	r2, r2, #22
 8002190:	0d92      	lsrs	r2, r2, #22
 8002192:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	187b      	adds	r3, r7, r1
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d308      	bcc.n	80021b2 <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	231a      	movs	r3, #26
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	e002      	b.n	80021b8 <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d121      	bne.n	8002204 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	001a      	movs	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	18d3      	adds	r3, r2, r3
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	2018      	movs	r0, #24
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	4968      	ldr	r1, [pc, #416]	; (8002378 <HAL_PCD_EP_DB_Receive+0x22c>)
 80021d8:	400a      	ands	r2, r1
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	183b      	adds	r3, r7, r0
 80021de:	183a      	adds	r2, r7, r0
 80021e0:	8812      	ldrh	r2, [r2, #0]
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0189      	lsls	r1, r1, #6
 80021e6:	404a      	eors	r2, r1
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	001a      	movs	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	183a      	adds	r2, r7, r0
 80021fa:	8812      	ldrh	r2, [r2, #0]
 80021fc:	495f      	ldr	r1, [pc, #380]	; (800237c <HAL_PCD_EP_DB_Receive+0x230>)
 80021fe:	430a      	orrs	r2, r1
 8002200:	b292      	uxth	r2, r2
 8002202:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002204:	1dbb      	adds	r3, r7, #6
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	4013      	ands	r3, r2
 800220c:	d01a      	beq.n	8002244 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	001a      	movs	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	18d3      	adds	r3, r2, r3
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29a      	uxth	r2, r3
 8002220:	2016      	movs	r0, #22
 8002222:	183b      	adds	r3, r7, r0
 8002224:	4956      	ldr	r1, [pc, #344]	; (8002380 <HAL_PCD_EP_DB_Receive+0x234>)
 8002226:	400a      	ands	r2, r1
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	001a      	movs	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	18d3      	adds	r3, r2, r3
 8002238:	183a      	adds	r2, r7, r0
 800223a:	8812      	ldrh	r2, [r2, #0]
 800223c:	4951      	ldr	r1, [pc, #324]	; (8002384 <HAL_PCD_EP_DB_Receive+0x238>)
 800223e:	430a      	orrs	r2, r1
 8002240:	b292      	uxth	r2, r2
 8002242:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002244:	231a      	movs	r3, #26
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d100      	bne.n	8002250 <HAL_PCD_EP_DB_Receive+0x104>
 800224e:	e089      	b.n	8002364 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6959      	ldr	r1, [r3, #20]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	891a      	ldrh	r2, [r3, #8]
 800225c:	231a      	movs	r3, #26
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	f004 f9f4 	bl	800664e <USB_ReadPMA>
 8002266:	e07d      	b.n	8002364 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2250      	movs	r2, #80	; 0x50
 800226e:	5a9b      	ldrh	r3, [r3, r2]
 8002270:	b29b      	uxth	r3, r3
 8002272:	001a      	movs	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	18d2      	adds	r2, r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	18d3      	adds	r3, r2, r3
 8002282:	4a41      	ldr	r2, [pc, #260]	; (8002388 <HAL_PCD_EP_DB_Receive+0x23c>)
 8002284:	4694      	mov	ip, r2
 8002286:	4463      	add	r3, ip
 8002288:	881a      	ldrh	r2, [r3, #0]
 800228a:	211a      	movs	r1, #26
 800228c:	187b      	adds	r3, r7, r1
 800228e:	0592      	lsls	r2, r2, #22
 8002290:	0d92      	lsrs	r2, r2, #22
 8002292:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	187b      	adds	r3, r7, r1
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d308      	bcc.n	80022b2 <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	231a      	movs	r3, #26
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	1ad2      	subs	r2, r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	619a      	str	r2, [r3, #24]
 80022b0:	e002      	b.n	80022b8 <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d121      	bne.n	8002304 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	001a      	movs	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	18d3      	adds	r3, r2, r3
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	201e      	movs	r0, #30
 80022d4:	183b      	adds	r3, r7, r0
 80022d6:	4928      	ldr	r1, [pc, #160]	; (8002378 <HAL_PCD_EP_DB_Receive+0x22c>)
 80022d8:	400a      	ands	r2, r1
 80022da:	801a      	strh	r2, [r3, #0]
 80022dc:	183b      	adds	r3, r7, r0
 80022de:	183a      	adds	r2, r7, r0
 80022e0:	8812      	ldrh	r2, [r2, #0]
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	0189      	lsls	r1, r1, #6
 80022e6:	404a      	eors	r2, r1
 80022e8:	801a      	strh	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	001a      	movs	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	18d3      	adds	r3, r2, r3
 80022f8:	183a      	adds	r2, r7, r0
 80022fa:	8812      	ldrh	r2, [r2, #0]
 80022fc:	491f      	ldr	r1, [pc, #124]	; (800237c <HAL_PCD_EP_DB_Receive+0x230>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	b292      	uxth	r2, r2
 8002302:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002304:	1dbb      	adds	r3, r7, #6
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2240      	movs	r2, #64	; 0x40
 800230a:	4013      	ands	r3, r2
 800230c:	d11a      	bne.n	8002344 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	001a      	movs	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	18d3      	adds	r3, r2, r3
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29a      	uxth	r2, r3
 8002320:	201c      	movs	r0, #28
 8002322:	183b      	adds	r3, r7, r0
 8002324:	4916      	ldr	r1, [pc, #88]	; (8002380 <HAL_PCD_EP_DB_Receive+0x234>)
 8002326:	400a      	ands	r2, r1
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	001a      	movs	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	18d3      	adds	r3, r2, r3
 8002338:	183a      	adds	r2, r7, r0
 800233a:	8812      	ldrh	r2, [r2, #0]
 800233c:	4911      	ldr	r1, [pc, #68]	; (8002384 <HAL_PCD_EP_DB_Receive+0x238>)
 800233e:	430a      	orrs	r2, r1
 8002340:	b292      	uxth	r2, r2
 8002342:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002344:	231a      	movs	r3, #26
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	6959      	ldr	r1, [r3, #20]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	895a      	ldrh	r2, [r3, #10]
 800235a:	231a      	movs	r3, #26
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	f004 f975 	bl	800664e <USB_ReadPMA>
    }
  }

  return count;
 8002364:	231a      	movs	r3, #26
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	881b      	ldrh	r3, [r3, #0]
}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b008      	add	sp, #32
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	00000402 	.word	0x00000402
 8002378:	ffffbf8f 	.word	0xffffbf8f
 800237c:	ffff8080 	.word	0xffff8080
 8002380:	ffff8f8f 	.word	0xffff8f8f
 8002384:	ffff80c0 	.word	0xffff80c0
 8002388:	00000406 	.word	0x00000406

0800238c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0a2      	sub	sp, #136	; 0x88
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	1dbb      	adds	r3, r7, #6
 8002398:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800239a:	1dbb      	adds	r3, r7, #6
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	4013      	ands	r3, r2
 80023a2:	d100      	bne.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80023a4:	e1c8      	b.n	8002738 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2250      	movs	r2, #80	; 0x50
 80023ac:	5a9b      	ldrh	r3, [r3, r2]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	001a      	movs	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	18d2      	adds	r2, r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	18d3      	adds	r3, r2, r3
 80023c0:	4ad7      	ldr	r2, [pc, #860]	; (8002720 <HAL_PCD_EP_DB_Transmit+0x394>)
 80023c2:	4694      	mov	ip, r2
 80023c4:	4463      	add	r3, ip
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	2154      	movs	r1, #84	; 0x54
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	0592      	lsls	r2, r2, #22
 80023ce:	0d92      	lsrs	r2, r2, #22
 80023d0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	187b      	adds	r3, r7, r1
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d908      	bls.n	80023f0 <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	2354      	movs	r3, #84	; 0x54
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	1ad2      	subs	r2, r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	619a      	str	r2, [r3, #24]
 80023ee:	e002      	b.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d000      	beq.n	8002400 <HAL_PCD_EP_DB_Transmit+0x74>
 80023fe:	e0b5      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d125      	bne.n	8002454 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2250      	movs	r2, #80	; 0x50
 8002414:	5a9b      	ldrh	r3, [r3, r2]
 8002416:	b29b      	uxth	r3, r3
 8002418:	001a      	movs	r2, r3
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	189b      	adds	r3, r3, r2
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	00da      	lsls	r2, r3, #3
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	18d3      	adds	r3, r2, r3
 800242a:	4abd      	ldr	r2, [pc, #756]	; (8002720 <HAL_PCD_EP_DB_Transmit+0x394>)
 800242c:	4694      	mov	ip, r2
 800242e:	4463      	add	r3, ip
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	4aba      	ldr	r2, [pc, #744]	; (8002724 <HAL_PCD_EP_DB_Transmit+0x398>)
 800243a:	4013      	ands	r3, r2
 800243c:	b29a      	uxth	r2, r3
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4ab7      	ldr	r2, [pc, #732]	; (8002728 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800244a:	4313      	orrs	r3, r2
 800244c:	b29a      	uxth	r2, r3
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	e01b      	b.n	800248c <HAL_PCD_EP_DB_Transmit+0x100>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	785b      	ldrb	r3, [r3, #1]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d117      	bne.n	800248c <HAL_PCD_EP_DB_Transmit+0x100>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2250      	movs	r2, #80	; 0x50
 8002468:	5a9b      	ldrh	r3, [r3, r2]
 800246a:	b29b      	uxth	r3, r3
 800246c:	001a      	movs	r2, r3
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	189b      	adds	r3, r3, r2
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	00da      	lsls	r2, r3, #3
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	18d3      	adds	r3, r2, r3
 800247e:	4aa8      	ldr	r2, [pc, #672]	; (8002720 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002480:	4694      	mov	ip, r2
 8002482:	4463      	add	r3, ip
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d125      	bne.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x15a>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2250      	movs	r2, #80	; 0x50
 80024a6:	5a9b      	ldrh	r3, [r3, r2]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	001a      	movs	r2, r3
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	00da      	lsls	r2, r3, #3
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	18d3      	adds	r3, r2, r3
 80024bc:	4a9b      	ldr	r2, [pc, #620]	; (800272c <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80024be:	4694      	mov	ip, r2
 80024c0:	4463      	add	r3, ip
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4a96      	ldr	r2, [pc, #600]	; (8002724 <HAL_PCD_EP_DB_Transmit+0x398>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4a93      	ldr	r2, [pc, #588]	; (8002728 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	b29a      	uxth	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	e018      	b.n	8002518 <HAL_PCD_EP_DB_Transmit+0x18c>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	785b      	ldrb	r3, [r3, #1]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d114      	bne.n	8002518 <HAL_PCD_EP_DB_Transmit+0x18c>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2250      	movs	r2, #80	; 0x50
 80024f4:	5a9b      	ldrh	r3, [r3, r2]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	001a      	movs	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	189b      	adds	r3, r3, r2
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	00da      	lsls	r2, r3, #3
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	18d3      	adds	r3, r2, r3
 800250a:	4a88      	ldr	r2, [pc, #544]	; (800272c <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800250c:	4694      	mov	ip, r2
 800250e:	4463      	add	r3, ip
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	0011      	movs	r1, r2
 8002520:	0018      	movs	r0, r3
 8002522:	f006 fff1 	bl	8009508 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002526:	1dbb      	adds	r3, r7, #6
 8002528:	881a      	ldrh	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	01db      	lsls	r3, r3, #7
 800252e:	4013      	ands	r3, r2
 8002530:	d100      	bne.n	8002534 <HAL_PCD_EP_DB_Transmit+0x1a8>
 8002532:	e2d3      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	001a      	movs	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	18d3      	adds	r3, r2, r3
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29a      	uxth	r2, r3
 8002546:	2012      	movs	r0, #18
 8002548:	183b      	adds	r3, r7, r0
 800254a:	4979      	ldr	r1, [pc, #484]	; (8002730 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800254c:	400a      	ands	r2, r1
 800254e:	801a      	strh	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	001a      	movs	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	18d3      	adds	r3, r2, r3
 800255e:	183a      	adds	r2, r7, r0
 8002560:	8812      	ldrh	r2, [r2, #0]
 8002562:	4974      	ldr	r1, [pc, #464]	; (8002734 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8002564:	430a      	orrs	r2, r1
 8002566:	b292      	uxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]
 800256a:	e2b7      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	01db      	lsls	r3, r3, #7
 8002574:	4013      	ands	r3, r2
 8002576:	d01a      	beq.n	80025ae <HAL_PCD_EP_DB_Transmit+0x222>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	001a      	movs	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	18d3      	adds	r3, r2, r3
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29a      	uxth	r2, r3
 800258a:	2044      	movs	r0, #68	; 0x44
 800258c:	183b      	adds	r3, r7, r0
 800258e:	4968      	ldr	r1, [pc, #416]	; (8002730 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002590:	400a      	ands	r2, r1
 8002592:	801a      	strh	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	001a      	movs	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	183a      	adds	r2, r7, r0
 80025a4:	8812      	ldrh	r2, [r2, #0]
 80025a6:	4963      	ldr	r1, [pc, #396]	; (8002734 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80025a8:	430a      	orrs	r2, r1
 80025aa:	b292      	uxth	r2, r2
 80025ac:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2224      	movs	r2, #36	; 0x24
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d000      	beq.n	80025ba <HAL_PCD_EP_DB_Transmit+0x22e>
 80025b8:	e290      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	2154      	movs	r1, #84	; 0x54
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	18d2      	adds	r2, r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	18d2      	adds	r2, r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	6a1a      	ldr	r2, [r3, #32]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d309      	bcc.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = ep->maxpacket;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f0:	1ad2      	subs	r2, r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	621a      	str	r2, [r3, #32]
 80025f6:	e016      	b.n	8002626 <HAL_PCD_EP_DB_Transmit+0x29a>
        }
        else if (ep->xfer_len_db == 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d108      	bne.n	8002612 <HAL_PCD_EP_DB_Transmit+0x286>
        {
          len = TxByteNbre;
 8002600:	2354      	movs	r3, #84	; 0x54
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]
 8002610:	e009      	b.n	8002626 <HAL_PCD_EP_DB_Transmit+0x29a>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2224      	movs	r2, #36	; 0x24
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d150      	bne.n	80026d0 <HAL_PCD_EP_DB_Transmit+0x344>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2250      	movs	r2, #80	; 0x50
 800263a:	5a9b      	ldrh	r3, [r3, r2]
 800263c:	b29b      	uxth	r3, r3
 800263e:	001a      	movs	r2, r3
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	189b      	adds	r3, r3, r2
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	00da      	lsls	r2, r3, #3
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	18d3      	adds	r3, r2, r3
 8002650:	4a33      	ldr	r2, [pc, #204]	; (8002720 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002652:	4694      	mov	ip, r2
 8002654:	4463      	add	r3, ip
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
 8002658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800265a:	2b00      	cmp	r3, #0
 800265c:	d110      	bne.n	8002680 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800265e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002666:	4013      	ands	r3, r2
 8002668:	b29a      	uxth	r2, r3
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	801a      	strh	r2, [r3, #0]
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	4a2c      	ldr	r2, [pc, #176]	; (8002728 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	b29a      	uxth	r2, r3
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	e044      	b.n	800270a <HAL_PCD_EP_DB_Transmit+0x37e>
 8002680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002682:	2b3e      	cmp	r3, #62	; 0x3e
 8002684:	d810      	bhi.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x31c>
 8002686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	653b      	str	r3, [r7, #80]	; 0x50
 800268c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800268e:	2201      	movs	r2, #1
 8002690:	4013      	ands	r3, r2
 8002692:	d002      	beq.n	800269a <HAL_PCD_EP_DB_Transmit+0x30e>
 8002694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002696:	3301      	adds	r3, #1
 8002698:	653b      	str	r3, [r7, #80]	; 0x50
 800269a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269c:	b29b      	uxth	r3, r3
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	e030      	b.n	800270a <HAL_PCD_EP_DB_Transmit+0x37e>
 80026a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	653b      	str	r3, [r7, #80]	; 0x50
 80026ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b0:	221f      	movs	r2, #31
 80026b2:	4013      	ands	r3, r2
 80026b4:	d102      	bne.n	80026bc <HAL_PCD_EP_DB_Transmit+0x330>
 80026b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b8:	3b01      	subs	r3, #1
 80026ba:	653b      	str	r3, [r7, #80]	; 0x50
 80026bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026be:	b29b      	uxth	r3, r3
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	e01c      	b.n	800270a <HAL_PCD_EP_DB_Transmit+0x37e>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d118      	bne.n	800270a <HAL_PCD_EP_DB_Transmit+0x37e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	643b      	str	r3, [r7, #64]	; 0x40
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2250      	movs	r2, #80	; 0x50
 80026e4:	5a9b      	ldrh	r3, [r3, r2]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	001a      	movs	r2, r3
 80026ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ec:	189b      	adds	r3, r3, r2
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	00da      	lsls	r2, r3, #3
 80026f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_PCD_EP_DB_Transmit+0x394>)
 80026fc:	4694      	mov	ip, r2
 80026fe:	4463      	add	r3, ip
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002704:	b29a      	uxth	r2, r3
 8002706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002708:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6959      	ldr	r1, [r3, #20]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	891a      	ldrh	r2, [r3, #8]
 8002716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002718:	b29b      	uxth	r3, r3
 800271a:	f003 ff55 	bl	80065c8 <USB_WritePMA>
 800271e:	e1dd      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x750>
 8002720:	00000402 	.word	0x00000402
 8002724:	ffff83ff 	.word	0xffff83ff
 8002728:	ffff8000 	.word	0xffff8000
 800272c:	00000406 	.word	0x00000406
 8002730:	ffff8f8f 	.word	0xffff8f8f
 8002734:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2250      	movs	r2, #80	; 0x50
 800273e:	5a9b      	ldrh	r3, [r3, r2]
 8002740:	b29b      	uxth	r3, r3
 8002742:	001a      	movs	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	18d2      	adds	r2, r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	18d3      	adds	r3, r2, r3
 8002752:	4aca      	ldr	r2, [pc, #808]	; (8002a7c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002754:	4694      	mov	ip, r2
 8002756:	4463      	add	r3, ip
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	2154      	movs	r1, #84	; 0x54
 800275c:	187b      	adds	r3, r7, r1
 800275e:	0592      	lsls	r2, r2, #22
 8002760:	0d92      	lsrs	r2, r2, #22
 8002762:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	187b      	adds	r3, r7, r1
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d308      	bcc.n	8002782 <HAL_PCD_EP_DB_Transmit+0x3f6>
    {
      ep->xfer_len -= TxByteNbre;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	2354      	movs	r3, #84	; 0x54
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	619a      	str	r2, [r3, #24]
 8002780:	e002      	b.n	8002788 <HAL_PCD_EP_DB_Transmit+0x3fc>
    }
    else
    {
      ep->xfer_len = 0U;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d000      	beq.n	8002792 <HAL_PCD_EP_DB_Transmit+0x406>
 8002790:	e0be      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x584>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d125      	bne.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x45a>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2250      	movs	r2, #80	; 0x50
 80027a6:	5a9b      	ldrh	r3, [r3, r2]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	001a      	movs	r2, r3
 80027ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00da      	lsls	r2, r3, #3
 80027b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ba:	18d3      	adds	r3, r2, r3
 80027bc:	4ab0      	ldr	r2, [pc, #704]	; (8002a80 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80027be:	4694      	mov	ip, r2
 80027c0:	4463      	add	r3, ip
 80027c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80027c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4aae      	ldr	r2, [pc, #696]	; (8002a84 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4aab      	ldr	r2, [pc, #684]	; (8002a88 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	b29a      	uxth	r2, r3
 80027e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	e01b      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x492>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d117      	bne.n	800281e <HAL_PCD_EP_DB_Transmit+0x492>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	673b      	str	r3, [r7, #112]	; 0x70
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2250      	movs	r2, #80	; 0x50
 80027fa:	5a9b      	ldrh	r3, [r3, r2]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	001a      	movs	r2, r3
 8002800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002802:	189b      	adds	r3, r3, r2
 8002804:	673b      	str	r3, [r7, #112]	; 0x70
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	00da      	lsls	r2, r3, #3
 800280c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280e:	18d3      	adds	r3, r2, r3
 8002810:	4a9b      	ldr	r2, [pc, #620]	; (8002a80 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002812:	4694      	mov	ip, r2
 8002814:	4463      	add	r3, ip
 8002816:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	2200      	movs	r2, #0
 800281c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	18ba      	adds	r2, r7, r2
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d125      	bne.n	800287c <HAL_PCD_EP_DB_Transmit+0x4f0>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2250      	movs	r2, #80	; 0x50
 800283c:	5a9b      	ldrh	r3, [r3, r2]
 800283e:	b29b      	uxth	r3, r3
 8002840:	001a      	movs	r2, r3
 8002842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002844:	189b      	adds	r3, r3, r2
 8002846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	00da      	lsls	r2, r3, #3
 800284e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002850:	18d3      	adds	r3, r2, r3
 8002852:	4a8a      	ldr	r2, [pc, #552]	; (8002a7c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002854:	4694      	mov	ip, r2
 8002856:	4463      	add	r3, ip
 8002858:	64bb      	str	r3, [r7, #72]	; 0x48
 800285a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4a88      	ldr	r2, [pc, #544]	; (8002a84 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002862:	4013      	ands	r3, r2
 8002864:	b29a      	uxth	r2, r3
 8002866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002868:	801a      	strh	r2, [r3, #0]
 800286a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4a85      	ldr	r2, [pc, #532]	; (8002a88 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	b29a      	uxth	r2, r3
 8002876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	e01f      	b.n	80028bc <HAL_PCD_EP_DB_Transmit+0x530>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d11b      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x530>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2250      	movs	r2, #80	; 0x50
 800288a:	5a9b      	ldrh	r3, [r3, r2]
 800288c:	b29b      	uxth	r3, r3
 800288e:	001a      	movs	r2, r3
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	187b      	adds	r3, r7, r1
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	189b      	adds	r3, r3, r2
 8002898:	187a      	adds	r2, r7, r1
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	00da      	lsls	r2, r3, #3
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	18d3      	adds	r3, r2, r3
 80028a8:	4a74      	ldr	r2, [pc, #464]	; (8002a7c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80028aa:	4694      	mov	ip, r2
 80028ac:	4463      	add	r3, ip
 80028ae:	2284      	movs	r2, #132	; 0x84
 80028b0:	18b9      	adds	r1, r7, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	18bb      	adds	r3, r7, r2
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f006 fe1f 	bl	8009508 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028ca:	1dbb      	adds	r3, r7, #6
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	01db      	lsls	r3, r3, #7
 80028d2:	4013      	ands	r3, r2
 80028d4:	d000      	beq.n	80028d8 <HAL_PCD_EP_DB_Transmit+0x54c>
 80028d6:	e101      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	001a      	movs	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	2046      	movs	r0, #70	; 0x46
 80028ec:	183b      	adds	r3, r7, r0
 80028ee:	4967      	ldr	r1, [pc, #412]	; (8002a8c <HAL_PCD_EP_DB_Transmit+0x700>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	801a      	strh	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	001a      	movs	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	183a      	adds	r2, r7, r0
 8002904:	8812      	ldrh	r2, [r2, #0]
 8002906:	4962      	ldr	r1, [pc, #392]	; (8002a90 <HAL_PCD_EP_DB_Transmit+0x704>)
 8002908:	430a      	orrs	r2, r1
 800290a:	b292      	uxth	r2, r2
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	e0e5      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002910:	1dbb      	adds	r3, r7, #6
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	4013      	ands	r3, r2
 800291a:	d11a      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x5c6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	001a      	movs	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29a      	uxth	r2, r3
 800292e:	2056      	movs	r0, #86	; 0x56
 8002930:	183b      	adds	r3, r7, r0
 8002932:	4956      	ldr	r1, [pc, #344]	; (8002a8c <HAL_PCD_EP_DB_Transmit+0x700>)
 8002934:	400a      	ands	r2, r1
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	001a      	movs	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	18d3      	adds	r3, r2, r3
 8002946:	183a      	adds	r2, r7, r0
 8002948:	8812      	ldrh	r2, [r2, #0]
 800294a:	4951      	ldr	r1, [pc, #324]	; (8002a90 <HAL_PCD_EP_DB_Transmit+0x704>)
 800294c:	430a      	orrs	r2, r1
 800294e:	b292      	uxth	r2, r2
 8002950:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	5c9b      	ldrb	r3, [r3, r2]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d000      	beq.n	800295e <HAL_PCD_EP_DB_Transmit+0x5d2>
 800295c:	e0be      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	2154      	movs	r1, #84	; 0x54
 8002964:	187b      	adds	r3, r7, r1
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	18d2      	adds	r2, r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	187b      	adds	r3, r7, r1
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	18d2      	adds	r2, r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	6a1a      	ldr	r2, [r3, #32]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	429a      	cmp	r2, r3
 8002986:	d309      	bcc.n	800299c <HAL_PCD_EP_DB_Transmit+0x610>
        {
          len = ep->maxpacket;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002994:	1ad2      	subs	r2, r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	621a      	str	r2, [r3, #32]
 800299a:	e016      	b.n	80029ca <HAL_PCD_EP_DB_Transmit+0x63e>
        }
        else if (ep->xfer_len_db == 0U)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x62a>
        {
          len = TxByteNbre;
 80029a4:	2354      	movs	r3, #84	; 0x54
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2224      	movs	r2, #36	; 0x24
 80029b0:	2100      	movs	r1, #0
 80029b2:	5499      	strb	r1, [r3, r2]
 80029b4:	e009      	b.n	80029ca <HAL_PCD_EP_DB_Transmit+0x63e>
        }
        else
        {
          len = ep->xfer_len_db;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2224      	movs	r2, #36	; 0x24
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	667b      	str	r3, [r7, #100]	; 0x64
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d15d      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x708>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2250      	movs	r2, #80	; 0x50
 80029e4:	5a9b      	ldrh	r3, [r3, r2]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	001a      	movs	r2, r3
 80029ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ec:	189b      	adds	r3, r3, r2
 80029ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	00da      	lsls	r2, r3, #3
 80029f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f8:	18d3      	adds	r3, r2, r3
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80029fc:	4694      	mov	ip, r2
 80029fe:	4463      	add	r3, ip
 8002a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d110      	bne.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x69e>
 8002a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a26:	801a      	strh	r2, [r3, #0]
 8002a28:	e04e      	b.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a2e:	d810      	bhi.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x6c6>
 8002a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	677b      	str	r3, [r7, #116]	; 0x74
 8002a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d002      	beq.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x6b8>
 8002a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a40:	3301      	adds	r3, #1
 8002a42:	677b      	str	r3, [r7, #116]	; 0x74
 8002a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	029b      	lsls	r3, r3, #10
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	e03a      	b.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	677b      	str	r3, [r7, #116]	; 0x74
 8002a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d102      	bne.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x6da>
 8002a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a62:	3b01      	subs	r3, #1
 8002a64:	677b      	str	r3, [r7, #116]	; 0x74
 8002a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	e026      	b.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	00000406 	.word	0x00000406
 8002a80:	00000402 	.word	0x00000402
 8002a84:	ffff83ff 	.word	0xffff83ff
 8002a88:	ffff8000 	.word	0xffff8000
 8002a8c:	ffff8f8f 	.word	0xffff8f8f
 8002a90:	ffffc080 	.word	0xffffc080
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d115      	bne.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2250      	movs	r2, #80	; 0x50
 8002aa2:	5a9b      	ldrh	r3, [r3, r2]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	667b      	str	r3, [r7, #100]	; 0x64
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00da      	lsls	r2, r3, #3
 8002ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8002aba:	4694      	mov	ip, r2
 8002abc:	4463      	add	r3, ip
 8002abe:	663b      	str	r3, [r7, #96]	; 0x60
 8002ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6959      	ldr	r1, [r3, #20]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	895a      	ldrh	r2, [r3, #10]
 8002ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f003 fd76 	bl	80065c8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	2010      	movs	r0, #16
 8002af0:	183b      	adds	r3, r7, r0
 8002af2:	4911      	ldr	r1, [pc, #68]	; (8002b38 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	801a      	strh	r2, [r3, #0]
 8002af8:	183b      	adds	r3, r7, r0
 8002afa:	183a      	adds	r2, r7, r0
 8002afc:	8812      	ldrh	r2, [r2, #0]
 8002afe:	2110      	movs	r1, #16
 8002b00:	404a      	eors	r2, r1
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	183b      	adds	r3, r7, r0
 8002b06:	183a      	adds	r2, r7, r0
 8002b08:	8812      	ldrh	r2, [r2, #0]
 8002b0a:	2120      	movs	r1, #32
 8002b0c:	404a      	eors	r2, r1
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	001a      	movs	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	183a      	adds	r2, r7, r0
 8002b20:	8812      	ldrh	r2, [r2, #0]
 8002b22:	4906      	ldr	r1, [pc, #24]	; (8002b3c <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8002b24:	430a      	orrs	r2, r1
 8002b26:	b292      	uxth	r2, r2
 8002b28:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b022      	add	sp, #136	; 0x88
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	00000406 	.word	0x00000406
 8002b38:	ffff8fbf 	.word	0xffff8fbf
 8002b3c:	ffff8080 	.word	0xffff8080

08002b40 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	0008      	movs	r0, r1
 8002b4a:	0011      	movs	r1, r2
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	240a      	movs	r4, #10
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	1c02      	adds	r2, r0, #0
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	2308      	movs	r3, #8
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	1c0a      	adds	r2, r1, #0
 8002b5c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	4013      	ands	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6c:	230a      	movs	r3, #10
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	2207      	movs	r2, #7
 8002b74:	4013      	ands	r3, r2
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	0013      	movs	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	189b      	adds	r3, r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	18d3      	adds	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e00b      	b.n	8002ba0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b88:	230a      	movs	r3, #10
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	0013      	movs	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	3369      	adds	r3, #105	; 0x69
 8002b98:	33ff      	adds	r3, #255	; 0xff
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	18d3      	adds	r3, r2, r3
 8002b9e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2200      	movs	r2, #0
 8002bae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	80da      	strh	r2, [r3, #6]
 8002bb8:	e00b      	b.n	8002bd2 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b007      	add	sp, #28
 8002bda:	bd90      	pop	{r4, r7, pc}

08002bdc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	23ba      	movs	r3, #186	; 0xba
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	23b8      	movs	r3, #184	; 0xb8
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2254      	movs	r2, #84	; 0x54
 8002c02:	5a9b      	ldrh	r3, [r3, r2]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2201      	movs	r2, #1
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	b299      	uxth	r1, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2254      	movs	r2, #84	; 0x54
 8002c10:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2254      	movs	r2, #84	; 0x54
 8002c16:	5a9b      	ldrh	r3, [r3, r2]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b299      	uxth	r1, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2254      	movs	r2, #84	; 0x54
 8002c24:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b004      	add	sp, #16
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	000a      	movs	r2, r1
 8002c3a:	1cfb      	adds	r3, r7, #3
 8002c3c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f000 fbb4 	bl	80033c4 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5c:	4bc3      	ldr	r3, [pc, #780]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	220c      	movs	r2, #12
 8002c62:	4013      	ands	r3, r2
 8002c64:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c66:	4bc1      	ldr	r3, [pc, #772]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	025b      	lsls	r3, r3, #9
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <HAL_RCC_OscConfig+0x36>
 8002c7c:	e07e      	b.n	8002d7c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d007      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d112      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x68>
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	025b      	lsls	r3, r3, #9
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d10d      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	4bb5      	ldr	r3, [pc, #724]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x5a>
 8002ca0:	e06b      	b.n	8002d7a <HAL_RCC_OscConfig+0x132>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d167      	bne.n	8002d7a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f000 fb8a 	bl	80033c4 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	025b      	lsls	r3, r3, #9
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x84>
 8002cbc:	4bab      	ldr	r3, [pc, #684]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4baa      	ldr	r3, [pc, #680]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	0249      	lsls	r1, r1, #9
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e027      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	23a0      	movs	r3, #160	; 0xa0
 8002cd2:	02db      	lsls	r3, r3, #11
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_RCC_OscConfig+0xae>
 8002cd8:	4ba4      	ldr	r3, [pc, #656]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4ba3      	ldr	r3, [pc, #652]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	02c9      	lsls	r1, r1, #11
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	4ba1      	ldr	r3, [pc, #644]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4ba0      	ldr	r3, [pc, #640]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0249      	lsls	r1, r1, #9
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e012      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002cf6:	4b9d      	ldr	r3, [pc, #628]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b9c      	ldr	r3, [pc, #624]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002cfc:	499c      	ldr	r1, [pc, #624]	; (8002f70 <HAL_RCC_OscConfig+0x328>)
 8002cfe:	400a      	ands	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	4b9a      	ldr	r3, [pc, #616]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	025b      	lsls	r3, r3, #9
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4b96      	ldr	r3, [pc, #600]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b95      	ldr	r3, [pc, #596]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002d16:	4997      	ldr	r1, [pc, #604]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fd fe68 	bl	80009f8 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d2c:	e009      	b.n	8002d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fd fe63 	bl	80009f8 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d902      	bls.n	8002d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	f000 fb41 	bl	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d42:	4b8a      	ldr	r3, [pc, #552]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	029b      	lsls	r3, r3, #10
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d0ef      	beq.n	8002d2e <HAL_RCC_OscConfig+0xe6>
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fe52 	bl	80009f8 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5a:	f7fd fe4d 	bl	80009f8 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	; 0x64
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e32b      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d6c:	4b7f      	ldr	r3, [pc, #508]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	4013      	ands	r3, r2
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x112>
 8002d78:	e000      	b.n	8002d7c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d100      	bne.n	8002d88 <HAL_RCC_OscConfig+0x140>
 8002d86:	e08c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d13f      	bne.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d13c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002da0:	4b72      	ldr	r3, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2204      	movs	r2, #4
 8002da6:	4013      	ands	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_RCC_OscConfig+0x16c>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e307      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a6f      	ldr	r2, [pc, #444]	; (8002f78 <HAL_RCC_OscConfig+0x330>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	021a      	lsls	r2, r3, #8
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002dca:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2209      	movs	r2, #9
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	4b65      	ldr	r3, [pc, #404]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ddc:	f000 fc44 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8002de0:	0001      	movs	r1, r0
 8002de2:	4b62      	ldr	r3, [pc, #392]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	220f      	movs	r2, #15
 8002dea:	4013      	ands	r3, r2
 8002dec:	4a63      	ldr	r2, [pc, #396]	; (8002f7c <HAL_RCC_OscConfig+0x334>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	000a      	movs	r2, r1
 8002df2:	40da      	lsrs	r2, r3
 8002df4:	4b62      	ldr	r3, [pc, #392]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002df6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002df8:	4b62      	ldr	r3, [pc, #392]	; (8002f84 <HAL_RCC_OscConfig+0x33c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2513      	movs	r5, #19
 8002dfe:	197c      	adds	r4, r7, r5
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7fd fdb3 	bl	800096c <HAL_InitTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e0a:	197b      	adds	r3, r7, r5
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d047      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 8002e12:	2313      	movs	r3, #19
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	e2d4      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d027      	beq.n	8002e70 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e20:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2209      	movs	r2, #9
 8002e26:	4393      	bics	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fd fde1 	bl	80009f8 <HAL_GetTick>
 8002e36:	0003      	movs	r3, r0
 8002e38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7fd fddc 	bl	80009f8 <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e2ba      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2204      	movs	r2, #4
 8002e54:	4013      	ands	r3, r2
 8002e56:	d0f1      	beq.n	8002e3c <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <HAL_RCC_OscConfig+0x330>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	021a      	lsls	r2, r3, #8
 8002e68:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	e018      	b.n	8002ea2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e70:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002e76:	2101      	movs	r1, #1
 8002e78:	438a      	bics	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fd fdbc 	bl	80009f8 <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fd fdb7 	bl	80009f8 <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e295      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d1f1      	bne.n	8002e86 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d100      	bne.n	8002eae <HAL_RCC_OscConfig+0x266>
 8002eac:	e0a3      	b.n	8002ff6 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d141      	bne.n	8002f38 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_OscConfig+0x284>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e27b      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <HAL_RCC_OscConfig+0x340>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	0a19      	lsrs	r1, r3, #8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	061a      	lsls	r2, r3, #24
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	0b5b      	lsrs	r3, r3, #13
 8002efa:	3301      	adds	r3, #1
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	0212      	lsls	r2, r2, #8
 8002f00:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	210f      	movs	r1, #15
 8002f0a:	400b      	ands	r3, r1
 8002f0c:	491b      	ldr	r1, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x334>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f14:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x33c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2513      	movs	r5, #19
 8002f1c:	197c      	adds	r4, r7, r5
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7fd fd24 	bl	800096c <HAL_InitTick>
 8002f24:	0003      	movs	r3, r0
 8002f26:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f28:	197b      	adds	r3, r7, r5
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d062      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8002f30:	2313      	movs	r3, #19
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	e245      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d040      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f40:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_OscConfig+0x324>)
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	0049      	lsls	r1, r1, #1
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fd fd53 	bl	80009f8 <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f56:	e019      	b.n	8002f8c <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f58:	f7fd fd4e 	bl	80009f8 <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d912      	bls.n	8002f8c <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e22c      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	fffeffff 	.word	0xfffeffff
 8002f74:	fffbffff 	.word	0xfffbffff
 8002f78:	ffffe0ff 	.word	0xffffe0ff
 8002f7c:	0800bc44 	.word	0x0800bc44
 8002f80:	2000004c 	.word	0x2000004c
 8002f84:	20000050 	.word	0x20000050
 8002f88:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f8c:	4bc6      	ldr	r3, [pc, #792]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4013      	ands	r3, r2
 8002f96:	d0df      	beq.n	8002f58 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f98:	4bc3      	ldr	r3, [pc, #780]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4ac3      	ldr	r2, [pc, #780]	; (80032ac <HAL_RCC_OscConfig+0x664>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa6:	4bc0      	ldr	r3, [pc, #768]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fac:	4bbe      	ldr	r3, [pc, #760]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	0a19      	lsrs	r1, r3, #8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	061a      	lsls	r2, r3, #24
 8002fba:	4bbb      	ldr	r3, [pc, #748]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	e019      	b.n	8002ff6 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fc2:	4bb9      	ldr	r3, [pc, #740]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4bb8      	ldr	r3, [pc, #736]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8002fc8:	49b9      	ldr	r1, [pc, #740]	; (80032b0 <HAL_RCC_OscConfig+0x668>)
 8002fca:	400a      	ands	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fd fd13 	bl	80009f8 <HAL_GetTick>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd8:	f7fd fd0e 	bl	80009f8 <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1ec      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fea:	4baf      	ldr	r3, [pc, #700]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d036      	beq.n	800306e <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d019      	beq.n	800303c <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003008:	4ba7      	ldr	r3, [pc, #668]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 800300a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800300c:	4ba6      	ldr	r3, [pc, #664]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 800300e:	2101      	movs	r1, #1
 8003010:	430a      	orrs	r2, r1
 8003012:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fd fcf0 	bl	80009f8 <HAL_GetTick>
 8003018:	0003      	movs	r3, r0
 800301a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301e:	f7fd fceb 	bl	80009f8 <HAL_GetTick>
 8003022:	0002      	movs	r2, r0
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e1c9      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003030:	4b9d      	ldr	r3, [pc, #628]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	2202      	movs	r2, #2
 8003036:	4013      	ands	r3, r2
 8003038:	d0f1      	beq.n	800301e <HAL_RCC_OscConfig+0x3d6>
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	4b9a      	ldr	r3, [pc, #616]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 800303e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003040:	4b99      	ldr	r3, [pc, #612]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003042:	2101      	movs	r1, #1
 8003044:	438a      	bics	r2, r1
 8003046:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fd fcd6 	bl	80009f8 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003052:	f7fd fcd1 	bl	80009f8 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e1af      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003064:	4b90      	ldr	r3, [pc, #576]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003068:	2202      	movs	r2, #2
 800306a:	4013      	ands	r3, r2
 800306c:	d1f1      	bne.n	8003052 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2204      	movs	r2, #4
 8003074:	4013      	ands	r3, r2
 8003076:	d100      	bne.n	800307a <HAL_RCC_OscConfig+0x432>
 8003078:	e0af      	b.n	80031da <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2327      	movs	r3, #39	; 0x27
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003082:	4b89      	ldr	r3, [pc, #548]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	4013      	ands	r3, r2
 800308c:	d10a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b86      	ldr	r3, [pc, #536]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003092:	4b85      	ldr	r3, [pc, #532]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	0549      	lsls	r1, r1, #21
 8003098:	430a      	orrs	r2, r1
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800309c:	2327      	movs	r3, #39	; 0x27
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	4b83      	ldr	r3, [pc, #524]	; (80032b4 <HAL_RCC_OscConfig+0x66c>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	d11a      	bne.n	80030e6 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b0:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <HAL_RCC_OscConfig+0x66c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <HAL_RCC_OscConfig+0x66c>)
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	0049      	lsls	r1, r1, #1
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fd fc9b 	bl	80009f8 <HAL_GetTick>
 80030c2:	0003      	movs	r3, r0
 80030c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7fd fc96 	bl	80009f8 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e174      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_RCC_OscConfig+0x66c>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_OscConfig+0x4ba>
 80030f2:	4b6d      	ldr	r3, [pc, #436]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80030f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f6:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	0049      	lsls	r1, r1, #1
 80030fc:	430a      	orrs	r2, r1
 80030fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003100:	e031      	b.n	8003166 <HAL_RCC_OscConfig+0x51e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
 800310a:	4b67      	ldr	r3, [pc, #412]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 800310c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800310e:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003110:	4967      	ldr	r1, [pc, #412]	; (80032b0 <HAL_RCC_OscConfig+0x668>)
 8003112:	400a      	ands	r2, r1
 8003114:	651a      	str	r2, [r3, #80]	; 0x50
 8003116:	4b64      	ldr	r3, [pc, #400]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800311a:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 800311c:	4966      	ldr	r1, [pc, #408]	; (80032b8 <HAL_RCC_OscConfig+0x670>)
 800311e:	400a      	ands	r2, r1
 8003120:	651a      	str	r2, [r3, #80]	; 0x50
 8003122:	e020      	b.n	8003166 <HAL_RCC_OscConfig+0x51e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	23a0      	movs	r3, #160	; 0xa0
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	429a      	cmp	r2, r3
 800312e:	d10e      	bne.n	800314e <HAL_RCC_OscConfig+0x506>
 8003130:	4b5d      	ldr	r3, [pc, #372]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003134:	4b5c      	ldr	r3, [pc, #368]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	00c9      	lsls	r1, r1, #3
 800313a:	430a      	orrs	r2, r1
 800313c:	651a      	str	r2, [r3, #80]	; 0x50
 800313e:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003142:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003144:	2180      	movs	r1, #128	; 0x80
 8003146:	0049      	lsls	r1, r1, #1
 8003148:	430a      	orrs	r2, r1
 800314a:	651a      	str	r2, [r3, #80]	; 0x50
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x51e>
 800314e:	4b56      	ldr	r3, [pc, #344]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003152:	4b55      	ldr	r3, [pc, #340]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003154:	4956      	ldr	r1, [pc, #344]	; (80032b0 <HAL_RCC_OscConfig+0x668>)
 8003156:	400a      	ands	r2, r1
 8003158:	651a      	str	r2, [r3, #80]	; 0x50
 800315a:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 800315c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800315e:	4b52      	ldr	r3, [pc, #328]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003160:	4955      	ldr	r1, [pc, #340]	; (80032b8 <HAL_RCC_OscConfig+0x670>)
 8003162:	400a      	ands	r2, r1
 8003164:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fd fc43 	bl	80009f8 <HAL_GetTick>
 8003172:	0003      	movs	r3, r0
 8003174:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003176:	e009      	b.n	800318c <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003178:	f7fd fc3e 	bl	80009f8 <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	4a4e      	ldr	r2, [pc, #312]	; (80032bc <HAL_RCC_OscConfig+0x674>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e11b      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318c:	4b46      	ldr	r3, [pc, #280]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 800318e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4013      	ands	r3, r2
 8003196:	d0ef      	beq.n	8003178 <HAL_RCC_OscConfig+0x530>
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd fc2d 	bl	80009f8 <HAL_GetTick>
 800319e:	0003      	movs	r3, r0
 80031a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a2:	e009      	b.n	80031b8 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fd fc28 	bl	80009f8 <HAL_GetTick>
 80031a8:	0002      	movs	r2, r0
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	4a43      	ldr	r2, [pc, #268]	; (80032bc <HAL_RCC_OscConfig+0x674>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e105      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031b8:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80031ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4013      	ands	r3, r2
 80031c2:	d1ef      	bne.n	80031a4 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c4:	2327      	movs	r3, #39	; 0x27
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80031d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d2:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80031d4:	493a      	ldr	r1, [pc, #232]	; (80032c0 <HAL_RCC_OscConfig+0x678>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2220      	movs	r2, #32
 80031e0:	4013      	ands	r3, r2
 80031e2:	d049      	beq.n	8003278 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d026      	beq.n	800323a <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80031fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 80031fe:	2101      	movs	r1, #1
 8003200:	430a      	orrs	r2, r1
 8003202:	635a      	str	r2, [r3, #52]	; 0x34
 8003204:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_RCC_OscConfig+0x67c>)
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <HAL_RCC_OscConfig+0x67c>)
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	0189      	lsls	r1, r1, #6
 800320e:	430a      	orrs	r2, r1
 8003210:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fd fbf1 	bl	80009f8 <HAL_GetTick>
 8003216:	0003      	movs	r3, r0
 8003218:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800321c:	f7fd fbec 	bl	80009f8 <HAL_GetTick>
 8003220:	0002      	movs	r2, r0
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0ca      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2202      	movs	r2, #2
 8003234:	4013      	ands	r3, r2
 8003236:	d0f1      	beq.n	800321c <HAL_RCC_OscConfig+0x5d4>
 8003238:	e01e      	b.n	8003278 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003240:	2101      	movs	r1, #1
 8003242:	438a      	bics	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HAL_RCC_OscConfig+0x67c>)
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HAL_RCC_OscConfig+0x67c>)
 800324c:	491e      	ldr	r1, [pc, #120]	; (80032c8 <HAL_RCC_OscConfig+0x680>)
 800324e:	400a      	ands	r2, r1
 8003250:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fbd1 	bl	80009f8 <HAL_GetTick>
 8003256:	0003      	movs	r3, r0
 8003258:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325c:	f7fd fbcc 	bl	80009f8 <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e0aa      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2202      	movs	r2, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d1f1      	bne.n	800325c <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	d100      	bne.n	8003282 <HAL_RCC_OscConfig+0x63a>
 8003280:	e09f      	b.n	80033c2 <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d100      	bne.n	800328a <HAL_RCC_OscConfig+0x642>
 8003288:	e078      	b.n	800337c <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	2b02      	cmp	r3, #2
 8003290:	d159      	bne.n	8003346 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_RCC_OscConfig+0x660>)
 8003298:	490c      	ldr	r1, [pc, #48]	; (80032cc <HAL_RCC_OscConfig+0x684>)
 800329a:	400a      	ands	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fd fbab 	bl	80009f8 <HAL_GetTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032a6:	e01c      	b.n	80032e2 <HAL_RCC_OscConfig+0x69a>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	ffff1fff 	.word	0xffff1fff
 80032b0:	fffffeff 	.word	0xfffffeff
 80032b4:	40007000 	.word	0x40007000
 80032b8:	fffffbff 	.word	0xfffffbff
 80032bc:	00001388 	.word	0x00001388
 80032c0:	efffffff 	.word	0xefffffff
 80032c4:	40010000 	.word	0x40010000
 80032c8:	ffffdfff 	.word	0xffffdfff
 80032cc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd fb92 	bl	80009f8 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e070      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032e2:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	049b      	lsls	r3, r3, #18
 80032ea:	4013      	ands	r3, r2
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	4a37      	ldr	r2, [pc, #220]	; (80033d0 <HAL_RCC_OscConfig+0x788>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	431a      	orrs	r2, r3
 8003308:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 800330a:	430a      	orrs	r2, r1
 800330c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	0449      	lsls	r1, r1, #17
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fd fb6c 	bl	80009f8 <HAL_GetTick>
 8003320:	0003      	movs	r3, r0
 8003322:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7fd fb67 	bl	80009f8 <HAL_GetTick>
 800332a:	0002      	movs	r2, r0
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e045      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003338:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	049b      	lsls	r3, r3, #18
 8003340:	4013      	ands	r3, r2
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x6de>
 8003344:	e03d      	b.n	80033c2 <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 800334c:	4921      	ldr	r1, [pc, #132]	; (80033d4 <HAL_RCC_OscConfig+0x78c>)
 800334e:	400a      	ands	r2, r1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fd fb51 	bl	80009f8 <HAL_GetTick>
 8003356:	0003      	movs	r3, r0
 8003358:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335c:	f7fd fb4c 	bl	80009f8 <HAL_GetTick>
 8003360:	0002      	movs	r2, r0
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e02a      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	049b      	lsls	r3, r3, #18
 8003376:	4013      	ands	r3, r2
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x714>
 800337a:	e022      	b.n	80033c2 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e01d      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_RCC_OscConfig+0x784>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	401a      	ands	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	429a      	cmp	r2, r3
 800339c:	d10f      	bne.n	80033be <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	23f0      	movs	r3, #240	; 0xf0
 80033a2:	039b      	lsls	r3, r3, #14
 80033a4:	401a      	ands	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d107      	bne.n	80033be <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	23c0      	movs	r3, #192	; 0xc0
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	401a      	ands	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b00a      	add	sp, #40	; 0x28
 80033ca:	bdb0      	pop	{r4, r5, r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	ff02ffff 	.word	0xff02ffff
 80033d4:	feffffff 	.word	0xfeffffff

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e129      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b96      	ldr	r3, [pc, #600]	; (8003648 <HAL_RCC_ClockConfig+0x270>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	4013      	ands	r3, r2
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d91e      	bls.n	8003438 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b93      	ldr	r3, [pc, #588]	; (8003648 <HAL_RCC_ClockConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2201      	movs	r2, #1
 8003400:	4393      	bics	r3, r2
 8003402:	0019      	movs	r1, r3
 8003404:	4b90      	ldr	r3, [pc, #576]	; (8003648 <HAL_RCC_ClockConfig+0x270>)
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800340c:	f7fd faf4 	bl	80009f8 <HAL_GetTick>
 8003410:	0003      	movs	r3, r0
 8003412:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003414:	e009      	b.n	800342a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003416:	f7fd faef 	bl	80009f8 <HAL_GetTick>
 800341a:	0002      	movs	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	4a8a      	ldr	r2, [pc, #552]	; (800364c <HAL_RCC_ClockConfig+0x274>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e10a      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b87      	ldr	r3, [pc, #540]	; (8003648 <HAL_RCC_ClockConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2201      	movs	r2, #1
 8003430:	4013      	ands	r3, r2
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d1ee      	bne.n	8003416 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2202      	movs	r2, #2
 800343e:	4013      	ands	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003442:	4b83      	ldr	r3, [pc, #524]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	22f0      	movs	r2, #240	; 0xf0
 8003448:	4393      	bics	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 8003452:	430a      	orrs	r2, r1
 8003454:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2201      	movs	r2, #1
 800345c:	4013      	ands	r3, r2
 800345e:	d100      	bne.n	8003462 <HAL_RCC_ClockConfig+0x8a>
 8003460:	e089      	b.n	8003576 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800346a:	4b79      	ldr	r3, [pc, #484]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	029b      	lsls	r3, r3, #10
 8003472:	4013      	ands	r3, r2
 8003474:	d120      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0e2      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003482:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	049b      	lsls	r3, r3, #18
 800348a:	4013      	ands	r3, r2
 800348c:	d114      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0d6      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800349a:	4b6d      	ldr	r3, [pc, #436]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2204      	movs	r2, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	d109      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0cb      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034a8:	4b69      	ldr	r3, [pc, #420]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4013      	ands	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0c3      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b8:	4b65      	ldr	r3, [pc, #404]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2203      	movs	r2, #3
 80034be:	4393      	bics	r3, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	4b62      	ldr	r3, [pc, #392]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 80034c8:	430a      	orrs	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034cc:	f7fd fa94 	bl	80009f8 <HAL_GetTick>
 80034d0:	0003      	movs	r3, r0
 80034d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d111      	bne.n	8003500 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034dc:	e009      	b.n	80034f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034de:	f7fd fa8b 	bl	80009f8 <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	4a58      	ldr	r2, [pc, #352]	; (800364c <HAL_RCC_ClockConfig+0x274>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0a6      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f2:	4b57      	ldr	r3, [pc, #348]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	220c      	movs	r2, #12
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d1ef      	bne.n	80034de <HAL_RCC_ClockConfig+0x106>
 80034fe:	e03a      	b.n	8003576 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d111      	bne.n	800352c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003508:	e009      	b.n	800351e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350a:	f7fd fa75 	bl	80009f8 <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	4a4d      	ldr	r2, [pc, #308]	; (800364c <HAL_RCC_ClockConfig+0x274>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e090      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351e:	4b4c      	ldr	r3, [pc, #304]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	220c      	movs	r2, #12
 8003524:	4013      	ands	r3, r2
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d1ef      	bne.n	800350a <HAL_RCC_ClockConfig+0x132>
 800352a:	e024      	b.n	8003576 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d11b      	bne.n	800356c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003534:	e009      	b.n	800354a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003536:	f7fd fa5f 	bl	80009f8 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	4a42      	ldr	r2, [pc, #264]	; (800364c <HAL_RCC_ClockConfig+0x274>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e07a      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	220c      	movs	r2, #12
 8003550:	4013      	ands	r3, r2
 8003552:	2b04      	cmp	r3, #4
 8003554:	d1ef      	bne.n	8003536 <HAL_RCC_ClockConfig+0x15e>
 8003556:	e00e      	b.n	8003576 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003558:	f7fd fa4e 	bl	80009f8 <HAL_GetTick>
 800355c:	0002      	movs	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	4a3a      	ldr	r2, [pc, #232]	; (800364c <HAL_RCC_ClockConfig+0x274>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e069      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800356c:	4b38      	ldr	r3, [pc, #224]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	220c      	movs	r2, #12
 8003572:	4013      	ands	r3, r2
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003576:	4b34      	ldr	r3, [pc, #208]	; (8003648 <HAL_RCC_ClockConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2201      	movs	r2, #1
 800357c:	4013      	ands	r3, r2
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d21e      	bcs.n	80035c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003584:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_ClockConfig+0x270>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2201      	movs	r2, #1
 800358a:	4393      	bics	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <HAL_RCC_ClockConfig+0x270>)
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003596:	f7fd fa2f 	bl	80009f8 <HAL_GetTick>
 800359a:	0003      	movs	r3, r0
 800359c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	e009      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7fd fa2a 	bl	80009f8 <HAL_GetTick>
 80035a4:	0002      	movs	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	4a28      	ldr	r2, [pc, #160]	; (800364c <HAL_RCC_ClockConfig+0x274>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e045      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_ClockConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2201      	movs	r2, #1
 80035ba:	4013      	ands	r3, r2
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d1ee      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2204      	movs	r2, #4
 80035c8:	4013      	ands	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a20      	ldr	r2, [pc, #128]	; (8003654 <HAL_RCC_ClockConfig+0x27c>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 80035dc:	430a      	orrs	r2, r1
 80035de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2208      	movs	r2, #8
 80035e6:	4013      	ands	r3, r2
 80035e8:	d00a      	beq.n	8003600 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ea:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <HAL_RCC_ClockConfig+0x280>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	00da      	lsls	r2, r3, #3
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 80035fc:	430a      	orrs	r2, r1
 80035fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003600:	f000 f832 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003604:	0001      	movs	r1, r0
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_RCC_ClockConfig+0x278>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	220f      	movs	r2, #15
 800360e:	4013      	ands	r3, r2
 8003610:	4a12      	ldr	r2, [pc, #72]	; (800365c <HAL_RCC_ClockConfig+0x284>)
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	000a      	movs	r2, r1
 8003616:	40da      	lsrs	r2, r3
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_RCC_ClockConfig+0x288>)
 800361a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_RCC_ClockConfig+0x28c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	250b      	movs	r5, #11
 8003622:	197c      	adds	r4, r7, r5
 8003624:	0018      	movs	r0, r3
 8003626:	f7fd f9a1 	bl	800096c <HAL_InitTick>
 800362a:	0003      	movs	r3, r0
 800362c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800362e:	197b      	adds	r3, r7, r5
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8003636:	230b      	movs	r3, #11
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	e000      	b.n	8003640 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b004      	add	sp, #16
 8003646:	bdb0      	pop	{r4, r5, r7, pc}
 8003648:	40022000 	.word	0x40022000
 800364c:	00001388 	.word	0x00001388
 8003650:	40021000 	.word	0x40021000
 8003654:	fffff8ff 	.word	0xfffff8ff
 8003658:	ffffc7ff 	.word	0xffffc7ff
 800365c:	0800bc44 	.word	0x0800bc44
 8003660:	2000004c 	.word	0x2000004c
 8003664:	20000050 	.word	0x20000050

08003668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366a:	b08f      	sub	sp, #60	; 0x3c
 800366c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <HAL_RCC_GetSysClockFreq+0x130>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003676:	230c      	movs	r3, #12
 8003678:	4013      	ands	r3, r2
 800367a:	2b08      	cmp	r3, #8
 800367c:	d00f      	beq.n	800369e <HAL_RCC_GetSysClockFreq+0x36>
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d010      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x3c>
 8003682:	2b04      	cmp	r3, #4
 8003684:	d000      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x20>
 8003686:	e073      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003688:	4b43      	ldr	r3, [pc, #268]	; (8003798 <HAL_RCC_GetSysClockFreq+0x130>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2210      	movs	r2, #16
 800368e:	4013      	ands	r3, r2
 8003690:	d002      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003692:	4b42      	ldr	r3, [pc, #264]	; (800379c <HAL_RCC_GetSysClockFreq+0x134>)
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003696:	e079      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800369a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800369c:	e076      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036a2:	e073      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	0c9a      	lsrs	r2, r3, #18
 80036a8:	230f      	movs	r3, #15
 80036aa:	401a      	ands	r2, r3
 80036ac:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x140>)
 80036ae:	5c9b      	ldrb	r3, [r3, r2]
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	0d9a      	lsrs	r2, r3, #22
 80036b6:	2303      	movs	r3, #3
 80036b8:	4013      	ands	r3, r2
 80036ba:	3301      	adds	r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCC_GetSysClockFreq+0x130>)
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	025b      	lsls	r3, r3, #9
 80036c6:	4013      	ands	r3, r2
 80036c8:	d019      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	4a34      	ldr	r2, [pc, #208]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036d4:	2300      	movs	r3, #0
 80036d6:	69b8      	ldr	r0, [r7, #24]
 80036d8:	69f9      	ldr	r1, [r7, #28]
 80036da:	f7fc fdc1 	bl	8000260 <__aeabi_lmul>
 80036de:	0003      	movs	r3, r0
 80036e0:	000c      	movs	r4, r1
 80036e2:	0018      	movs	r0, r3
 80036e4:	0021      	movs	r1, r4
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f7fc fd95 	bl	8000220 <__aeabi_uldivmod>
 80036f6:	0003      	movs	r3, r0
 80036f8:	000c      	movs	r4, r1
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
 80036fc:	e035      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <HAL_RCC_GetSysClockFreq+0x130>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2210      	movs	r2, #16
 8003704:	4013      	ands	r3, r2
 8003706:	d019      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	4a22      	ldr	r2, [pc, #136]	; (800379c <HAL_RCC_GetSysClockFreq+0x134>)
 8003712:	2300      	movs	r3, #0
 8003714:	68b8      	ldr	r0, [r7, #8]
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	f7fc fda2 	bl	8000260 <__aeabi_lmul>
 800371c:	0003      	movs	r3, r0
 800371e:	000c      	movs	r4, r1
 8003720:	0018      	movs	r0, r3
 8003722:	0021      	movs	r1, r4
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f7fc fd76 	bl	8000220 <__aeabi_uldivmod>
 8003734:	0003      	movs	r3, r0
 8003736:	000c      	movs	r4, r1
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
 800373a:	e016      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	0018      	movs	r0, r3
 8003740:	2300      	movs	r3, #0
 8003742:	0019      	movs	r1, r3
 8003744:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003746:	2300      	movs	r3, #0
 8003748:	f7fc fd8a 	bl	8000260 <__aeabi_lmul>
 800374c:	0003      	movs	r3, r0
 800374e:	000c      	movs	r4, r1
 8003750:	0018      	movs	r0, r3
 8003752:	0021      	movs	r1, r4
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	001d      	movs	r5, r3
 8003758:	2300      	movs	r3, #0
 800375a:	001e      	movs	r6, r3
 800375c:	002a      	movs	r2, r5
 800375e:	0033      	movs	r3, r6
 8003760:	f7fc fd5e 	bl	8000220 <__aeabi_uldivmod>
 8003764:	0003      	movs	r3, r0
 8003766:	000c      	movs	r4, r1
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800376a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800376e:	e00d      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_GetSysClockFreq+0x130>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0b5b      	lsrs	r3, r3, #13
 8003776:	2207      	movs	r2, #7
 8003778:	4013      	ands	r3, r2
 800377a:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	3301      	adds	r3, #1
 8003780:	2280      	movs	r2, #128	; 0x80
 8003782:	0212      	lsls	r2, r2, #8
 8003784:	409a      	lsls	r2, r3
 8003786:	0013      	movs	r3, r2
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800378a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b00f      	add	sp, #60	; 0x3c
 8003794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	40021000 	.word	0x40021000
 800379c:	003d0900 	.word	0x003d0900
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	0800bc54 	.word	0x0800bc54

080037ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80037b4:	2317      	movs	r3, #23
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2220      	movs	r2, #32
 80037c2:	4013      	ands	r3, r2
 80037c4:	d106      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4013      	ands	r3, r2
 80037d0:	d100      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80037d2:	e0d9      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d4:	4b9c      	ldr	r3, [pc, #624]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80037d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	055b      	lsls	r3, r3, #21
 80037dc:	4013      	ands	r3, r2
 80037de:	d10a      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e0:	4b99      	ldr	r3, [pc, #612]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80037e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e4:	4b98      	ldr	r3, [pc, #608]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	0549      	lsls	r1, r1, #21
 80037ea:	430a      	orrs	r2, r1
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80037ee:	2317      	movs	r3, #23
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b95      	ldr	r3, [pc, #596]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	d11a      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003802:	4b92      	ldr	r3, [pc, #584]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b91      	ldr	r3, [pc, #580]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	0049      	lsls	r1, r1, #1
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003810:	f7fd f8f2 	bl	80009f8 <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	e008      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381a:	f7fd f8ed 	bl	80009f8 <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b64      	cmp	r3, #100	; 0x64
 8003826:	d901      	bls.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e108      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	4b87      	ldr	r3, [pc, #540]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4013      	ands	r3, r2
 8003836:	d0f0      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003838:	4b83      	ldr	r3, [pc, #524]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	23c0      	movs	r3, #192	; 0xc0
 800383e:	039b      	lsls	r3, r3, #14
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	23c0      	movs	r3, #192	; 0xc0
 800384a:	039b      	lsls	r3, r3, #14
 800384c:	4013      	ands	r3, r2
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d107      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	23c0      	movs	r3, #192	; 0xc0
 800385a:	039b      	lsls	r3, r3, #14
 800385c:	4013      	ands	r3, r2
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	429a      	cmp	r2, r3
 8003862:	d013      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	23c0      	movs	r3, #192	; 0xc0
 800386a:	029b      	lsls	r3, r3, #10
 800386c:	401a      	ands	r2, r3
 800386e:	23c0      	movs	r3, #192	; 0xc0
 8003870:	029b      	lsls	r3, r3, #10
 8003872:	429a      	cmp	r2, r3
 8003874:	d10a      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003876:	4b74      	ldr	r3, [pc, #464]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	029b      	lsls	r3, r3, #10
 800387e:	401a      	ands	r2, r3
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	429a      	cmp	r2, r3
 8003886:	d101      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0d8      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800388c:	4b6e      	ldr	r3, [pc, #440]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800388e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003890:	23c0      	movs	r3, #192	; 0xc0
 8003892:	029b      	lsls	r3, r3, #10
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d049      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	23c0      	movs	r3, #192	; 0xc0
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	4013      	ands	r3, r2
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d004      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2220      	movs	r2, #32
 80038b4:	4013      	ands	r3, r2
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	23c0      	movs	r3, #192	; 0xc0
 80038be:	029b      	lsls	r3, r3, #10
 80038c0:	4013      	ands	r3, r2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d034      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	4013      	ands	r3, r2
 80038d2:	d02e      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80038d4:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	4a5d      	ldr	r2, [pc, #372]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80038da:	4013      	ands	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038de:	4b5a      	ldr	r3, [pc, #360]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80038e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038e2:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	0309      	lsls	r1, r1, #12
 80038e8:	430a      	orrs	r2, r1
 80038ea:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ec:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80038ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038f0:	4b55      	ldr	r3, [pc, #340]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80038f2:	4958      	ldr	r1, [pc, #352]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80038f8:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4013      	ands	r3, r2
 8003906:	d014      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd f876 	bl	80009f8 <HAL_GetTick>
 800390c:	0003      	movs	r3, r0
 800390e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003910:	e009      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fd f871 	bl	80009f8 <HAL_GetTick>
 8003916:	0002      	movs	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	4a4e      	ldr	r2, [pc, #312]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e08b      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003926:	4b48      	ldr	r3, [pc, #288]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4013      	ands	r3, r2
 8003930:	d0ef      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	23c0      	movs	r3, #192	; 0xc0
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	401a      	ands	r2, r3
 800393c:	23c0      	movs	r3, #192	; 0xc0
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	429a      	cmp	r2, r3
 8003942:	d10c      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a44      	ldr	r2, [pc, #272]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	23c0      	movs	r3, #192	; 0xc0
 8003954:	039b      	lsls	r3, r3, #14
 8003956:	401a      	ands	r2, r3
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800395a:	430a      	orrs	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003960:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	23c0      	movs	r3, #192	; 0xc0
 8003968:	029b      	lsls	r3, r3, #10
 800396a:	401a      	ands	r2, r3
 800396c:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800396e:	430a      	orrs	r2, r1
 8003970:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003972:	2317      	movs	r3, #23
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d105      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397c:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800397e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003980:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003982:	4937      	ldr	r1, [pc, #220]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003984:	400a      	ands	r2, r1
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	4013      	ands	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003992:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	2203      	movs	r2, #3
 8003998:	4393      	bics	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2202      	movs	r2, #2
 80039ac:	4013      	ands	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	220c      	movs	r2, #12
 80039b6:	4393      	bics	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2204      	movs	r2, #4
 80039ca:	4013      	ands	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80039de:	430a      	orrs	r2, r1
 80039e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2208      	movs	r2, #8
 80039e8:	4013      	ands	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80039ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f0:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	4013      	ands	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	0019      	movs	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	4013      	ands	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	4a10      	ldr	r2, [pc, #64]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b006      	add	sp, #24
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	fffcffff 	.word	0xfffcffff
 8003a54:	fff7ffff 	.word	0xfff7ffff
 8003a58:	00001388 	.word	0x00001388
 8003a5c:	ffcfffff 	.word	0xffcfffff
 8003a60:	efffffff 	.word	0xefffffff
 8003a64:	fffff3ff 	.word	0xfffff3ff
 8003a68:	ffffcfff 	.word	0xffffcfff
 8003a6c:	fbffffff 	.word	0xfbffffff
 8003a70:	fff3ffff 	.word	0xfff3ffff

08003a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e083      	b.n	8003b8e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	2382      	movs	r3, #130	; 0x82
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d009      	beq.n	8003aae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61da      	str	r2, [r3, #28]
 8003aa0:	e005      	b.n	8003aae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2251      	movs	r2, #81	; 0x51
 8003ab8:	5c9b      	ldrb	r3, [r3, r2]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2250      	movs	r2, #80	; 0x50
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7fc fdfa 	bl	80006c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2251      	movs	r2, #81	; 0x51
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2140      	movs	r1, #64	; 0x40
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	2382      	movs	r3, #130	; 0x82
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	401a      	ands	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6899      	ldr	r1, [r3, #8]
 8003af6:	2384      	movs	r3, #132	; 0x84
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	400b      	ands	r3, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68d9      	ldr	r1, [r3, #12]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	400b      	ands	r3, r1
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2102      	movs	r1, #2
 8003b10:	400b      	ands	r3, r1
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	400b      	ands	r3, r1
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6999      	ldr	r1, [r3, #24]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	400b      	ands	r3, r1
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	2138      	movs	r1, #56	; 0x38
 8003b30:	400b      	ands	r3, r1
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	400b      	ands	r3, r1
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	0011      	movs	r1, r2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	019b      	lsls	r3, r3, #6
 8003b48:	401a      	ands	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2210      	movs	r2, #16
 8003b64:	401a      	ands	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4907      	ldr	r1, [pc, #28]	; (8003b98 <HAL_SPI_Init+0x124>)
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2251      	movs	r2, #81	; 0x51
 8003b88:	2101      	movs	r1, #1
 8003b8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b002      	add	sp, #8
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	fffff7ff 	.word	0xfffff7ff

08003b9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	1dbb      	adds	r3, r7, #6
 8003baa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bac:	231f      	movs	r3, #31
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2250      	movs	r2, #80	; 0x50
 8003bb8:	5c9b      	ldrb	r3, [r3, r2]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_SPI_Transmit+0x26>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e13e      	b.n	8003e40 <HAL_SPI_Transmit+0x2a4>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2250      	movs	r2, #80	; 0x50
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bca:	f7fc ff15 	bl	80009f8 <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003bd2:	2316      	movs	r3, #22
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	1dba      	adds	r2, r7, #6
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2251      	movs	r2, #81	; 0x51
 8003be0:	5c9b      	ldrb	r3, [r3, r2]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d004      	beq.n	8003bf2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003be8:	231f      	movs	r3, #31
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	2202      	movs	r2, #2
 8003bee:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bf0:	e11b      	b.n	8003e2a <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_SPI_Transmit+0x64>
 8003bf8:	1dbb      	adds	r3, r7, #6
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003c00:	231f      	movs	r3, #31
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c08:	e10f      	b.n	8003e2a <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2251      	movs	r2, #81	; 0x51
 8003c0e:	2103      	movs	r1, #3
 8003c10:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1dba      	adds	r2, r7, #6
 8003c22:	8812      	ldrh	r2, [r2, #0]
 8003c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1dba      	adds	r2, r7, #6
 8003c2a:	8812      	ldrh	r2, [r2, #0]
 8003c2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d110      	bne.n	8003c7a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2140      	movs	r1, #64	; 0x40
 8003c64:	438a      	bics	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2180      	movs	r1, #128	; 0x80
 8003c74:	01c9      	lsls	r1, r1, #7
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2240      	movs	r2, #64	; 0x40
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d007      	beq.n	8003c98 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2140      	movs	r1, #64	; 0x40
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d14e      	bne.n	8003d42 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d004      	beq.n	8003cb6 <HAL_SPI_Transmit+0x11a>
 8003cac:	2316      	movs	r3, #22
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d13f      	bne.n	8003d36 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cda:	e02c      	b.n	8003d36 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d112      	bne.n	8003d10 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d0e:	e012      	b.n	8003d36 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d10:	f7fc fe72 	bl	80009f8 <HAL_GetTick>
 8003d14:	0002      	movs	r2, r0
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d802      	bhi.n	8003d26 <HAL_SPI_Transmit+0x18a>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	3301      	adds	r3, #1
 8003d24:	d102      	bne.n	8003d2c <HAL_SPI_Transmit+0x190>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8003d2c:	231f      	movs	r3, #31
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2203      	movs	r2, #3
 8003d32:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d34:	e079      	b.n	8003e2a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1cd      	bne.n	8003cdc <HAL_SPI_Transmit+0x140>
 8003d40:	e04f      	b.n	8003de2 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <HAL_SPI_Transmit+0x1b8>
 8003d4a:	2316      	movs	r3, #22
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d141      	bne.n	8003dd8 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d7a:	e02d      	b.n	8003dd8 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2202      	movs	r2, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d113      	bne.n	8003db2 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8003db0:	e012      	b.n	8003dd8 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db2:	f7fc fe21 	bl	80009f8 <HAL_GetTick>
 8003db6:	0002      	movs	r2, r0
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d802      	bhi.n	8003dc8 <HAL_SPI_Transmit+0x22c>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	d102      	bne.n	8003dce <HAL_SPI_Transmit+0x232>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003dce:	231f      	movs	r3, #31
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	701a      	strb	r2, [r3, #0]
          goto error;
 8003dd6:	e028      	b.n	8003e2a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1cc      	bne.n	8003d7c <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f000 fc07 	bl	80045fc <SPI_EndRxTxTransaction>
 8003dee:	1e03      	subs	r3, r0, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003e1e:	231f      	movs	r3, #31
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e000      	b.n	8003e2a <HAL_SPI_Transmit+0x28e>
  }

error:
 8003e28:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2251      	movs	r2, #81	; 0x51
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2250      	movs	r2, #80	; 0x50
 8003e36:	2100      	movs	r1, #0
 8003e38:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e3a:	231f      	movs	r3, #31
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	781b      	ldrb	r3, [r3, #0]
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b008      	add	sp, #32
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	1dbb      	adds	r3, r7, #6
 8003e56:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e58:	2317      	movs	r3, #23
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	2382      	movs	r3, #130	; 0x82
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d113      	bne.n	8003e94 <HAL_SPI_Receive+0x4c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2251      	movs	r2, #81	; 0x51
 8003e78:	2104      	movs	r1, #4
 8003e7a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e7c:	1dbb      	adds	r3, r7, #6
 8003e7e:	881c      	ldrh	r4, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	0023      	movs	r3, r4
 8003e8c:	f000 f902 	bl	8004094 <HAL_SPI_TransmitReceive>
 8003e90:	0003      	movs	r3, r0
 8003e92:	e0f9      	b.n	8004088 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2250      	movs	r2, #80	; 0x50
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_SPI_Receive+0x5a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0f2      	b.n	8004088 <HAL_SPI_Receive+0x240>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2250      	movs	r2, #80	; 0x50
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eaa:	f7fc fda5 	bl	80009f8 <HAL_GetTick>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2251      	movs	r2, #81	; 0x51
 8003eb6:	5c9b      	ldrb	r3, [r3, r2]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d004      	beq.n	8003ec8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003ebe:	2317      	movs	r3, #23
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ec6:	e0d4      	b.n	8004072 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_SPI_Receive+0x8e>
 8003ece:	1dbb      	adds	r3, r7, #6
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003ed6:	2317      	movs	r3, #23
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ede:	e0c8      	b.n	8004072 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2251      	movs	r2, #81	; 0x51
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1dba      	adds	r2, r7, #6
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1dba      	adds	r2, r7, #6
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d10f      	bne.n	8003f4e <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2140      	movs	r1, #64	; 0x40
 8003f3a:	438a      	bics	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4951      	ldr	r1, [pc, #324]	; (8004090 <HAL_SPI_Receive+0x248>)
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2240      	movs	r2, #64	; 0x40
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d007      	beq.n	8003f6c <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2140      	movs	r1, #64	; 0x40
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d164      	bne.n	800403e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f74:	e02f      	b.n	8003fd6 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d115      	bne.n	8003fb0 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fae:	e012      	b.n	8003fd6 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fb0:	f7fc fd22 	bl	80009f8 <HAL_GetTick>
 8003fb4:	0002      	movs	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d802      	bhi.n	8003fc6 <HAL_SPI_Receive+0x17e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	d102      	bne.n	8003fcc <HAL_SPI_Receive+0x184>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8003fcc:	2317      	movs	r3, #23
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	701a      	strb	r2, [r3, #0]
          goto error;
 8003fd4:	e04d      	b.n	8004072 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1ca      	bne.n	8003f76 <HAL_SPI_Receive+0x12e>
 8003fe0:	e032      	b.n	8004048 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d113      	bne.n	8004018 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	1c9a      	adds	r2, r3, #2
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004016:	e012      	b.n	800403e <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004018:	f7fc fcee 	bl	80009f8 <HAL_GetTick>
 800401c:	0002      	movs	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d802      	bhi.n	800402e <HAL_SPI_Receive+0x1e6>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	3301      	adds	r3, #1
 800402c:	d102      	bne.n	8004034 <HAL_SPI_Receive+0x1ec>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8004034:	2317      	movs	r3, #23
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2203      	movs	r2, #3
 800403a:	701a      	strb	r2, [r3, #0]
          goto error;
 800403c:	e019      	b.n	8004072 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1cc      	bne.n	8003fe2 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	0018      	movs	r0, r3
 8004050:	f000 fa6a 	bl	8004528 <SPI_EndRxTransaction>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d002      	beq.n	800405e <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8004066:	2317      	movs	r3, #23
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e000      	b.n	8004072 <HAL_SPI_Receive+0x22a>
  }

error :
 8004070:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2251      	movs	r2, #81	; 0x51
 8004076:	2101      	movs	r1, #1
 8004078:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2250      	movs	r2, #80	; 0x50
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b007      	add	sp, #28
 800408e:	bd90      	pop	{r4, r7, pc}
 8004090:	ffffbfff 	.word	0xffffbfff

08004094 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	001a      	movs	r2, r3
 80040a2:	1cbb      	adds	r3, r7, #2
 80040a4:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040a6:	2301      	movs	r3, #1
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040aa:	232b      	movs	r3, #43	; 0x2b
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2250      	movs	r2, #80	; 0x50
 80040b6:	5c9b      	ldrb	r3, [r3, r2]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x2c>
 80040bc:	2302      	movs	r3, #2
 80040be:	e1a1      	b.n	8004404 <HAL_SPI_TransmitReceive+0x370>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2250      	movs	r2, #80	; 0x50
 80040c4:	2101      	movs	r1, #1
 80040c6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c8:	f7fc fc96 	bl	80009f8 <HAL_GetTick>
 80040cc:	0003      	movs	r3, r0
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040d0:	2023      	movs	r0, #35	; 0x23
 80040d2:	183b      	adds	r3, r7, r0
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	2151      	movs	r1, #81	; 0x51
 80040d8:	5c52      	ldrb	r2, [r2, r1]
 80040da:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040e2:	231a      	movs	r3, #26
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	1cba      	adds	r2, r7, #2
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040ec:	183b      	adds	r3, r7, r0
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d012      	beq.n	800411a <HAL_SPI_TransmitReceive+0x86>
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	2382      	movs	r3, #130	; 0x82
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d108      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d104      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x7c>
 8004106:	2323      	movs	r3, #35	; 0x23
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d004      	beq.n	800411a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004110:	232b      	movs	r3, #43	; 0x2b
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	2202      	movs	r2, #2
 8004116:	701a      	strb	r2, [r3, #0]
    goto error;
 8004118:	e169      	b.n	80043ee <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <HAL_SPI_TransmitReceive+0x9a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_SPI_TransmitReceive+0x9a>
 8004126:	1cbb      	adds	r3, r7, #2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d104      	bne.n	8004138 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800412e:	232b      	movs	r3, #43	; 0x2b
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
    goto error;
 8004136:	e15a      	b.n	80043ee <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2251      	movs	r2, #81	; 0x51
 800413c:	5c9b      	ldrb	r3, [r3, r2]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b04      	cmp	r3, #4
 8004142:	d003      	beq.n	800414c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2251      	movs	r2, #81	; 0x51
 8004148:	2105      	movs	r1, #5
 800414a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1cba      	adds	r2, r7, #2
 800415c:	8812      	ldrh	r2, [r2, #0]
 800415e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1cba      	adds	r2, r7, #2
 8004164:	8812      	ldrh	r2, [r2, #0]
 8004166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1cba      	adds	r2, r7, #2
 8004172:	8812      	ldrh	r2, [r2, #0]
 8004174:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1cba      	adds	r2, r7, #2
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2240      	movs	r2, #64	; 0x40
 8004192:	4013      	ands	r3, r2
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d007      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2140      	movs	r1, #64	; 0x40
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d000      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x122>
 80041b4:	e07a      	b.n	80042ac <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d004      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x134>
 80041be:	231a      	movs	r3, #26
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d166      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ec:	e053      	b.n	8004296 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2202      	movs	r2, #2
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x1a0>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_SPI_TransmitReceive+0x1a0>
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d113      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2201      	movs	r2, #1
 800423c:	4013      	ands	r3, r2
 800423e:	2b01      	cmp	r3, #1
 8004240:	d119      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x1e2>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d014      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	b292      	uxth	r2, r2
 8004258:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004272:	2301      	movs	r3, #1
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004276:	f7fc fbbf 	bl	80009f8 <HAL_GetTick>
 800427a:	0002      	movs	r2, r0
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004282:	429a      	cmp	r2, r3
 8004284:	d807      	bhi.n	8004296 <HAL_SPI_TransmitReceive+0x202>
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	3301      	adds	r3, #1
 800428a:	d004      	beq.n	8004296 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800428c:	232b      	movs	r3, #43	; 0x2b
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	2203      	movs	r2, #3
 8004292:	701a      	strb	r2, [r3, #0]
        goto error;
 8004294:	e0ab      	b.n	80043ee <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1a6      	bne.n	80041ee <HAL_SPI_TransmitReceive+0x15a>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1a1      	bne.n	80041ee <HAL_SPI_TransmitReceive+0x15a>
 80042aa:	e07f      	b.n	80043ac <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x22c>
 80042b4:	231a      	movs	r3, #26
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d000      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x22c>
 80042be:	e06b      	b.n	8004398 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	7812      	ldrb	r2, [r2, #0]
 80042cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e6:	e057      	b.n	8004398 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2202      	movs	r2, #2
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d11c      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x29c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d017      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x29c>
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	2b01      	cmp	r3, #1
 8004304:	d114      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	7812      	ldrb	r2, [r2, #0]
 8004312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2201      	movs	r2, #1
 8004338:	4013      	ands	r3, r2
 800433a:	2b01      	cmp	r3, #1
 800433c:	d119      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x2de>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d014      	beq.n	8004372 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800436e:	2301      	movs	r3, #1
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004372:	f7fc fb41 	bl	80009f8 <HAL_GetTick>
 8004376:	0002      	movs	r2, r0
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800437e:	429a      	cmp	r2, r3
 8004380:	d802      	bhi.n	8004388 <HAL_SPI_TransmitReceive+0x2f4>
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	3301      	adds	r3, #1
 8004386:	d102      	bne.n	800438e <HAL_SPI_TransmitReceive+0x2fa>
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800438e:	232b      	movs	r3, #43	; 0x2b
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	2203      	movs	r2, #3
 8004394:	701a      	strb	r2, [r3, #0]
        goto error;
 8004396:	e02a      	b.n	80043ee <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1a2      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x254>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d19d      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 f922 	bl	80045fc <SPI_EndRxTxTransaction>
 80043b8:	1e03      	subs	r3, r0, #0
 80043ba:	d007      	beq.n	80043cc <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80043bc:	232b      	movs	r3, #43	; 0x2b
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043ca:	e010      	b.n	80043ee <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	e000      	b.n	80043ee <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80043ec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2251      	movs	r2, #81	; 0x51
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2250      	movs	r2, #80	; 0x50
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80043fe:	232b      	movs	r3, #43	; 0x2b
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	781b      	ldrb	r3, [r3, #0]
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b00c      	add	sp, #48	; 0x30
 800440a:	bd80      	pop	{r7, pc}

0800440c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	1dfb      	adds	r3, r7, #7
 800441a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800441c:	f7fc faec 	bl	80009f8 <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	18d3      	adds	r3, r2, r3
 800442a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800442c:	f7fc fae4 	bl	80009f8 <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004434:	4b3a      	ldr	r3, [pc, #232]	; (8004520 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	015b      	lsls	r3, r3, #5
 800443a:	0d1b      	lsrs	r3, r3, #20
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	4353      	muls	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004442:	e058      	b.n	80044f6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	d055      	beq.n	80044f6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800444a:	f7fc fad5 	bl	80009f8 <HAL_GetTick>
 800444e:	0002      	movs	r2, r0
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	429a      	cmp	r2, r3
 8004458:	d902      	bls.n	8004460 <SPI_WaitFlagStateUntilTimeout+0x54>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d142      	bne.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	21e0      	movs	r1, #224	; 0xe0
 800446c:	438a      	bics	r2, r1
 800446e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	2382      	movs	r3, #130	; 0x82
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	429a      	cmp	r2, r3
 800447a:	d113      	bne.n	80044a4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	429a      	cmp	r2, r3
 8004486:	d005      	beq.n	8004494 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	429a      	cmp	r2, r3
 8004492:	d107      	bne.n	80044a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2140      	movs	r1, #64	; 0x40
 80044a0:	438a      	bics	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	019b      	lsls	r3, r3, #6
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d110      	bne.n	80044d2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	491a      	ldr	r1, [pc, #104]	; (8004524 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80044bc:	400a      	ands	r2, r1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2180      	movs	r1, #128	; 0x80
 80044cc:	0189      	lsls	r1, r1, #6
 80044ce:	430a      	orrs	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2251      	movs	r2, #81	; 0x51
 80044d6:	2101      	movs	r1, #1
 80044d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2250      	movs	r2, #80	; 0x50
 80044de:	2100      	movs	r1, #0
 80044e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e017      	b.n	8004516 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	425a      	negs	r2, r3
 8004506:	4153      	adcs	r3, r2
 8004508:	b2db      	uxtb	r3, r3
 800450a:	001a      	movs	r2, r3
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d197      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b008      	add	sp, #32
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	2000004c 	.word	0x2000004c
 8004524:	ffffdfff 	.word	0xffffdfff

08004528 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	2382      	movs	r3, #130	; 0x82
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	429a      	cmp	r2, r3
 800453e:	d113      	bne.n	8004568 <SPI_EndRxTransaction+0x40>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	429a      	cmp	r2, r3
 800454a:	d005      	beq.n	8004558 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	429a      	cmp	r2, r3
 8004556:	d107      	bne.n	8004568 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2140      	movs	r1, #64	; 0x40
 8004564:	438a      	bics	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	2382      	movs	r3, #130	; 0x82
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	429a      	cmp	r2, r3
 8004572:	d12b      	bne.n	80045cc <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	429a      	cmp	r2, r3
 800457e:	d012      	beq.n	80045a6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	0013      	movs	r3, r2
 800458a:	2200      	movs	r2, #0
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	f7ff ff3d 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 8004592:	1e03      	subs	r3, r0, #0
 8004594:	d02d      	beq.n	80045f2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	2220      	movs	r2, #32
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e026      	b.n	80045f4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	0013      	movs	r3, r2
 80045b0:	2200      	movs	r2, #0
 80045b2:	2101      	movs	r1, #1
 80045b4:	f7ff ff2a 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 80045b8:	1e03      	subs	r3, r0, #0
 80045ba:	d01a      	beq.n	80045f2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	2220      	movs	r2, #32
 80045c2:	431a      	orrs	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e013      	b.n	80045f4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	0013      	movs	r3, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	2101      	movs	r1, #1
 80045da:	f7ff ff17 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d007      	beq.n	80045f2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	2220      	movs	r2, #32
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e000      	b.n	80045f4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b004      	add	sp, #16
 80045fa:	bd80      	pop	{r7, pc}

080045fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <SPI_EndRxTxTransaction+0x84>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	491d      	ldr	r1, [pc, #116]	; (8004684 <SPI_EndRxTxTransaction+0x88>)
 800460e:	0018      	movs	r0, r3
 8004610:	f7fb fd7a 	bl	8000108 <__udivsi3>
 8004614:	0003      	movs	r3, r0
 8004616:	001a      	movs	r2, r3
 8004618:	0013      	movs	r3, r2
 800461a:	015b      	lsls	r3, r3, #5
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	189b      	adds	r3, r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	2382      	movs	r3, #130	; 0x82
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	429a      	cmp	r2, r3
 8004630:	d112      	bne.n	8004658 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	0013      	movs	r3, r2
 800463c:	2200      	movs	r2, #0
 800463e:	2180      	movs	r1, #128	; 0x80
 8004640:	f7ff fee4 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 8004644:	1e03      	subs	r3, r0, #0
 8004646:	d016      	beq.n	8004676 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	2220      	movs	r2, #32
 800464e:	431a      	orrs	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e00f      	b.n	8004678 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	3b01      	subs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2280      	movs	r2, #128	; 0x80
 800466c:	4013      	ands	r3, r2
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d0f2      	beq.n	8004658 <SPI_EndRxTxTransaction+0x5c>
 8004672:	e000      	b.n	8004676 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004674:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}
 8004680:	2000004c 	.word	0x2000004c
 8004684:	016e3600 	.word	0x016e3600

08004688 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2244      	movs	r2, #68	; 0x44
 8004694:	2100      	movs	r1, #0
 8004696:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <USB_EnableGlobalInt+0x28>)
 800469a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	b299      	uxth	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b004      	add	sp, #16
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	0000bf80 	.word	0x0000bf80

080046b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <USB_DisableGlobalInt+0x30>)
 80046be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	5a9b      	ldrh	r3, [r3, r2]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	b292      	uxth	r2, r2
 80046cc:	43d2      	mvns	r2, r2
 80046ce:	b292      	uxth	r2, r2
 80046d0:	4013      	ands	r3, r2
 80046d2:	b299      	uxth	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2240      	movs	r2, #64	; 0x40
 80046d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b004      	add	sp, #16
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	0000bf80 	.word	0x0000bf80

080046e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046e8:	b084      	sub	sp, #16
 80046ea:	b590      	push	{r4, r7, lr}
 80046ec:	46c6      	mov	lr, r8
 80046ee:	b500      	push	{lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	2004      	movs	r0, #4
 80046f8:	2410      	movs	r4, #16
 80046fa:	46a4      	mov	ip, r4
 80046fc:	2408      	movs	r4, #8
 80046fe:	46a0      	mov	r8, r4
 8004700:	44b8      	add	r8, r7
 8004702:	44c4      	add	ip, r8
 8004704:	4460      	add	r0, ip
 8004706:	6001      	str	r1, [r0, #0]
 8004708:	6042      	str	r2, [r0, #4]
 800470a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2240      	movs	r2, #64	; 0x40
 8004710:	2101      	movs	r1, #1
 8004712:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2240      	movs	r2, #64	; 0x40
 8004718:	2100      	movs	r1, #0
 800471a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2244      	movs	r2, #68	; 0x44
 8004720:	2100      	movs	r1, #0
 8004722:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2250      	movs	r2, #80	; 0x50
 8004728:	2100      	movs	r1, #0
 800472a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b002      	add	sp, #8
 8004734:	bc04      	pop	{r2}
 8004736:	4690      	mov	r8, r2
 8004738:	bc90      	pop	{r4, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	b004      	add	sp, #16
 800473e:	4718      	bx	r3

08004740 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b09c      	sub	sp, #112	; 0x70
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800474a:	236f      	movs	r3, #111	; 0x6f
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	18d3      	adds	r3, r2, r3
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29a      	uxth	r2, r3
 8004760:	236c      	movs	r3, #108	; 0x6c
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	49cf      	ldr	r1, [pc, #828]	; (8004aa4 <USB_ActivateEndpoint+0x364>)
 8004766:	400a      	ands	r2, r1
 8004768:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	78db      	ldrb	r3, [r3, #3]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d020      	beq.n	80047b4 <USB_ActivateEndpoint+0x74>
 8004772:	dc02      	bgt.n	800477a <USB_ActivateEndpoint+0x3a>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <USB_ActivateEndpoint+0x44>
 8004778:	e025      	b.n	80047c6 <USB_ActivateEndpoint+0x86>
 800477a:	2b02      	cmp	r3, #2
 800477c:	d00b      	beq.n	8004796 <USB_ActivateEndpoint+0x56>
 800477e:	2b03      	cmp	r3, #3
 8004780:	d00f      	beq.n	80047a2 <USB_ActivateEndpoint+0x62>
 8004782:	e020      	b.n	80047c6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004784:	226c      	movs	r2, #108	; 0x6c
 8004786:	18bb      	adds	r3, r7, r2
 8004788:	18ba      	adds	r2, r7, r2
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	0089      	lsls	r1, r1, #2
 8004790:	430a      	orrs	r2, r1
 8004792:	801a      	strh	r2, [r3, #0]
      break;
 8004794:	e01c      	b.n	80047d0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8004796:	226c      	movs	r2, #108	; 0x6c
 8004798:	18bb      	adds	r3, r7, r2
 800479a:	18ba      	adds	r2, r7, r2
 800479c:	8812      	ldrh	r2, [r2, #0]
 800479e:	801a      	strh	r2, [r3, #0]
      break;
 80047a0:	e016      	b.n	80047d0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047a2:	226c      	movs	r2, #108	; 0x6c
 80047a4:	18bb      	adds	r3, r7, r2
 80047a6:	18ba      	adds	r2, r7, r2
 80047a8:	8812      	ldrh	r2, [r2, #0]
 80047aa:	21c0      	movs	r1, #192	; 0xc0
 80047ac:	00c9      	lsls	r1, r1, #3
 80047ae:	430a      	orrs	r2, r1
 80047b0:	801a      	strh	r2, [r3, #0]
      break;
 80047b2:	e00d      	b.n	80047d0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047b4:	226c      	movs	r2, #108	; 0x6c
 80047b6:	18bb      	adds	r3, r7, r2
 80047b8:	18ba      	adds	r2, r7, r2
 80047ba:	8812      	ldrh	r2, [r2, #0]
 80047bc:	2180      	movs	r1, #128	; 0x80
 80047be:	00c9      	lsls	r1, r1, #3
 80047c0:	430a      	orrs	r2, r1
 80047c2:	801a      	strh	r2, [r3, #0]
      break;
 80047c4:	e004      	b.n	80047d0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80047c6:	236f      	movs	r3, #111	; 0x6f
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	2201      	movs	r2, #1
 80047cc:	701a      	strb	r2, [r3, #0]
      break;
 80047ce:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	18d3      	adds	r3, r2, r3
 80047da:	226c      	movs	r2, #108	; 0x6c
 80047dc:	18ba      	adds	r2, r7, r2
 80047de:	8812      	ldrh	r2, [r2, #0]
 80047e0:	49b1      	ldr	r1, [pc, #708]	; (8004aa8 <USB_ActivateEndpoint+0x368>)
 80047e2:	430a      	orrs	r2, r1
 80047e4:	b292      	uxth	r2, r2
 80047e6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	18d3      	adds	r3, r2, r3
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b21b      	sxth	r3, r3
 80047f8:	4aac      	ldr	r2, [pc, #688]	; (8004aac <USB_ActivateEndpoint+0x36c>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	b21a      	sxth	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	b21b      	sxth	r3, r3
 8004804:	4313      	orrs	r3, r2
 8004806:	b21a      	sxth	r2, r3
 8004808:	2166      	movs	r1, #102	; 0x66
 800480a:	187b      	adds	r3, r7, r1
 800480c:	801a      	strh	r2, [r3, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	18d3      	adds	r3, r2, r3
 8004818:	187a      	adds	r2, r7, r1
 800481a:	8812      	ldrh	r2, [r2, #0]
 800481c:	49a2      	ldr	r1, [pc, #648]	; (8004aa8 <USB_ActivateEndpoint+0x368>)
 800481e:	430a      	orrs	r2, r1
 8004820:	b292      	uxth	r2, r2
 8004822:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	7b1b      	ldrb	r3, [r3, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d000      	beq.n	800482e <USB_ActivateEndpoint+0xee>
 800482c:	e150      	b.n	8004ad0 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d100      	bne.n	8004838 <USB_ActivateEndpoint+0xf8>
 8004836:	e07a      	b.n	800492e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2250      	movs	r2, #80	; 0x50
 8004840:	5a9b      	ldrh	r3, [r3, r2]
 8004842:	b29b      	uxth	r3, r3
 8004844:	001a      	movs	r2, r3
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	189b      	adds	r3, r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	00da      	lsls	r2, r3, #3
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	18d3      	adds	r3, r2, r3
 8004856:	2280      	movs	r2, #128	; 0x80
 8004858:	00d2      	lsls	r2, r2, #3
 800485a:	4694      	mov	ip, r2
 800485c:	4463      	add	r3, ip
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	88db      	ldrh	r3, [r3, #6]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	b29b      	uxth	r3, r3
 8004868:	18db      	adds	r3, r3, r3
 800486a:	b29a      	uxth	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	18d2      	adds	r2, r2, r3
 800487a:	2112      	movs	r1, #18
 800487c:	187b      	adds	r3, r7, r1
 800487e:	8812      	ldrh	r2, [r2, #0]
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	187b      	adds	r3, r7, r1
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	4013      	ands	r3, r2
 800488a:	d016      	beq.n	80048ba <USB_ActivateEndpoint+0x17a>
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29a      	uxth	r2, r3
 800489a:	2010      	movs	r0, #16
 800489c:	183b      	adds	r3, r7, r0
 800489e:	4983      	ldr	r1, [pc, #524]	; (8004aac <USB_ActivateEndpoint+0x36c>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	18d3      	adds	r3, r2, r3
 80048ae:	183a      	adds	r2, r7, r0
 80048b0:	8812      	ldrh	r2, [r2, #0]
 80048b2:	497f      	ldr	r1, [pc, #508]	; (8004ab0 <USB_ActivateEndpoint+0x370>)
 80048b4:	430a      	orrs	r2, r1
 80048b6:	b292      	uxth	r2, r2
 80048b8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	78db      	ldrb	r3, [r3, #3]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d01d      	beq.n	80048fe <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	18d3      	adds	r3, r2, r3
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	200c      	movs	r0, #12
 80048d2:	183b      	adds	r3, r7, r0
 80048d4:	4977      	ldr	r1, [pc, #476]	; (8004ab4 <USB_ActivateEndpoint+0x374>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	183b      	adds	r3, r7, r0
 80048dc:	183a      	adds	r2, r7, r0
 80048de:	8812      	ldrh	r2, [r2, #0]
 80048e0:	2120      	movs	r1, #32
 80048e2:	404a      	eors	r2, r1
 80048e4:	801a      	strh	r2, [r3, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	18d3      	adds	r3, r2, r3
 80048f0:	183a      	adds	r2, r7, r0
 80048f2:	8812      	ldrh	r2, [r2, #0]
 80048f4:	496c      	ldr	r1, [pc, #432]	; (8004aa8 <USB_ActivateEndpoint+0x368>)
 80048f6:	430a      	orrs	r2, r1
 80048f8:	b292      	uxth	r2, r2
 80048fa:	801a      	strh	r2, [r3, #0]
 80048fc:	e27a      	b.n	8004df4 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	18d3      	adds	r3, r2, r3
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29a      	uxth	r2, r3
 800490c:	200e      	movs	r0, #14
 800490e:	183b      	adds	r3, r7, r0
 8004910:	4968      	ldr	r1, [pc, #416]	; (8004ab4 <USB_ActivateEndpoint+0x374>)
 8004912:	400a      	ands	r2, r1
 8004914:	801a      	strh	r2, [r3, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	18d3      	adds	r3, r2, r3
 8004920:	183a      	adds	r2, r7, r0
 8004922:	8812      	ldrh	r2, [r2, #0]
 8004924:	4960      	ldr	r1, [pc, #384]	; (8004aa8 <USB_ActivateEndpoint+0x368>)
 8004926:	430a      	orrs	r2, r1
 8004928:	b292      	uxth	r2, r2
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e262      	b.n	8004df4 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2250      	movs	r2, #80	; 0x50
 8004936:	5a9b      	ldrh	r3, [r3, r2]
 8004938:	b29b      	uxth	r3, r3
 800493a:	001a      	movs	r2, r3
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	189b      	adds	r3, r3, r2
 8004940:	633b      	str	r3, [r7, #48]	; 0x30
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	00da      	lsls	r2, r3, #3
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	18d3      	adds	r3, r2, r3
 800494c:	4a5a      	ldr	r2, [pc, #360]	; (8004ab8 <USB_ActivateEndpoint+0x378>)
 800494e:	4694      	mov	ip, r2
 8004950:	4463      	add	r3, ip
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	88db      	ldrh	r3, [r3, #6]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	18db      	adds	r3, r3, r3
 800495e:	b29a      	uxth	r2, r3
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2250      	movs	r2, #80	; 0x50
 800496c:	5a9b      	ldrh	r3, [r3, r2]
 800496e:	b29b      	uxth	r3, r3
 8004970:	001a      	movs	r2, r3
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	189b      	adds	r3, r3, r2
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	00da      	lsls	r2, r3, #3
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	18d3      	adds	r3, r2, r3
 8004982:	4a4e      	ldr	r2, [pc, #312]	; (8004abc <USB_ActivateEndpoint+0x37c>)
 8004984:	4694      	mov	ip, r2
 8004986:	4463      	add	r3, ip
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d110      	bne.n	80049b4 <USB_ActivateEndpoint+0x274>
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	4a49      	ldr	r2, [pc, #292]	; (8004ac0 <USB_ActivateEndpoint+0x380>)
 800499a:	4013      	ands	r3, r2
 800499c:	b29a      	uxth	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	4a46      	ldr	r2, [pc, #280]	; (8004ac4 <USB_ActivateEndpoint+0x384>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e02b      	b.n	8004a0c <USB_ActivateEndpoint+0x2cc>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2b3e      	cmp	r3, #62	; 0x3e
 80049ba:	d812      	bhi.n	80049e2 <USB_ActivateEndpoint+0x2a2>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2201      	movs	r2, #1
 80049ca:	4013      	ands	r3, r2
 80049cc:	d002      	beq.n	80049d4 <USB_ActivateEndpoint+0x294>
 80049ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d0:	3301      	adds	r3, #1
 80049d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	029b      	lsls	r3, r3, #10
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e014      	b.n	8004a0c <USB_ActivateEndpoint+0x2cc>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	221f      	movs	r2, #31
 80049f0:	4013      	ands	r3, r2
 80049f2:	d102      	bne.n	80049fa <USB_ActivateEndpoint+0x2ba>
 80049f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f6:	3b01      	subs	r3, #1
 80049f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4a30      	ldr	r2, [pc, #192]	; (8004ac4 <USB_ActivateEndpoint+0x384>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	18d2      	adds	r2, r2, r3
 8004a16:	2122      	movs	r1, #34	; 0x22
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	8812      	ldrh	r2, [r2, #0]
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	187b      	adds	r3, r7, r1
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	01db      	lsls	r3, r3, #7
 8004a26:	4013      	ands	r3, r2
 8004a28:	d016      	beq.n	8004a58 <USB_ActivateEndpoint+0x318>
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	18d3      	adds	r3, r2, r3
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	2020      	movs	r0, #32
 8004a3a:	183b      	adds	r3, r7, r0
 8004a3c:	491b      	ldr	r1, [pc, #108]	; (8004aac <USB_ActivateEndpoint+0x36c>)
 8004a3e:	400a      	ands	r2, r1
 8004a40:	801a      	strh	r2, [r3, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	18d3      	adds	r3, r2, r3
 8004a4c:	183a      	adds	r2, r7, r0
 8004a4e:	8812      	ldrh	r2, [r2, #0]
 8004a50:	491d      	ldr	r1, [pc, #116]	; (8004ac8 <USB_ActivateEndpoint+0x388>)
 8004a52:	430a      	orrs	r2, r1
 8004a54:	b292      	uxth	r2, r2
 8004a56:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	18d3      	adds	r3, r2, r3
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	201e      	movs	r0, #30
 8004a68:	183b      	adds	r3, r7, r0
 8004a6a:	4918      	ldr	r1, [pc, #96]	; (8004acc <USB_ActivateEndpoint+0x38c>)
 8004a6c:	400a      	ands	r2, r1
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	183a      	adds	r2, r7, r0
 8004a74:	8812      	ldrh	r2, [r2, #0]
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	0149      	lsls	r1, r1, #5
 8004a7a:	404a      	eors	r2, r1
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	183a      	adds	r2, r7, r0
 8004a82:	8812      	ldrh	r2, [r2, #0]
 8004a84:	2180      	movs	r1, #128	; 0x80
 8004a86:	0189      	lsls	r1, r1, #6
 8004a88:	404a      	eors	r2, r1
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	18d3      	adds	r3, r2, r3
 8004a96:	183a      	adds	r2, r7, r0
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	4903      	ldr	r1, [pc, #12]	; (8004aa8 <USB_ActivateEndpoint+0x368>)
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	b292      	uxth	r2, r2
 8004aa0:	801a      	strh	r2, [r3, #0]
 8004aa2:	e1a7      	b.n	8004df4 <USB_ActivateEndpoint+0x6b4>
 8004aa4:	ffff898f 	.word	0xffff898f
 8004aa8:	ffff8080 	.word	0xffff8080
 8004aac:	ffff8f8f 	.word	0xffff8f8f
 8004ab0:	ffff80c0 	.word	0xffff80c0
 8004ab4:	ffff8fbf 	.word	0xffff8fbf
 8004ab8:	00000404 	.word	0x00000404
 8004abc:	00000406 	.word	0x00000406
 8004ac0:	ffff83ff 	.word	0xffff83ff
 8004ac4:	ffff8000 	.word	0xffff8000
 8004ac8:	ffffc080 	.word	0xffffc080
 8004acc:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	78db      	ldrb	r3, [r3, #3]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d117      	bne.n	8004b08 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	18d3      	adds	r3, r2, r3
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	2062      	movs	r0, #98	; 0x62
 8004ae8:	183b      	adds	r3, r7, r0
 8004aea:	49c6      	ldr	r1, [pc, #792]	; (8004e04 <USB_ActivateEndpoint+0x6c4>)
 8004aec:	400a      	ands	r2, r1
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	183a      	adds	r2, r7, r0
 8004afc:	8812      	ldrh	r2, [r2, #0]
 8004afe:	49c2      	ldr	r1, [pc, #776]	; (8004e08 <USB_ActivateEndpoint+0x6c8>)
 8004b00:	430a      	orrs	r2, r1
 8004b02:	b292      	uxth	r2, r2
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	e016      	b.n	8004b36 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	18d3      	adds	r3, r2, r3
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	2064      	movs	r0, #100	; 0x64
 8004b18:	183b      	adds	r3, r7, r0
 8004b1a:	49bc      	ldr	r1, [pc, #752]	; (8004e0c <USB_ActivateEndpoint+0x6cc>)
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	18d3      	adds	r3, r2, r3
 8004b2a:	183a      	adds	r2, r7, r0
 8004b2c:	8812      	ldrh	r2, [r2, #0]
 8004b2e:	49b8      	ldr	r1, [pc, #736]	; (8004e10 <USB_ActivateEndpoint+0x6d0>)
 8004b30:	430a      	orrs	r2, r1
 8004b32:	b292      	uxth	r2, r2
 8004b34:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2250      	movs	r2, #80	; 0x50
 8004b3e:	5a9b      	ldrh	r3, [r3, r2]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	001a      	movs	r2, r3
 8004b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	00da      	lsls	r2, r3, #3
 8004b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	00d2      	lsls	r2, r2, #3
 8004b58:	4694      	mov	ip, r2
 8004b5a:	4463      	add	r3, ip
 8004b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	891b      	ldrh	r3, [r3, #8]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	18db      	adds	r3, r3, r3
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b6c:	801a      	strh	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	657b      	str	r3, [r7, #84]	; 0x54
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2250      	movs	r2, #80	; 0x50
 8004b76:	5a9b      	ldrh	r3, [r3, r2]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	657b      	str	r3, [r7, #84]	; 0x54
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	00da      	lsls	r2, r3, #3
 8004b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8a:	18d3      	adds	r3, r2, r3
 8004b8c:	4aa1      	ldr	r2, [pc, #644]	; (8004e14 <USB_ActivateEndpoint+0x6d4>)
 8004b8e:	4694      	mov	ip, r2
 8004b90:	4463      	add	r3, ip
 8004b92:	653b      	str	r3, [r7, #80]	; 0x50
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	895b      	ldrh	r3, [r3, #10]
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	18db      	adds	r3, r3, r3
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d000      	beq.n	8004bae <USB_ActivateEndpoint+0x46e>
 8004bac:	e087      	b.n	8004cbe <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	18d2      	adds	r2, r2, r3
 8004bb8:	2140      	movs	r1, #64	; 0x40
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	8812      	ldrh	r2, [r2, #0]
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	187b      	adds	r3, r7, r1
 8004bc2:	881a      	ldrh	r2, [r3, #0]
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	01db      	lsls	r3, r3, #7
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d016      	beq.n	8004bfa <USB_ActivateEndpoint+0x4ba>
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	18d3      	adds	r3, r2, r3
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	203e      	movs	r0, #62	; 0x3e
 8004bdc:	183b      	adds	r3, r7, r0
 8004bde:	4989      	ldr	r1, [pc, #548]	; (8004e04 <USB_ActivateEndpoint+0x6c4>)
 8004be0:	400a      	ands	r2, r1
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	18d3      	adds	r3, r2, r3
 8004bee:	183a      	adds	r2, r7, r0
 8004bf0:	8812      	ldrh	r2, [r2, #0]
 8004bf2:	4989      	ldr	r1, [pc, #548]	; (8004e18 <USB_ActivateEndpoint+0x6d8>)
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	b292      	uxth	r2, r2
 8004bf8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	18d2      	adds	r2, r2, r3
 8004c04:	213c      	movs	r1, #60	; 0x3c
 8004c06:	187b      	adds	r3, r7, r1
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	187b      	adds	r3, r7, r1
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	2240      	movs	r2, #64	; 0x40
 8004c12:	4013      	ands	r3, r2
 8004c14:	d016      	beq.n	8004c44 <USB_ActivateEndpoint+0x504>
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	18d3      	adds	r3, r2, r3
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	203a      	movs	r0, #58	; 0x3a
 8004c26:	183b      	adds	r3, r7, r0
 8004c28:	4976      	ldr	r1, [pc, #472]	; (8004e04 <USB_ActivateEndpoint+0x6c4>)
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	801a      	strh	r2, [r3, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	18d3      	adds	r3, r2, r3
 8004c38:	183a      	adds	r2, r7, r0
 8004c3a:	8812      	ldrh	r2, [r2, #0]
 8004c3c:	4977      	ldr	r1, [pc, #476]	; (8004e1c <USB_ActivateEndpoint+0x6dc>)
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	b292      	uxth	r2, r2
 8004c42:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	18d3      	adds	r3, r2, r3
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	2038      	movs	r0, #56	; 0x38
 8004c54:	183b      	adds	r3, r7, r0
 8004c56:	4972      	ldr	r1, [pc, #456]	; (8004e20 <USB_ActivateEndpoint+0x6e0>)
 8004c58:	400a      	ands	r2, r1
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	183b      	adds	r3, r7, r0
 8004c5e:	183a      	adds	r2, r7, r0
 8004c60:	8812      	ldrh	r2, [r2, #0]
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	0149      	lsls	r1, r1, #5
 8004c66:	404a      	eors	r2, r1
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	183b      	adds	r3, r7, r0
 8004c6c:	183a      	adds	r2, r7, r0
 8004c6e:	8812      	ldrh	r2, [r2, #0]
 8004c70:	2180      	movs	r1, #128	; 0x80
 8004c72:	0189      	lsls	r1, r1, #6
 8004c74:	404a      	eors	r2, r1
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	18d3      	adds	r3, r2, r3
 8004c82:	183a      	adds	r2, r7, r0
 8004c84:	8812      	ldrh	r2, [r2, #0]
 8004c86:	4962      	ldr	r1, [pc, #392]	; (8004e10 <USB_ActivateEndpoint+0x6d0>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	18d3      	adds	r3, r2, r3
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	2036      	movs	r0, #54	; 0x36
 8004c9e:	183b      	adds	r3, r7, r0
 8004ca0:	4960      	ldr	r1, [pc, #384]	; (8004e24 <USB_ActivateEndpoint+0x6e4>)
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	18d3      	adds	r3, r2, r3
 8004cb0:	183a      	adds	r2, r7, r0
 8004cb2:	8812      	ldrh	r2, [r2, #0]
 8004cb4:	4956      	ldr	r1, [pc, #344]	; (8004e10 <USB_ActivateEndpoint+0x6d0>)
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	e09a      	b.n	8004df4 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	18d2      	adds	r2, r2, r3
 8004cc8:	214e      	movs	r1, #78	; 0x4e
 8004cca:	187b      	adds	r3, r7, r1
 8004ccc:	8812      	ldrh	r2, [r2, #0]
 8004cce:	801a      	strh	r2, [r3, #0]
 8004cd0:	187b      	adds	r3, r7, r1
 8004cd2:	881a      	ldrh	r2, [r3, #0]
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	01db      	lsls	r3, r3, #7
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d016      	beq.n	8004d0a <USB_ActivateEndpoint+0x5ca>
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	18d3      	adds	r3, r2, r3
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	204c      	movs	r0, #76	; 0x4c
 8004cec:	183b      	adds	r3, r7, r0
 8004cee:	4945      	ldr	r1, [pc, #276]	; (8004e04 <USB_ActivateEndpoint+0x6c4>)
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	18d3      	adds	r3, r2, r3
 8004cfe:	183a      	adds	r2, r7, r0
 8004d00:	8812      	ldrh	r2, [r2, #0]
 8004d02:	4945      	ldr	r1, [pc, #276]	; (8004e18 <USB_ActivateEndpoint+0x6d8>)
 8004d04:	430a      	orrs	r2, r1
 8004d06:	b292      	uxth	r2, r2
 8004d08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	18d2      	adds	r2, r2, r3
 8004d14:	214a      	movs	r1, #74	; 0x4a
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	8812      	ldrh	r2, [r2, #0]
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	2240      	movs	r2, #64	; 0x40
 8004d22:	4013      	ands	r3, r2
 8004d24:	d016      	beq.n	8004d54 <USB_ActivateEndpoint+0x614>
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	18d3      	adds	r3, r2, r3
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	2048      	movs	r0, #72	; 0x48
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	4932      	ldr	r1, [pc, #200]	; (8004e04 <USB_ActivateEndpoint+0x6c4>)
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	18d3      	adds	r3, r2, r3
 8004d48:	183a      	adds	r2, r7, r0
 8004d4a:	8812      	ldrh	r2, [r2, #0]
 8004d4c:	4933      	ldr	r1, [pc, #204]	; (8004e1c <USB_ActivateEndpoint+0x6dc>)
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	b292      	uxth	r2, r2
 8004d52:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	78db      	ldrb	r3, [r3, #3]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d01d      	beq.n	8004d98 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	18d3      	adds	r3, r2, r3
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	2044      	movs	r0, #68	; 0x44
 8004d6c:	183b      	adds	r3, r7, r0
 8004d6e:	492d      	ldr	r1, [pc, #180]	; (8004e24 <USB_ActivateEndpoint+0x6e4>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	183b      	adds	r3, r7, r0
 8004d76:	183a      	adds	r2, r7, r0
 8004d78:	8812      	ldrh	r2, [r2, #0]
 8004d7a:	2120      	movs	r1, #32
 8004d7c:	404a      	eors	r2, r1
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	18d3      	adds	r3, r2, r3
 8004d8a:	183a      	adds	r2, r7, r0
 8004d8c:	8812      	ldrh	r2, [r2, #0]
 8004d8e:	4920      	ldr	r1, [pc, #128]	; (8004e10 <USB_ActivateEndpoint+0x6d0>)
 8004d90:	430a      	orrs	r2, r1
 8004d92:	b292      	uxth	r2, r2
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	e016      	b.n	8004dc6 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	18d3      	adds	r3, r2, r3
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	2046      	movs	r0, #70	; 0x46
 8004da8:	183b      	adds	r3, r7, r0
 8004daa:	491e      	ldr	r1, [pc, #120]	; (8004e24 <USB_ActivateEndpoint+0x6e4>)
 8004dac:	400a      	ands	r2, r1
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	18d3      	adds	r3, r2, r3
 8004dba:	183a      	adds	r2, r7, r0
 8004dbc:	8812      	ldrh	r2, [r2, #0]
 8004dbe:	4914      	ldr	r1, [pc, #80]	; (8004e10 <USB_ActivateEndpoint+0x6d0>)
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	b292      	uxth	r2, r2
 8004dc4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	18d3      	adds	r3, r2, r3
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	2042      	movs	r0, #66	; 0x42
 8004dd6:	183b      	adds	r3, r7, r0
 8004dd8:	4911      	ldr	r1, [pc, #68]	; (8004e20 <USB_ActivateEndpoint+0x6e0>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	18d3      	adds	r3, r2, r3
 8004de8:	183a      	adds	r2, r7, r0
 8004dea:	8812      	ldrh	r2, [r2, #0]
 8004dec:	4908      	ldr	r1, [pc, #32]	; (8004e10 <USB_ActivateEndpoint+0x6d0>)
 8004dee:	430a      	orrs	r2, r1
 8004df0:	b292      	uxth	r2, r2
 8004df2:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8004df4:	236f      	movs	r3, #111	; 0x6f
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	781b      	ldrb	r3, [r3, #0]
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b01c      	add	sp, #112	; 0x70
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	ffff8f8f 	.word	0xffff8f8f
 8004e08:	ffff8180 	.word	0xffff8180
 8004e0c:	ffff8e8f 	.word	0xffff8e8f
 8004e10:	ffff8080 	.word	0xffff8080
 8004e14:	00000404 	.word	0x00000404
 8004e18:	ffffc080 	.word	0xffffc080
 8004e1c:	ffff80c0 	.word	0xffff80c0
 8004e20:	ffffbf8f 	.word	0xffffbf8f
 8004e24:	ffff8fbf 	.word	0xffff8fbf

08004e28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08c      	sub	sp, #48	; 0x30
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	7b1b      	ldrb	r3, [r3, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d000      	beq.n	8004e3c <USB_DeactivateEndpoint+0x14>
 8004e3a:	e07e      	b.n	8004f3a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d03c      	beq.n	8004ebe <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	18d2      	adds	r2, r2, r3
 8004e4e:	210c      	movs	r1, #12
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	8812      	ldrh	r2, [r2, #0]
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d016      	beq.n	8004e8e <USB_DeactivateEndpoint+0x66>
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	18d3      	adds	r3, r2, r3
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	200a      	movs	r0, #10
 8004e70:	183b      	adds	r3, r7, r0
 8004e72:	49c7      	ldr	r1, [pc, #796]	; (8005190 <USB_DeactivateEndpoint+0x368>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	18d3      	adds	r3, r2, r3
 8004e82:	183a      	adds	r2, r7, r0
 8004e84:	8812      	ldrh	r2, [r2, #0]
 8004e86:	49c3      	ldr	r1, [pc, #780]	; (8005194 <USB_DeactivateEndpoint+0x36c>)
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	2008      	movs	r0, #8
 8004e9e:	183b      	adds	r3, r7, r0
 8004ea0:	49bd      	ldr	r1, [pc, #756]	; (8005198 <USB_DeactivateEndpoint+0x370>)
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	183a      	adds	r2, r7, r0
 8004eb2:	8812      	ldrh	r2, [r2, #0]
 8004eb4:	49b9      	ldr	r1, [pc, #740]	; (800519c <USB_DeactivateEndpoint+0x374>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	b292      	uxth	r2, r2
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e163      	b.n	8005186 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	18d2      	adds	r2, r2, r3
 8004ec8:	2112      	movs	r1, #18
 8004eca:	187b      	adds	r3, r7, r1
 8004ecc:	8812      	ldrh	r2, [r2, #0]
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	187b      	adds	r3, r7, r1
 8004ed2:	881a      	ldrh	r2, [r3, #0]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d016      	beq.n	8004f0a <USB_DeactivateEndpoint+0xe2>
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	2010      	movs	r0, #16
 8004eec:	183b      	adds	r3, r7, r0
 8004eee:	49a8      	ldr	r1, [pc, #672]	; (8005190 <USB_DeactivateEndpoint+0x368>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	18d3      	adds	r3, r2, r3
 8004efe:	183a      	adds	r2, r7, r0
 8004f00:	8812      	ldrh	r2, [r2, #0]
 8004f02:	49a7      	ldr	r1, [pc, #668]	; (80051a0 <USB_DeactivateEndpoint+0x378>)
 8004f04:	430a      	orrs	r2, r1
 8004f06:	b292      	uxth	r2, r2
 8004f08:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	18d3      	adds	r3, r2, r3
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	200e      	movs	r0, #14
 8004f1a:	183b      	adds	r3, r7, r0
 8004f1c:	49a1      	ldr	r1, [pc, #644]	; (80051a4 <USB_DeactivateEndpoint+0x37c>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	18d3      	adds	r3, r2, r3
 8004f2c:	183a      	adds	r2, r7, r0
 8004f2e:	8812      	ldrh	r2, [r2, #0]
 8004f30:	499a      	ldr	r1, [pc, #616]	; (800519c <USB_DeactivateEndpoint+0x374>)
 8004f32:	430a      	orrs	r2, r1
 8004f34:	b292      	uxth	r2, r2
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e125      	b.n	8005186 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d000      	beq.n	8004f44 <USB_DeactivateEndpoint+0x11c>
 8004f42:	e090      	b.n	8005066 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	18d2      	adds	r2, r2, r3
 8004f4e:	2120      	movs	r1, #32
 8004f50:	187b      	adds	r3, r7, r1
 8004f52:	8812      	ldrh	r2, [r2, #0]
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	187b      	adds	r3, r7, r1
 8004f58:	881a      	ldrh	r2, [r3, #0]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	01db      	lsls	r3, r3, #7
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d016      	beq.n	8004f90 <USB_DeactivateEndpoint+0x168>
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	18d3      	adds	r3, r2, r3
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	201e      	movs	r0, #30
 8004f72:	183b      	adds	r3, r7, r0
 8004f74:	4986      	ldr	r1, [pc, #536]	; (8005190 <USB_DeactivateEndpoint+0x368>)
 8004f76:	400a      	ands	r2, r1
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	18d3      	adds	r3, r2, r3
 8004f84:	183a      	adds	r2, r7, r0
 8004f86:	8812      	ldrh	r2, [r2, #0]
 8004f88:	4985      	ldr	r1, [pc, #532]	; (80051a0 <USB_DeactivateEndpoint+0x378>)
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	b292      	uxth	r2, r2
 8004f8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	18d2      	adds	r2, r2, r3
 8004f9a:	211c      	movs	r1, #28
 8004f9c:	187b      	adds	r3, r7, r1
 8004f9e:	8812      	ldrh	r2, [r2, #0]
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	187b      	adds	r3, r7, r1
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	2240      	movs	r2, #64	; 0x40
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d016      	beq.n	8004fda <USB_DeactivateEndpoint+0x1b2>
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	18d3      	adds	r3, r2, r3
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	201a      	movs	r0, #26
 8004fbc:	183b      	adds	r3, r7, r0
 8004fbe:	4974      	ldr	r1, [pc, #464]	; (8005190 <USB_DeactivateEndpoint+0x368>)
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	18d3      	adds	r3, r2, r3
 8004fce:	183a      	adds	r2, r7, r0
 8004fd0:	8812      	ldrh	r2, [r2, #0]
 8004fd2:	4970      	ldr	r1, [pc, #448]	; (8005194 <USB_DeactivateEndpoint+0x36c>)
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	b292      	uxth	r2, r2
 8004fd8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	18d3      	adds	r3, r2, r3
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	2018      	movs	r0, #24
 8004fea:	183b      	adds	r3, r7, r0
 8004fec:	4968      	ldr	r1, [pc, #416]	; (8005190 <USB_DeactivateEndpoint+0x368>)
 8004fee:	400a      	ands	r2, r1
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	18d3      	adds	r3, r2, r3
 8004ffc:	183a      	adds	r2, r7, r0
 8004ffe:	8812      	ldrh	r2, [r2, #0]
 8005000:	4964      	ldr	r1, [pc, #400]	; (8005194 <USB_DeactivateEndpoint+0x36c>)
 8005002:	430a      	orrs	r2, r1
 8005004:	b292      	uxth	r2, r2
 8005006:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	18d3      	adds	r3, r2, r3
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29a      	uxth	r2, r3
 8005016:	2016      	movs	r0, #22
 8005018:	183b      	adds	r3, r7, r0
 800501a:	4962      	ldr	r1, [pc, #392]	; (80051a4 <USB_DeactivateEndpoint+0x37c>)
 800501c:	400a      	ands	r2, r1
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	18d3      	adds	r3, r2, r3
 800502a:	183a      	adds	r2, r7, r0
 800502c:	8812      	ldrh	r2, [r2, #0]
 800502e:	495b      	ldr	r1, [pc, #364]	; (800519c <USB_DeactivateEndpoint+0x374>)
 8005030:	430a      	orrs	r2, r1
 8005032:	b292      	uxth	r2, r2
 8005034:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	18d3      	adds	r3, r2, r3
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29a      	uxth	r2, r3
 8005044:	2014      	movs	r0, #20
 8005046:	183b      	adds	r3, r7, r0
 8005048:	4953      	ldr	r1, [pc, #332]	; (8005198 <USB_DeactivateEndpoint+0x370>)
 800504a:	400a      	ands	r2, r1
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	18d3      	adds	r3, r2, r3
 8005058:	183a      	adds	r2, r7, r0
 800505a:	8812      	ldrh	r2, [r2, #0]
 800505c:	494f      	ldr	r1, [pc, #316]	; (800519c <USB_DeactivateEndpoint+0x374>)
 800505e:	430a      	orrs	r2, r1
 8005060:	b292      	uxth	r2, r2
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	e08f      	b.n	8005186 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	18d2      	adds	r2, r2, r3
 8005070:	212e      	movs	r1, #46	; 0x2e
 8005072:	187b      	adds	r3, r7, r1
 8005074:	8812      	ldrh	r2, [r2, #0]
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	187b      	adds	r3, r7, r1
 800507a:	881a      	ldrh	r2, [r3, #0]
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	01db      	lsls	r3, r3, #7
 8005080:	4013      	ands	r3, r2
 8005082:	d016      	beq.n	80050b2 <USB_DeactivateEndpoint+0x28a>
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	18d3      	adds	r3, r2, r3
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29a      	uxth	r2, r3
 8005092:	202c      	movs	r0, #44	; 0x2c
 8005094:	183b      	adds	r3, r7, r0
 8005096:	493e      	ldr	r1, [pc, #248]	; (8005190 <USB_DeactivateEndpoint+0x368>)
 8005098:	400a      	ands	r2, r1
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	18d3      	adds	r3, r2, r3
 80050a6:	183a      	adds	r2, r7, r0
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	493d      	ldr	r1, [pc, #244]	; (80051a0 <USB_DeactivateEndpoint+0x378>)
 80050ac:	430a      	orrs	r2, r1
 80050ae:	b292      	uxth	r2, r2
 80050b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	18d2      	adds	r2, r2, r3
 80050bc:	212a      	movs	r1, #42	; 0x2a
 80050be:	187b      	adds	r3, r7, r1
 80050c0:	8812      	ldrh	r2, [r2, #0]
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	187b      	adds	r3, r7, r1
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	2240      	movs	r2, #64	; 0x40
 80050ca:	4013      	ands	r3, r2
 80050cc:	d016      	beq.n	80050fc <USB_DeactivateEndpoint+0x2d4>
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	18d3      	adds	r3, r2, r3
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	2028      	movs	r0, #40	; 0x28
 80050de:	183b      	adds	r3, r7, r0
 80050e0:	492b      	ldr	r1, [pc, #172]	; (8005190 <USB_DeactivateEndpoint+0x368>)
 80050e2:	400a      	ands	r2, r1
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	18d3      	adds	r3, r2, r3
 80050f0:	183a      	adds	r2, r7, r0
 80050f2:	8812      	ldrh	r2, [r2, #0]
 80050f4:	4927      	ldr	r1, [pc, #156]	; (8005194 <USB_DeactivateEndpoint+0x36c>)
 80050f6:	430a      	orrs	r2, r1
 80050f8:	b292      	uxth	r2, r2
 80050fa:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	18d3      	adds	r3, r2, r3
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29a      	uxth	r2, r3
 800510a:	2026      	movs	r0, #38	; 0x26
 800510c:	183b      	adds	r3, r7, r0
 800510e:	4920      	ldr	r1, [pc, #128]	; (8005190 <USB_DeactivateEndpoint+0x368>)
 8005110:	400a      	ands	r2, r1
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	18d3      	adds	r3, r2, r3
 800511e:	183a      	adds	r2, r7, r0
 8005120:	8812      	ldrh	r2, [r2, #0]
 8005122:	491f      	ldr	r1, [pc, #124]	; (80051a0 <USB_DeactivateEndpoint+0x378>)
 8005124:	430a      	orrs	r2, r1
 8005126:	b292      	uxth	r2, r2
 8005128:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	18d3      	adds	r3, r2, r3
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29a      	uxth	r2, r3
 8005138:	2024      	movs	r0, #36	; 0x24
 800513a:	183b      	adds	r3, r7, r0
 800513c:	4916      	ldr	r1, [pc, #88]	; (8005198 <USB_DeactivateEndpoint+0x370>)
 800513e:	400a      	ands	r2, r1
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	18d3      	adds	r3, r2, r3
 800514c:	183a      	adds	r2, r7, r0
 800514e:	8812      	ldrh	r2, [r2, #0]
 8005150:	4912      	ldr	r1, [pc, #72]	; (800519c <USB_DeactivateEndpoint+0x374>)
 8005152:	430a      	orrs	r2, r1
 8005154:	b292      	uxth	r2, r2
 8005156:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	18d3      	adds	r3, r2, r3
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29a      	uxth	r2, r3
 8005166:	2022      	movs	r0, #34	; 0x22
 8005168:	183b      	adds	r3, r7, r0
 800516a:	490e      	ldr	r1, [pc, #56]	; (80051a4 <USB_DeactivateEndpoint+0x37c>)
 800516c:	400a      	ands	r2, r1
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	18d3      	adds	r3, r2, r3
 800517a:	183a      	adds	r2, r7, r0
 800517c:	8812      	ldrh	r2, [r2, #0]
 800517e:	4907      	ldr	r1, [pc, #28]	; (800519c <USB_DeactivateEndpoint+0x374>)
 8005180:	430a      	orrs	r2, r1
 8005182:	b292      	uxth	r2, r2
 8005184:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	0018      	movs	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	b00c      	add	sp, #48	; 0x30
 800518e:	bd80      	pop	{r7, pc}
 8005190:	ffff8f8f 	.word	0xffff8f8f
 8005194:	ffff80c0 	.word	0xffff80c0
 8005198:	ffff8fbf 	.word	0xffff8fbf
 800519c:	ffff8080 	.word	0xffff8080
 80051a0:	ffffc080 	.word	0xffffc080
 80051a4:	ffffbf8f 	.word	0xffffbf8f

080051a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b0c3      	sub	sp, #268	; 0x10c
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d001      	beq.n	80051be <USB_EPStartXfer+0x16>
 80051ba:	f000 fcf9 	bl	8005bb0 <USB_EPStartXfer+0xa08>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d905      	bls.n	80051d6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	1d7a      	adds	r2, r7, #5
 80051d0:	32ff      	adds	r2, #255	; 0xff
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e004      	b.n	80051e0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	1d7a      	adds	r2, r7, #5
 80051dc:	32ff      	adds	r2, #255	; 0xff
 80051de:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	7b1b      	ldrb	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d125      	bne.n	8005234 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6959      	ldr	r1, [r3, #20]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	88da      	ldrh	r2, [r3, #6]
 80051f0:	1d7b      	adds	r3, r7, #5
 80051f2:	33ff      	adds	r3, #255	; 0xff
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 f9e5 	bl	80065c8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2250      	movs	r2, #80	; 0x50
 8005206:	5a9b      	ldrh	r3, [r3, r2]
 8005208:	b29b      	uxth	r3, r3
 800520a:	001a      	movs	r2, r3
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	189b      	adds	r3, r3, r2
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	00da      	lsls	r2, r3, #3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	4acd      	ldr	r2, [pc, #820]	; (8005554 <USB_EPStartXfer+0x3ac>)
 800521e:	4694      	mov	ip, r2
 8005220:	4463      	add	r3, ip
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	1d7b      	adds	r3, r7, #5
 8005226:	33ff      	adds	r3, #255	; 0xff
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	f000 fc99 	bl	8005b66 <USB_EPStartXfer+0x9be>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	78db      	ldrb	r3, [r3, #3]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d000      	beq.n	800523e <USB_EPStartXfer+0x96>
 800523c:	e340      	b.n	80058c0 <USB_EPStartXfer+0x718>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6a1a      	ldr	r2, [r3, #32]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	429a      	cmp	r2, r3
 8005248:	d800      	bhi.n	800524c <USB_EPStartXfer+0xa4>
 800524a:	e2e5      	b.n	8005818 <USB_EPStartXfer+0x670>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29a      	uxth	r2, r3
 800525a:	2056      	movs	r0, #86	; 0x56
 800525c:	183b      	adds	r3, r7, r0
 800525e:	49be      	ldr	r1, [pc, #760]	; (8005558 <USB_EPStartXfer+0x3b0>)
 8005260:	400a      	ands	r2, r1
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	18d3      	adds	r3, r2, r3
 800526e:	183a      	adds	r2, r7, r0
 8005270:	8812      	ldrh	r2, [r2, #0]
 8005272:	49ba      	ldr	r1, [pc, #744]	; (800555c <USB_EPStartXfer+0x3b4>)
 8005274:	430a      	orrs	r2, r1
 8005276:	b292      	uxth	r2, r2
 8005278:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	1d7b      	adds	r3, r7, #5
 8005280:	33ff      	adds	r3, #255	; 0xff
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	1ad2      	subs	r2, r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	18d3      	adds	r3, r2, r3
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	001a      	movs	r2, r3
 800529a:	2340      	movs	r3, #64	; 0x40
 800529c:	4013      	ands	r3, r2
 800529e:	d100      	bne.n	80052a2 <USB_EPStartXfer+0xfa>
 80052a0:	e164      	b.n	800556c <USB_EPStartXfer+0x3c4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	633b      	str	r3, [r7, #48]	; 0x30
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d16a      	bne.n	8005384 <USB_EPStartXfer+0x1dc>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2250      	movs	r2, #80	; 0x50
 80052b6:	5a9b      	ldrh	r3, [r3, r2]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	001a      	movs	r2, r3
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	00da      	lsls	r2, r3, #3
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	18d3      	adds	r3, r2, r3
 80052cc:	4aa4      	ldr	r2, [pc, #656]	; (8005560 <USB_EPStartXfer+0x3b8>)
 80052ce:	4694      	mov	ip, r2
 80052d0:	4463      	add	r3, ip
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	1d7b      	adds	r3, r7, #5
 80052d6:	33ff      	adds	r3, #255	; 0xff
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d110      	bne.n	8005300 <USB_EPStartXfer+0x158>
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	4a9f      	ldr	r2, [pc, #636]	; (8005564 <USB_EPStartXfer+0x3bc>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4a9c      	ldr	r2, [pc, #624]	; (8005568 <USB_EPStartXfer+0x3c0>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e05c      	b.n	80053ba <USB_EPStartXfer+0x212>
 8005300:	1d7b      	adds	r3, r7, #5
 8005302:	33ff      	adds	r3, #255	; 0xff
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b3e      	cmp	r3, #62	; 0x3e
 8005308:	d81c      	bhi.n	8005344 <USB_EPStartXfer+0x19c>
 800530a:	1d7b      	adds	r3, r7, #5
 800530c:	33ff      	adds	r3, #255	; 0xff
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	1c7a      	adds	r2, r7, #1
 8005314:	32ff      	adds	r2, #255	; 0xff
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	1d7b      	adds	r3, r7, #5
 800531a:	33ff      	adds	r3, #255	; 0xff
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	4013      	ands	r3, r2
 8005322:	d006      	beq.n	8005332 <USB_EPStartXfer+0x18a>
 8005324:	1c7b      	adds	r3, r7, #1
 8005326:	33ff      	adds	r3, #255	; 0xff
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	1c7a      	adds	r2, r7, #1
 800532e:	32ff      	adds	r2, #255	; 0xff
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	1c7b      	adds	r3, r7, #1
 8005334:	33ff      	adds	r3, #255	; 0xff
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	029b      	lsls	r3, r3, #10
 800533c:	b29a      	uxth	r2, r3
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	e03a      	b.n	80053ba <USB_EPStartXfer+0x212>
 8005344:	1d7b      	adds	r3, r7, #5
 8005346:	33ff      	adds	r3, #255	; 0xff
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	1c7a      	adds	r2, r7, #1
 800534e:	32ff      	adds	r2, #255	; 0xff
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	1d7b      	adds	r3, r7, #5
 8005354:	33ff      	adds	r3, #255	; 0xff
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	221f      	movs	r2, #31
 800535a:	4013      	ands	r3, r2
 800535c:	d106      	bne.n	800536c <USB_EPStartXfer+0x1c4>
 800535e:	1c7b      	adds	r3, r7, #1
 8005360:	33ff      	adds	r3, #255	; 0xff
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3b01      	subs	r3, #1
 8005366:	1c7a      	adds	r2, r7, #1
 8005368:	32ff      	adds	r2, #255	; 0xff
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	1c7b      	adds	r3, r7, #1
 800536e:	33ff      	adds	r3, #255	; 0xff
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	029b      	lsls	r3, r3, #10
 8005376:	b29b      	uxth	r3, r3
 8005378:	4a7b      	ldr	r2, [pc, #492]	; (8005568 <USB_EPStartXfer+0x3c0>)
 800537a:	4313      	orrs	r3, r2
 800537c:	b29a      	uxth	r2, r3
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	e01a      	b.n	80053ba <USB_EPStartXfer+0x212>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d116      	bne.n	80053ba <USB_EPStartXfer+0x212>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2250      	movs	r2, #80	; 0x50
 8005390:	5a9b      	ldrh	r3, [r3, r2]
 8005392:	b29b      	uxth	r3, r3
 8005394:	001a      	movs	r2, r3
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	189b      	adds	r3, r3, r2
 800539a:	633b      	str	r3, [r7, #48]	; 0x30
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	00da      	lsls	r2, r3, #3
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	18d3      	adds	r3, r2, r3
 80053a6:	4a6e      	ldr	r2, [pc, #440]	; (8005560 <USB_EPStartXfer+0x3b8>)
 80053a8:	4694      	mov	ip, r2
 80053aa:	4463      	add	r3, ip
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ae:	1d7b      	adds	r3, r7, #5
 80053b0:	33ff      	adds	r3, #255	; 0xff
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053ba:	2076      	movs	r0, #118	; 0x76
 80053bc:	183b      	adds	r3, r7, r0
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	8952      	ldrh	r2, [r2, #10]
 80053c2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6959      	ldr	r1, [r3, #20]
 80053c8:	1d7b      	adds	r3, r7, #5
 80053ca:	33ff      	adds	r3, #255	; 0xff
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	b29c      	uxth	r4, r3
 80053d0:	183b      	adds	r3, r7, r0
 80053d2:	881a      	ldrh	r2, [r3, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	0023      	movs	r3, r4
 80053d8:	f001 f8f6 	bl	80065c8 <USB_WritePMA>
            ep->xfer_buff += len;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	1d7b      	adds	r3, r7, #5
 80053e2:	33ff      	adds	r3, #255	; 0xff
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	18d2      	adds	r2, r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d908      	bls.n	800540a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	1d7b      	adds	r3, r7, #5
 80053fe:	33ff      	adds	r3, #255	; 0xff
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	1ad2      	subs	r2, r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	621a      	str	r2, [r3, #32]
 8005408:	e007      	b.n	800541a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	1d7a      	adds	r2, r7, #5
 8005410:	32ff      	adds	r2, #255	; 0xff
 8005412:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2200      	movs	r2, #0
 8005418:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d168      	bne.n	80054f4 <USB_EPStartXfer+0x34c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2250      	movs	r2, #80	; 0x50
 800542a:	5a9b      	ldrh	r3, [r3, r2]
 800542c:	b29b      	uxth	r3, r3
 800542e:	001a      	movs	r2, r3
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	189b      	adds	r3, r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	00da      	lsls	r2, r3, #3
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	18d3      	adds	r3, r2, r3
 8005440:	4a44      	ldr	r2, [pc, #272]	; (8005554 <USB_EPStartXfer+0x3ac>)
 8005442:	4694      	mov	ip, r2
 8005444:	4463      	add	r3, ip
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	1d7b      	adds	r3, r7, #5
 800544a:	33ff      	adds	r3, #255	; 0xff
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d110      	bne.n	8005474 <USB_EPStartXfer+0x2cc>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	4a42      	ldr	r2, [pc, #264]	; (8005564 <USB_EPStartXfer+0x3bc>)
 800545a:	4013      	ands	r3, r2
 800545c:	b29a      	uxth	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	4a3f      	ldr	r2, [pc, #252]	; (8005568 <USB_EPStartXfer+0x3c0>)
 800546a:	4313      	orrs	r3, r2
 800546c:	b29a      	uxth	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e05c      	b.n	800552e <USB_EPStartXfer+0x386>
 8005474:	1d7b      	adds	r3, r7, #5
 8005476:	33ff      	adds	r3, #255	; 0xff
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b3e      	cmp	r3, #62	; 0x3e
 800547c:	d81b      	bhi.n	80054b6 <USB_EPStartXfer+0x30e>
 800547e:	1d7b      	adds	r3, r7, #5
 8005480:	33ff      	adds	r3, #255	; 0xff
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	22fc      	movs	r2, #252	; 0xfc
 8005488:	18ba      	adds	r2, r7, r2
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	1d7b      	adds	r3, r7, #5
 800548e:	33ff      	adds	r3, #255	; 0xff
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2201      	movs	r2, #1
 8005494:	4013      	ands	r3, r2
 8005496:	d005      	beq.n	80054a4 <USB_EPStartXfer+0x2fc>
 8005498:	22fc      	movs	r2, #252	; 0xfc
 800549a:	18bb      	adds	r3, r7, r2
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3301      	adds	r3, #1
 80054a0:	18ba      	adds	r2, r7, r2
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	23fc      	movs	r3, #252	; 0xfc
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e03b      	b.n	800552e <USB_EPStartXfer+0x386>
 80054b6:	1d7b      	adds	r3, r7, #5
 80054b8:	33ff      	adds	r3, #255	; 0xff
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	22fc      	movs	r2, #252	; 0xfc
 80054c0:	18ba      	adds	r2, r7, r2
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	1d7b      	adds	r3, r7, #5
 80054c6:	33ff      	adds	r3, #255	; 0xff
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	221f      	movs	r2, #31
 80054cc:	4013      	ands	r3, r2
 80054ce:	d105      	bne.n	80054dc <USB_EPStartXfer+0x334>
 80054d0:	22fc      	movs	r2, #252	; 0xfc
 80054d2:	18bb      	adds	r3, r7, r2
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	18ba      	adds	r2, r7, r2
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	23fc      	movs	r3, #252	; 0xfc
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <USB_EPStartXfer+0x3c0>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e01c      	b.n	800552e <USB_EPStartXfer+0x386>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d118      	bne.n	800552e <USB_EPStartXfer+0x386>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2250      	movs	r2, #80	; 0x50
 8005504:	5a9b      	ldrh	r3, [r3, r2]
 8005506:	b29b      	uxth	r3, r3
 8005508:	001a      	movs	r2, r3
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	189b      	adds	r3, r3, r2
 800550e:	623b      	str	r3, [r7, #32]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	00da      	lsls	r2, r3, #3
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	18d3      	adds	r3, r2, r3
 800551a:	4a0e      	ldr	r2, [pc, #56]	; (8005554 <USB_EPStartXfer+0x3ac>)
 800551c:	4694      	mov	ip, r2
 800551e:	4463      	add	r3, ip
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	1d7b      	adds	r3, r7, #5
 8005524:	33ff      	adds	r3, #255	; 0xff
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b29a      	uxth	r2, r3
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800552e:	2076      	movs	r0, #118	; 0x76
 8005530:	183b      	adds	r3, r7, r0
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	8912      	ldrh	r2, [r2, #8]
 8005536:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6959      	ldr	r1, [r3, #20]
 800553c:	1d7b      	adds	r3, r7, #5
 800553e:	33ff      	adds	r3, #255	; 0xff
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b29c      	uxth	r4, r3
 8005544:	183b      	adds	r3, r7, r0
 8005546:	881a      	ldrh	r2, [r3, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	0023      	movs	r3, r4
 800554c:	f001 f83c 	bl	80065c8 <USB_WritePMA>
 8005550:	e309      	b.n	8005b66 <USB_EPStartXfer+0x9be>
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	00000402 	.word	0x00000402
 8005558:	ffff8f8f 	.word	0xffff8f8f
 800555c:	ffff8180 	.word	0xffff8180
 8005560:	00000406 	.word	0x00000406
 8005564:	ffff83ff 	.word	0xffff83ff
 8005568:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d168      	bne.n	8005646 <USB_EPStartXfer+0x49e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	64bb      	str	r3, [r7, #72]	; 0x48
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2250      	movs	r2, #80	; 0x50
 800557c:	5a9b      	ldrh	r3, [r3, r2]
 800557e:	b29b      	uxth	r3, r3
 8005580:	001a      	movs	r2, r3
 8005582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005584:	189b      	adds	r3, r3, r2
 8005586:	64bb      	str	r3, [r7, #72]	; 0x48
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	00da      	lsls	r2, r3, #3
 800558e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005590:	18d3      	adds	r3, r2, r3
 8005592:	4ac5      	ldr	r2, [pc, #788]	; (80058a8 <USB_EPStartXfer+0x700>)
 8005594:	4694      	mov	ip, r2
 8005596:	4463      	add	r3, ip
 8005598:	647b      	str	r3, [r7, #68]	; 0x44
 800559a:	1d7b      	adds	r3, r7, #5
 800559c:	33ff      	adds	r3, #255	; 0xff
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d110      	bne.n	80055c6 <USB_EPStartXfer+0x41e>
 80055a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	4ac0      	ldr	r2, [pc, #768]	; (80058ac <USB_EPStartXfer+0x704>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	4abd      	ldr	r2, [pc, #756]	; (80058b0 <USB_EPStartXfer+0x708>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e05c      	b.n	8005680 <USB_EPStartXfer+0x4d8>
 80055c6:	1d7b      	adds	r3, r7, #5
 80055c8:	33ff      	adds	r3, #255	; 0xff
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b3e      	cmp	r3, #62	; 0x3e
 80055ce:	d81b      	bhi.n	8005608 <USB_EPStartXfer+0x460>
 80055d0:	1d7b      	adds	r3, r7, #5
 80055d2:	33ff      	adds	r3, #255	; 0xff
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	22f8      	movs	r2, #248	; 0xf8
 80055da:	18ba      	adds	r2, r7, r2
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	1d7b      	adds	r3, r7, #5
 80055e0:	33ff      	adds	r3, #255	; 0xff
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2201      	movs	r2, #1
 80055e6:	4013      	ands	r3, r2
 80055e8:	d005      	beq.n	80055f6 <USB_EPStartXfer+0x44e>
 80055ea:	22f8      	movs	r2, #248	; 0xf8
 80055ec:	18bb      	adds	r3, r7, r2
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3301      	adds	r3, #1
 80055f2:	18ba      	adds	r2, r7, r2
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	23f8      	movs	r3, #248	; 0xf8
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	029b      	lsls	r3, r3, #10
 8005600:	b29a      	uxth	r2, r3
 8005602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	e03b      	b.n	8005680 <USB_EPStartXfer+0x4d8>
 8005608:	1d7b      	adds	r3, r7, #5
 800560a:	33ff      	adds	r3, #255	; 0xff
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	22f8      	movs	r2, #248	; 0xf8
 8005612:	18ba      	adds	r2, r7, r2
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	1d7b      	adds	r3, r7, #5
 8005618:	33ff      	adds	r3, #255	; 0xff
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	221f      	movs	r2, #31
 800561e:	4013      	ands	r3, r2
 8005620:	d105      	bne.n	800562e <USB_EPStartXfer+0x486>
 8005622:	22f8      	movs	r2, #248	; 0xf8
 8005624:	18bb      	adds	r3, r7, r2
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3b01      	subs	r3, #1
 800562a:	18ba      	adds	r2, r7, r2
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	23f8      	movs	r3, #248	; 0xf8
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	029b      	lsls	r3, r3, #10
 8005638:	b29b      	uxth	r3, r3
 800563a:	4a9d      	ldr	r2, [pc, #628]	; (80058b0 <USB_EPStartXfer+0x708>)
 800563c:	4313      	orrs	r3, r2
 800563e:	b29a      	uxth	r2, r3
 8005640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	e01c      	b.n	8005680 <USB_EPStartXfer+0x4d8>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d118      	bne.n	8005680 <USB_EPStartXfer+0x4d8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	653b      	str	r3, [r7, #80]	; 0x50
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2250      	movs	r2, #80	; 0x50
 8005656:	5a9b      	ldrh	r3, [r3, r2]
 8005658:	b29b      	uxth	r3, r3
 800565a:	001a      	movs	r2, r3
 800565c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800565e:	189b      	adds	r3, r3, r2
 8005660:	653b      	str	r3, [r7, #80]	; 0x50
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	00da      	lsls	r2, r3, #3
 8005668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566a:	18d3      	adds	r3, r2, r3
 800566c:	4a8e      	ldr	r2, [pc, #568]	; (80058a8 <USB_EPStartXfer+0x700>)
 800566e:	4694      	mov	ip, r2
 8005670:	4463      	add	r3, ip
 8005672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005674:	1d7b      	adds	r3, r7, #5
 8005676:	33ff      	adds	r3, #255	; 0xff
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	b29a      	uxth	r2, r3
 800567c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005680:	2076      	movs	r0, #118	; 0x76
 8005682:	183b      	adds	r3, r7, r0
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	8912      	ldrh	r2, [r2, #8]
 8005688:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	1d7b      	adds	r3, r7, #5
 8005690:	33ff      	adds	r3, #255	; 0xff
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	b29c      	uxth	r4, r3
 8005696:	183b      	adds	r3, r7, r0
 8005698:	881a      	ldrh	r2, [r3, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	0023      	movs	r3, r4
 800569e:	f000 ff93 	bl	80065c8 <USB_WritePMA>
            ep->xfer_buff += len;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	1d7b      	adds	r3, r7, #5
 80056a8:	33ff      	adds	r3, #255	; 0xff
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	18d2      	adds	r2, r2, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d908      	bls.n	80056d0 <USB_EPStartXfer+0x528>
            {
              ep->xfer_len_db -= len;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6a1a      	ldr	r2, [r3, #32]
 80056c2:	1d7b      	adds	r3, r7, #5
 80056c4:	33ff      	adds	r3, #255	; 0xff
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	621a      	str	r2, [r3, #32]
 80056ce:	e007      	b.n	80056e0 <USB_EPStartXfer+0x538>
            }
            else
            {
              len = ep->xfer_len_db;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	1d7a      	adds	r2, r7, #5
 80056d6:	32ff      	adds	r2, #255	; 0xff
 80056d8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2200      	movs	r2, #0
 80056de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d168      	bne.n	80057be <USB_EPStartXfer+0x616>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2250      	movs	r2, #80	; 0x50
 80056f4:	5a9b      	ldrh	r3, [r3, r2]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	001a      	movs	r2, r3
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	189b      	adds	r3, r3, r2
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	00da      	lsls	r2, r3, #3
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	4a6a      	ldr	r2, [pc, #424]	; (80058b4 <USB_EPStartXfer+0x70c>)
 800570c:	4694      	mov	ip, r2
 800570e:	4463      	add	r3, ip
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
 8005712:	1d7b      	adds	r3, r7, #5
 8005714:	33ff      	adds	r3, #255	; 0xff
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d110      	bne.n	800573e <USB_EPStartXfer+0x596>
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	4a62      	ldr	r2, [pc, #392]	; (80058ac <USB_EPStartXfer+0x704>)
 8005724:	4013      	ands	r3, r2
 8005726:	b29a      	uxth	r2, r3
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	4a5f      	ldr	r2, [pc, #380]	; (80058b0 <USB_EPStartXfer+0x708>)
 8005734:	4313      	orrs	r3, r2
 8005736:	b29a      	uxth	r2, r3
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	e05a      	b.n	80057f4 <USB_EPStartXfer+0x64c>
 800573e:	1d7b      	adds	r3, r7, #5
 8005740:	33ff      	adds	r3, #255	; 0xff
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b3e      	cmp	r3, #62	; 0x3e
 8005746:	d81b      	bhi.n	8005780 <USB_EPStartXfer+0x5d8>
 8005748:	1d7b      	adds	r3, r7, #5
 800574a:	33ff      	adds	r3, #255	; 0xff
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	085b      	lsrs	r3, r3, #1
 8005750:	22f4      	movs	r2, #244	; 0xf4
 8005752:	18ba      	adds	r2, r7, r2
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	1d7b      	adds	r3, r7, #5
 8005758:	33ff      	adds	r3, #255	; 0xff
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2201      	movs	r2, #1
 800575e:	4013      	ands	r3, r2
 8005760:	d005      	beq.n	800576e <USB_EPStartXfer+0x5c6>
 8005762:	22f4      	movs	r2, #244	; 0xf4
 8005764:	18bb      	adds	r3, r7, r2
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	18ba      	adds	r2, r7, r2
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	23f4      	movs	r3, #244	; 0xf4
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	b29a      	uxth	r2, r3
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	e039      	b.n	80057f4 <USB_EPStartXfer+0x64c>
 8005780:	1d7b      	adds	r3, r7, #5
 8005782:	33ff      	adds	r3, #255	; 0xff
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	22f4      	movs	r2, #244	; 0xf4
 800578a:	18ba      	adds	r2, r7, r2
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	1d7b      	adds	r3, r7, #5
 8005790:	33ff      	adds	r3, #255	; 0xff
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	221f      	movs	r2, #31
 8005796:	4013      	ands	r3, r2
 8005798:	d105      	bne.n	80057a6 <USB_EPStartXfer+0x5fe>
 800579a:	22f4      	movs	r2, #244	; 0xf4
 800579c:	18bb      	adds	r3, r7, r2
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	18ba      	adds	r2, r7, r2
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	23f4      	movs	r3, #244	; 0xf4
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	4a3f      	ldr	r2, [pc, #252]	; (80058b0 <USB_EPStartXfer+0x708>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	801a      	strh	r2, [r3, #0]
 80057bc:	e01a      	b.n	80057f4 <USB_EPStartXfer+0x64c>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d116      	bne.n	80057f4 <USB_EPStartXfer+0x64c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2250      	movs	r2, #80	; 0x50
 80057ca:	5a9b      	ldrh	r3, [r3, r2]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	001a      	movs	r2, r3
 80057d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	643b      	str	r3, [r7, #64]	; 0x40
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	00da      	lsls	r2, r3, #3
 80057dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057de:	18d3      	adds	r3, r2, r3
 80057e0:	4a34      	ldr	r2, [pc, #208]	; (80058b4 <USB_EPStartXfer+0x70c>)
 80057e2:	4694      	mov	ip, r2
 80057e4:	4463      	add	r3, ip
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e8:	1d7b      	adds	r3, r7, #5
 80057ea:	33ff      	adds	r3, #255	; 0xff
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057f4:	2076      	movs	r0, #118	; 0x76
 80057f6:	183b      	adds	r3, r7, r0
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	8952      	ldrh	r2, [r2, #10]
 80057fc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6959      	ldr	r1, [r3, #20]
 8005802:	1d7b      	adds	r3, r7, #5
 8005804:	33ff      	adds	r3, #255	; 0xff
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	b29c      	uxth	r4, r3
 800580a:	183b      	adds	r3, r7, r0
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	0023      	movs	r3, r4
 8005812:	f000 fed9 	bl	80065c8 <USB_WritePMA>
 8005816:	e1a6      	b.n	8005b66 <USB_EPStartXfer+0x9be>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	1d7a      	adds	r2, r7, #5
 800581e:	32ff      	adds	r2, #255	; 0xff
 8005820:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	18d3      	adds	r3, r2, r3
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29a      	uxth	r2, r3
 8005830:	2062      	movs	r0, #98	; 0x62
 8005832:	183b      	adds	r3, r7, r0
 8005834:	4920      	ldr	r1, [pc, #128]	; (80058b8 <USB_EPStartXfer+0x710>)
 8005836:	400a      	ands	r2, r1
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	18d3      	adds	r3, r2, r3
 8005844:	183a      	adds	r2, r7, r0
 8005846:	8812      	ldrh	r2, [r2, #0]
 8005848:	491c      	ldr	r1, [pc, #112]	; (80058bc <USB_EPStartXfer+0x714>)
 800584a:	430a      	orrs	r2, r1
 800584c:	b292      	uxth	r2, r2
 800584e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2250      	movs	r2, #80	; 0x50
 8005858:	5a9b      	ldrh	r3, [r3, r2]
 800585a:	b29b      	uxth	r3, r3
 800585c:	001a      	movs	r2, r3
 800585e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005860:	189b      	adds	r3, r3, r2
 8005862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	00da      	lsls	r2, r3, #3
 800586a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800586c:	18d3      	adds	r3, r2, r3
 800586e:	4a0e      	ldr	r2, [pc, #56]	; (80058a8 <USB_EPStartXfer+0x700>)
 8005870:	4694      	mov	ip, r2
 8005872:	4463      	add	r3, ip
 8005874:	65bb      	str	r3, [r7, #88]	; 0x58
 8005876:	1d7b      	adds	r3, r7, #5
 8005878:	33ff      	adds	r3, #255	; 0xff
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	b29a      	uxth	r2, r3
 800587e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005880:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005882:	2076      	movs	r0, #118	; 0x76
 8005884:	183b      	adds	r3, r7, r0
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	8912      	ldrh	r2, [r2, #8]
 800588a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6959      	ldr	r1, [r3, #20]
 8005890:	1d7b      	adds	r3, r7, #5
 8005892:	33ff      	adds	r3, #255	; 0xff
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	b29c      	uxth	r4, r3
 8005898:	183b      	adds	r3, r7, r0
 800589a:	881a      	ldrh	r2, [r3, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	0023      	movs	r3, r4
 80058a0:	f000 fe92 	bl	80065c8 <USB_WritePMA>
 80058a4:	e15f      	b.n	8005b66 <USB_EPStartXfer+0x9be>
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	00000402 	.word	0x00000402
 80058ac:	ffff83ff 	.word	0xffff83ff
 80058b0:	ffff8000 	.word	0xffff8000
 80058b4:	00000406 	.word	0x00000406
 80058b8:	ffff8e8f 	.word	0xffff8e8f
 80058bc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6a1a      	ldr	r2, [r3, #32]
 80058c4:	1d7b      	adds	r3, r7, #5
 80058c6:	33ff      	adds	r3, #255	; 0xff
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	18d3      	adds	r3, r2, r3
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	001a      	movs	r2, r3
 80058e0:	2340      	movs	r3, #64	; 0x40
 80058e2:	4013      	ands	r3, r2
 80058e4:	d100      	bne.n	80058e8 <USB_EPStartXfer+0x740>
 80058e6:	e09b      	b.n	8005a20 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	673b      	str	r3, [r7, #112]	; 0x70
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d168      	bne.n	80059c6 <USB_EPStartXfer+0x81e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2250      	movs	r2, #80	; 0x50
 80058fc:	5a9b      	ldrh	r3, [r3, r2]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	001a      	movs	r2, r3
 8005902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005904:	189b      	adds	r3, r3, r2
 8005906:	66bb      	str	r3, [r7, #104]	; 0x68
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	00da      	lsls	r2, r3, #3
 800590e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005910:	18d3      	adds	r3, r2, r3
 8005912:	4ad2      	ldr	r2, [pc, #840]	; (8005c5c <USB_EPStartXfer+0xab4>)
 8005914:	4694      	mov	ip, r2
 8005916:	4463      	add	r3, ip
 8005918:	667b      	str	r3, [r7, #100]	; 0x64
 800591a:	1d7b      	adds	r3, r7, #5
 800591c:	33ff      	adds	r3, #255	; 0xff
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d110      	bne.n	8005946 <USB_EPStartXfer+0x79e>
 8005924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	4acd      	ldr	r2, [pc, #820]	; (8005c60 <USB_EPStartXfer+0xab8>)
 800592c:	4013      	ands	r3, r2
 800592e:	b29a      	uxth	r2, r3
 8005930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	4aca      	ldr	r2, [pc, #808]	; (8005c64 <USB_EPStartXfer+0xabc>)
 800593c:	4313      	orrs	r3, r2
 800593e:	b29a      	uxth	r2, r3
 8005940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e05a      	b.n	80059fc <USB_EPStartXfer+0x854>
 8005946:	1d7b      	adds	r3, r7, #5
 8005948:	33ff      	adds	r3, #255	; 0xff
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b3e      	cmp	r3, #62	; 0x3e
 800594e:	d81b      	bhi.n	8005988 <USB_EPStartXfer+0x7e0>
 8005950:	1d7b      	adds	r3, r7, #5
 8005952:	33ff      	adds	r3, #255	; 0xff
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	22f0      	movs	r2, #240	; 0xf0
 800595a:	18ba      	adds	r2, r7, r2
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	1d7b      	adds	r3, r7, #5
 8005960:	33ff      	adds	r3, #255	; 0xff
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2201      	movs	r2, #1
 8005966:	4013      	ands	r3, r2
 8005968:	d005      	beq.n	8005976 <USB_EPStartXfer+0x7ce>
 800596a:	22f0      	movs	r2, #240	; 0xf0
 800596c:	18bb      	adds	r3, r7, r2
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	18ba      	adds	r2, r7, r2
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	23f0      	movs	r3, #240	; 0xf0
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	029b      	lsls	r3, r3, #10
 8005980:	b29a      	uxth	r2, r3
 8005982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e039      	b.n	80059fc <USB_EPStartXfer+0x854>
 8005988:	1d7b      	adds	r3, r7, #5
 800598a:	33ff      	adds	r3, #255	; 0xff
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	22f0      	movs	r2, #240	; 0xf0
 8005992:	18ba      	adds	r2, r7, r2
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	1d7b      	adds	r3, r7, #5
 8005998:	33ff      	adds	r3, #255	; 0xff
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	221f      	movs	r2, #31
 800599e:	4013      	ands	r3, r2
 80059a0:	d105      	bne.n	80059ae <USB_EPStartXfer+0x806>
 80059a2:	22f0      	movs	r2, #240	; 0xf0
 80059a4:	18bb      	adds	r3, r7, r2
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	18ba      	adds	r2, r7, r2
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	23f0      	movs	r3, #240	; 0xf0
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	029b      	lsls	r3, r3, #10
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	4aaa      	ldr	r2, [pc, #680]	; (8005c64 <USB_EPStartXfer+0xabc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e01a      	b.n	80059fc <USB_EPStartXfer+0x854>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d116      	bne.n	80059fc <USB_EPStartXfer+0x854>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2250      	movs	r2, #80	; 0x50
 80059d2:	5a9b      	ldrh	r3, [r3, r2]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	001a      	movs	r2, r3
 80059d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	673b      	str	r3, [r7, #112]	; 0x70
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	00da      	lsls	r2, r3, #3
 80059e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e6:	18d3      	adds	r3, r2, r3
 80059e8:	4a9c      	ldr	r2, [pc, #624]	; (8005c5c <USB_EPStartXfer+0xab4>)
 80059ea:	4694      	mov	ip, r2
 80059ec:	4463      	add	r3, ip
 80059ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f0:	1d7b      	adds	r3, r7, #5
 80059f2:	33ff      	adds	r3, #255	; 0xff
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059fc:	2076      	movs	r0, #118	; 0x76
 80059fe:	183b      	adds	r3, r7, r0
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	8952      	ldrh	r2, [r2, #10]
 8005a04:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6959      	ldr	r1, [r3, #20]
 8005a0a:	1d7b      	adds	r3, r7, #5
 8005a0c:	33ff      	adds	r3, #255	; 0xff
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	b29c      	uxth	r4, r3
 8005a12:	183b      	adds	r3, r7, r0
 8005a14:	881a      	ldrh	r2, [r3, #0]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	0023      	movs	r3, r4
 8005a1a:	f000 fdd5 	bl	80065c8 <USB_WritePMA>
 8005a1e:	e0a2      	b.n	8005b66 <USB_EPStartXfer+0x9be>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d168      	bne.n	8005afa <USB_EPStartXfer+0x952>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2250      	movs	r2, #80	; 0x50
 8005a30:	5a9b      	ldrh	r3, [r3, r2]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	001a      	movs	r2, r3
 8005a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a38:	189b      	adds	r3, r3, r2
 8005a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	00da      	lsls	r2, r3, #3
 8005a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a44:	18d3      	adds	r3, r2, r3
 8005a46:	4a88      	ldr	r2, [pc, #544]	; (8005c68 <USB_EPStartXfer+0xac0>)
 8005a48:	4694      	mov	ip, r2
 8005a4a:	4463      	add	r3, ip
 8005a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a4e:	1d7b      	adds	r3, r7, #5
 8005a50:	33ff      	adds	r3, #255	; 0xff
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d110      	bne.n	8005a7a <USB_EPStartXfer+0x8d2>
 8005a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4a80      	ldr	r2, [pc, #512]	; (8005c60 <USB_EPStartXfer+0xab8>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4a7d      	ldr	r2, [pc, #500]	; (8005c64 <USB_EPStartXfer+0xabc>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	e064      	b.n	8005b44 <USB_EPStartXfer+0x99c>
 8005a7a:	1d7b      	adds	r3, r7, #5
 8005a7c:	33ff      	adds	r3, #255	; 0xff
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b3e      	cmp	r3, #62	; 0x3e
 8005a82:	d81b      	bhi.n	8005abc <USB_EPStartXfer+0x914>
 8005a84:	1d7b      	adds	r3, r7, #5
 8005a86:	33ff      	adds	r3, #255	; 0xff
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	22ec      	movs	r2, #236	; 0xec
 8005a8e:	18ba      	adds	r2, r7, r2
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	1d7b      	adds	r3, r7, #5
 8005a94:	33ff      	adds	r3, #255	; 0xff
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d005      	beq.n	8005aaa <USB_EPStartXfer+0x902>
 8005a9e:	22ec      	movs	r2, #236	; 0xec
 8005aa0:	18bb      	adds	r3, r7, r2
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	18ba      	adds	r2, r7, r2
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	23ec      	movs	r3, #236	; 0xec
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	029b      	lsls	r3, r3, #10
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	e043      	b.n	8005b44 <USB_EPStartXfer+0x99c>
 8005abc:	1d7b      	adds	r3, r7, #5
 8005abe:	33ff      	adds	r3, #255	; 0xff
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	22ec      	movs	r2, #236	; 0xec
 8005ac6:	18ba      	adds	r2, r7, r2
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	1d7b      	adds	r3, r7, #5
 8005acc:	33ff      	adds	r3, #255	; 0xff
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	221f      	movs	r2, #31
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d105      	bne.n	8005ae2 <USB_EPStartXfer+0x93a>
 8005ad6:	22ec      	movs	r2, #236	; 0xec
 8005ad8:	18bb      	adds	r3, r7, r2
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	18ba      	adds	r2, r7, r2
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	23ec      	movs	r3, #236	; 0xec
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	029b      	lsls	r3, r3, #10
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4a5d      	ldr	r2, [pc, #372]	; (8005c64 <USB_EPStartXfer+0xabc>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af6:	801a      	strh	r2, [r3, #0]
 8005af8:	e024      	b.n	8005b44 <USB_EPStartXfer+0x99c>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d120      	bne.n	8005b44 <USB_EPStartXfer+0x99c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2184      	movs	r1, #132	; 0x84
 8005b06:	187a      	adds	r2, r7, r1
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2250      	movs	r2, #80	; 0x50
 8005b0e:	5a9b      	ldrh	r3, [r3, r2]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	001a      	movs	r2, r3
 8005b14:	187b      	adds	r3, r7, r1
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	189b      	adds	r3, r3, r2
 8005b1a:	187a      	adds	r2, r7, r1
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	00da      	lsls	r2, r3, #3
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	18d3      	adds	r3, r2, r3
 8005b2a:	4a4f      	ldr	r2, [pc, #316]	; (8005c68 <USB_EPStartXfer+0xac0>)
 8005b2c:	4694      	mov	ip, r2
 8005b2e:	4463      	add	r3, ip
 8005b30:	2180      	movs	r1, #128	; 0x80
 8005b32:	187a      	adds	r2, r7, r1
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	1d7b      	adds	r3, r7, #5
 8005b38:	33ff      	adds	r3, #255	; 0xff
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	187b      	adds	r3, r7, r1
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b44:	2076      	movs	r0, #118	; 0x76
 8005b46:	183b      	adds	r3, r7, r0
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	8912      	ldrh	r2, [r2, #8]
 8005b4c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6959      	ldr	r1, [r3, #20]
 8005b52:	1d7b      	adds	r3, r7, #5
 8005b54:	33ff      	adds	r3, #255	; 0xff
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	b29c      	uxth	r4, r3
 8005b5a:	183b      	adds	r3, r7, r0
 8005b5c:	881a      	ldrh	r2, [r3, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	0023      	movs	r3, r4
 8005b62:	f000 fd31 	bl	80065c8 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	18d3      	adds	r3, r2, r3
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	200a      	movs	r0, #10
 8005b76:	183b      	adds	r3, r7, r0
 8005b78:	493c      	ldr	r1, [pc, #240]	; (8005c6c <USB_EPStartXfer+0xac4>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	183b      	adds	r3, r7, r0
 8005b80:	183a      	adds	r2, r7, r0
 8005b82:	8812      	ldrh	r2, [r2, #0]
 8005b84:	2110      	movs	r1, #16
 8005b86:	404a      	eors	r2, r1
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	183b      	adds	r3, r7, r0
 8005b8c:	183a      	adds	r2, r7, r0
 8005b8e:	8812      	ldrh	r2, [r2, #0]
 8005b90:	2120      	movs	r1, #32
 8005b92:	404a      	eors	r2, r1
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	18d3      	adds	r3, r2, r3
 8005ba0:	183a      	adds	r2, r7, r0
 8005ba2:	8812      	ldrh	r2, [r2, #0]
 8005ba4:	4932      	ldr	r1, [pc, #200]	; (8005c70 <USB_EPStartXfer+0xac8>)
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	b292      	uxth	r2, r2
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	f000 fbc1 	bl	8006332 <USB_EPStartXfer+0x118a>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	7b1b      	ldrb	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d000      	beq.n	8005bba <USB_EPStartXfer+0xa12>
 8005bb8:	e0a0      	b.n	8005cfc <USB_EPStartXfer+0xb54>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d90d      	bls.n	8005be2 <USB_EPStartXfer+0xa3a>
      {
        len = ep->maxpacket;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	1d7a      	adds	r2, r7, #5
 8005bcc:	32ff      	adds	r2, #255	; 0xff
 8005bce:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	699a      	ldr	r2, [r3, #24]
 8005bd4:	1d7b      	adds	r3, r7, #5
 8005bd6:	33ff      	adds	r3, #255	; 0xff
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	1ad2      	subs	r2, r2, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	619a      	str	r2, [r3, #24]
 8005be0:	e007      	b.n	8005bf2 <USB_EPStartXfer+0xa4a>
      }
      else
      {
        len = ep->xfer_len;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	1d7a      	adds	r2, r7, #5
 8005be8:	32ff      	adds	r2, #255	; 0xff
 8005bea:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2190      	movs	r1, #144	; 0x90
 8005bf6:	187a      	adds	r2, r7, r1
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2250      	movs	r2, #80	; 0x50
 8005bfe:	5a9b      	ldrh	r3, [r3, r2]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	001a      	movs	r2, r3
 8005c04:	187b      	adds	r3, r7, r1
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	189b      	adds	r3, r3, r2
 8005c0a:	187a      	adds	r2, r7, r1
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	00da      	lsls	r2, r3, #3
 8005c14:	187b      	adds	r3, r7, r1
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	18d3      	adds	r3, r2, r3
 8005c1a:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <USB_EPStartXfer+0xab4>)
 8005c1c:	4694      	mov	ip, r2
 8005c1e:	4463      	add	r3, ip
 8005c20:	228c      	movs	r2, #140	; 0x8c
 8005c22:	18ba      	adds	r2, r7, r2
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	1d7b      	adds	r3, r7, #5
 8005c28:	33ff      	adds	r3, #255	; 0xff
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d121      	bne.n	8005c74 <USB_EPStartXfer+0xacc>
 8005c30:	218c      	movs	r1, #140	; 0x8c
 8005c32:	187b      	adds	r3, r7, r1
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <USB_EPStartXfer+0xab8>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	187b      	adds	r3, r7, r1
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	187b      	adds	r3, r7, r1
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	4a05      	ldr	r2, [pc, #20]	; (8005c64 <USB_EPStartXfer+0xabc>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	801a      	strh	r2, [r3, #0]
 8005c5a:	e345      	b.n	80062e8 <USB_EPStartXfer+0x1140>
 8005c5c:	00000406 	.word	0x00000406
 8005c60:	ffff83ff 	.word	0xffff83ff
 8005c64:	ffff8000 	.word	0xffff8000
 8005c68:	00000402 	.word	0x00000402
 8005c6c:	ffff8fbf 	.word	0xffff8fbf
 8005c70:	ffff8080 	.word	0xffff8080
 8005c74:	1d7b      	adds	r3, r7, #5
 8005c76:	33ff      	adds	r3, #255	; 0xff
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c7c:	d81d      	bhi.n	8005cba <USB_EPStartXfer+0xb12>
 8005c7e:	1d7b      	adds	r3, r7, #5
 8005c80:	33ff      	adds	r3, #255	; 0xff
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	22e8      	movs	r2, #232	; 0xe8
 8005c88:	18ba      	adds	r2, r7, r2
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	1d7b      	adds	r3, r7, #5
 8005c8e:	33ff      	adds	r3, #255	; 0xff
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2201      	movs	r2, #1
 8005c94:	4013      	ands	r3, r2
 8005c96:	d005      	beq.n	8005ca4 <USB_EPStartXfer+0xafc>
 8005c98:	22e8      	movs	r2, #232	; 0xe8
 8005c9a:	18bb      	adds	r3, r7, r2
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	18ba      	adds	r2, r7, r2
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	23e8      	movs	r3, #232	; 0xe8
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	238c      	movs	r3, #140	; 0x8c
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e316      	b.n	80062e8 <USB_EPStartXfer+0x1140>
 8005cba:	1d7b      	adds	r3, r7, #5
 8005cbc:	33ff      	adds	r3, #255	; 0xff
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	22e8      	movs	r2, #232	; 0xe8
 8005cc4:	18ba      	adds	r2, r7, r2
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	1d7b      	adds	r3, r7, #5
 8005cca:	33ff      	adds	r3, #255	; 0xff
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	221f      	movs	r2, #31
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d105      	bne.n	8005ce0 <USB_EPStartXfer+0xb38>
 8005cd4:	22e8      	movs	r2, #232	; 0xe8
 8005cd6:	18bb      	adds	r3, r7, r2
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	18ba      	adds	r2, r7, r2
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	23e8      	movs	r3, #232	; 0xe8
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	4acf      	ldr	r2, [pc, #828]	; (800602c <USB_EPStartXfer+0xe84>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	238c      	movs	r3, #140	; 0x8c
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e2f5      	b.n	80062e8 <USB_EPStartXfer+0x1140>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	78db      	ldrb	r3, [r3, #3]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d000      	beq.n	8005d06 <USB_EPStartXfer+0xb5e>
 8005d04:	e179      	b.n	8005ffa <USB_EPStartXfer+0xe52>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	785b      	ldrb	r3, [r3, #1]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d000      	beq.n	8005d10 <USB_EPStartXfer+0xb68>
 8005d0e:	e072      	b.n	8005df6 <USB_EPStartXfer+0xc4e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	21ac      	movs	r1, #172	; 0xac
 8005d14:	187a      	adds	r2, r7, r1
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2250      	movs	r2, #80	; 0x50
 8005d1c:	5a9b      	ldrh	r3, [r3, r2]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	001a      	movs	r2, r3
 8005d22:	187b      	adds	r3, r7, r1
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	189b      	adds	r3, r3, r2
 8005d28:	187a      	adds	r2, r7, r1
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	00da      	lsls	r2, r3, #3
 8005d32:	187b      	adds	r3, r7, r1
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	18d3      	adds	r3, r2, r3
 8005d38:	4abd      	ldr	r2, [pc, #756]	; (8006030 <USB_EPStartXfer+0xe88>)
 8005d3a:	4694      	mov	ip, r2
 8005d3c:	4463      	add	r3, ip
 8005d3e:	22a8      	movs	r2, #168	; 0xa8
 8005d40:	18ba      	adds	r2, r7, r2
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d115      	bne.n	8005d78 <USB_EPStartXfer+0xbd0>
 8005d4c:	21a8      	movs	r1, #168	; 0xa8
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	4ab7      	ldr	r2, [pc, #732]	; (8006034 <USB_EPStartXfer+0xe8c>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	187b      	adds	r3, r7, r1
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	187b      	adds	r3, r7, r1
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	4ab0      	ldr	r2, [pc, #704]	; (800602c <USB_EPStartXfer+0xe84>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	187b      	adds	r3, r7, r1
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e062      	b.n	8005e3e <USB_EPStartXfer+0xc96>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7e:	d81b      	bhi.n	8005db8 <USB_EPStartXfer+0xc10>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	22e4      	movs	r2, #228	; 0xe4
 8005d88:	18ba      	adds	r2, r7, r2
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2201      	movs	r2, #1
 8005d92:	4013      	ands	r3, r2
 8005d94:	d005      	beq.n	8005da2 <USB_EPStartXfer+0xbfa>
 8005d96:	22e4      	movs	r2, #228	; 0xe4
 8005d98:	18bb      	adds	r3, r7, r2
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	18ba      	adds	r2, r7, r2
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	23e4      	movs	r3, #228	; 0xe4
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	029b      	lsls	r3, r3, #10
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	23a8      	movs	r3, #168	; 0xa8
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e042      	b.n	8005e3e <USB_EPStartXfer+0xc96>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	22e4      	movs	r2, #228	; 0xe4
 8005dc0:	18ba      	adds	r2, r7, r2
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	221f      	movs	r2, #31
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d105      	bne.n	8005dda <USB_EPStartXfer+0xc32>
 8005dce:	22e4      	movs	r2, #228	; 0xe4
 8005dd0:	18bb      	adds	r3, r7, r2
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	18ba      	adds	r2, r7, r2
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	23e4      	movs	r3, #228	; 0xe4
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	029b      	lsls	r3, r3, #10
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4a91      	ldr	r2, [pc, #580]	; (800602c <USB_EPStartXfer+0xe84>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	23a8      	movs	r3, #168	; 0xa8
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	e023      	b.n	8005e3e <USB_EPStartXfer+0xc96>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d11f      	bne.n	8005e3e <USB_EPStartXfer+0xc96>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	21b4      	movs	r1, #180	; 0xb4
 8005e02:	187a      	adds	r2, r7, r1
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2250      	movs	r2, #80	; 0x50
 8005e0a:	5a9b      	ldrh	r3, [r3, r2]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	001a      	movs	r2, r3
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	189b      	adds	r3, r3, r2
 8005e16:	187a      	adds	r2, r7, r1
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	00da      	lsls	r2, r3, #3
 8005e20:	187b      	adds	r3, r7, r1
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	18d3      	adds	r3, r2, r3
 8005e26:	4a82      	ldr	r2, [pc, #520]	; (8006030 <USB_EPStartXfer+0xe88>)
 8005e28:	4694      	mov	ip, r2
 8005e2a:	4463      	add	r3, ip
 8005e2c:	21b0      	movs	r1, #176	; 0xb0
 8005e2e:	187a      	adds	r2, r7, r1
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	187b      	adds	r3, r7, r1
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	22a4      	movs	r2, #164	; 0xa4
 8005e42:	18ba      	adds	r2, r7, r2
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d000      	beq.n	8005e50 <USB_EPStartXfer+0xca8>
 8005e4e:	e072      	b.n	8005f36 <USB_EPStartXfer+0xd8e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	219c      	movs	r1, #156	; 0x9c
 8005e54:	187a      	adds	r2, r7, r1
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2250      	movs	r2, #80	; 0x50
 8005e5c:	5a9b      	ldrh	r3, [r3, r2]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	001a      	movs	r2, r3
 8005e62:	187b      	adds	r3, r7, r1
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	189b      	adds	r3, r3, r2
 8005e68:	187a      	adds	r2, r7, r1
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	00da      	lsls	r2, r3, #3
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	18d3      	adds	r3, r2, r3
 8005e78:	4a6f      	ldr	r2, [pc, #444]	; (8006038 <USB_EPStartXfer+0xe90>)
 8005e7a:	4694      	mov	ip, r2
 8005e7c:	4463      	add	r3, ip
 8005e7e:	2298      	movs	r2, #152	; 0x98
 8005e80:	18ba      	adds	r2, r7, r2
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d115      	bne.n	8005eb8 <USB_EPStartXfer+0xd10>
 8005e8c:	2198      	movs	r1, #152	; 0x98
 8005e8e:	187b      	adds	r3, r7, r1
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	4a67      	ldr	r2, [pc, #412]	; (8006034 <USB_EPStartXfer+0xe8c>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	187b      	adds	r3, r7, r1
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	187b      	adds	r3, r7, r1
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	4a60      	ldr	r2, [pc, #384]	; (800602c <USB_EPStartXfer+0xe84>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	187b      	adds	r3, r7, r1
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e05f      	b.n	8005f78 <USB_EPStartXfer+0xdd0>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8005ebe:	d81b      	bhi.n	8005ef8 <USB_EPStartXfer+0xd50>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	22e0      	movs	r2, #224	; 0xe0
 8005ec8:	18ba      	adds	r2, r7, r2
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d005      	beq.n	8005ee2 <USB_EPStartXfer+0xd3a>
 8005ed6:	22e0      	movs	r2, #224	; 0xe0
 8005ed8:	18bb      	adds	r3, r7, r2
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	18ba      	adds	r2, r7, r2
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	23e0      	movs	r3, #224	; 0xe0
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	029b      	lsls	r3, r3, #10
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	2398      	movs	r3, #152	; 0x98
 8005ef0:	18fb      	adds	r3, r7, r3
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	e03f      	b.n	8005f78 <USB_EPStartXfer+0xdd0>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	22e0      	movs	r2, #224	; 0xe0
 8005f00:	18ba      	adds	r2, r7, r2
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	221f      	movs	r2, #31
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d105      	bne.n	8005f1a <USB_EPStartXfer+0xd72>
 8005f0e:	22e0      	movs	r2, #224	; 0xe0
 8005f10:	18bb      	adds	r3, r7, r2
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	18ba      	adds	r2, r7, r2
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	23e0      	movs	r3, #224	; 0xe0
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	029b      	lsls	r3, r3, #10
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	4a41      	ldr	r2, [pc, #260]	; (800602c <USB_EPStartXfer+0xe84>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	2398      	movs	r3, #152	; 0x98
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	e020      	b.n	8005f78 <USB_EPStartXfer+0xdd0>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d11c      	bne.n	8005f78 <USB_EPStartXfer+0xdd0>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2250      	movs	r2, #80	; 0x50
 8005f42:	5a9b      	ldrh	r3, [r3, r2]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	001a      	movs	r2, r3
 8005f48:	21a4      	movs	r1, #164	; 0xa4
 8005f4a:	187b      	adds	r3, r7, r1
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	187a      	adds	r2, r7, r1
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	00da      	lsls	r2, r3, #3
 8005f5a:	187b      	adds	r3, r7, r1
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	18d3      	adds	r3, r2, r3
 8005f60:	4a35      	ldr	r2, [pc, #212]	; (8006038 <USB_EPStartXfer+0xe90>)
 8005f62:	4694      	mov	ip, r2
 8005f64:	4463      	add	r3, ip
 8005f66:	21a0      	movs	r1, #160	; 0xa0
 8005f68:	187a      	adds	r2, r7, r1
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d100      	bne.n	8005f82 <USB_EPStartXfer+0xdda>
 8005f80:	e1b2      	b.n	80062e8 <USB_EPStartXfer+0x1140>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	18d2      	adds	r2, r2, r3
 8005f8c:	2196      	movs	r1, #150	; 0x96
 8005f8e:	187b      	adds	r3, r7, r1
 8005f90:	8812      	ldrh	r2, [r2, #0]
 8005f92:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f94:	187b      	adds	r3, r7, r1
 8005f96:	881a      	ldrh	r2, [r3, #0]
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	01db      	lsls	r3, r3, #7
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d005      	beq.n	8005fac <USB_EPStartXfer+0xe04>
 8005fa0:	2396      	movs	r3, #150	; 0x96
 8005fa2:	18fb      	adds	r3, r7, r3
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d10e      	bne.n	8005fca <USB_EPStartXfer+0xe22>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fac:	2396      	movs	r3, #150	; 0x96
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	881a      	ldrh	r2, [r3, #0]
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	01db      	lsls	r3, r3, #7
 8005fb6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fb8:	d000      	beq.n	8005fbc <USB_EPStartXfer+0xe14>
 8005fba:	e195      	b.n	80062e8 <USB_EPStartXfer+0x1140>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fbc:	2396      	movs	r3, #150	; 0x96
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d000      	beq.n	8005fca <USB_EPStartXfer+0xe22>
 8005fc8:	e18e      	b.n	80062e8 <USB_EPStartXfer+0x1140>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	18d3      	adds	r3, r2, r3
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	2094      	movs	r0, #148	; 0x94
 8005fda:	183b      	adds	r3, r7, r0
 8005fdc:	4917      	ldr	r1, [pc, #92]	; (800603c <USB_EPStartXfer+0xe94>)
 8005fde:	400a      	ands	r2, r1
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	18d3      	adds	r3, r2, r3
 8005fec:	183a      	adds	r2, r7, r0
 8005fee:	8812      	ldrh	r2, [r2, #0]
 8005ff0:	4913      	ldr	r1, [pc, #76]	; (8006040 <USB_EPStartXfer+0xe98>)
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e176      	b.n	80062e8 <USB_EPStartXfer+0x1140>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	78db      	ldrb	r3, [r3, #3]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d000      	beq.n	8006004 <USB_EPStartXfer+0xe5c>
 8006002:	e16f      	b.n	80062e4 <USB_EPStartXfer+0x113c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	699a      	ldr	r2, [r3, #24]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d919      	bls.n	8006044 <USB_EPStartXfer+0xe9c>
        {
          len = ep->maxpacket;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	1d7a      	adds	r2, r7, #5
 8006016:	32ff      	adds	r2, #255	; 0xff
 8006018:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	1d7b      	adds	r3, r7, #5
 8006020:	33ff      	adds	r3, #255	; 0xff
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	1ad2      	subs	r2, r2, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	619a      	str	r2, [r3, #24]
 800602a:	e013      	b.n	8006054 <USB_EPStartXfer+0xeac>
 800602c:	ffff8000 	.word	0xffff8000
 8006030:	00000402 	.word	0x00000402
 8006034:	ffff83ff 	.word	0xffff83ff
 8006038:	00000406 	.word	0x00000406
 800603c:	ffff8f8f 	.word	0xffff8f8f
 8006040:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	1d7a      	adds	r2, r7, #5
 800604a:	32ff      	adds	r2, #255	; 0xff
 800604c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2200      	movs	r2, #0
 8006052:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d000      	beq.n	800605e <USB_EPStartXfer+0xeb6>
 800605c:	e078      	b.n	8006150 <USB_EPStartXfer+0xfa8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	21cc      	movs	r1, #204	; 0xcc
 8006062:	187a      	adds	r2, r7, r1
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2250      	movs	r2, #80	; 0x50
 800606a:	5a9b      	ldrh	r3, [r3, r2]
 800606c:	b29b      	uxth	r3, r3
 800606e:	001a      	movs	r2, r3
 8006070:	187b      	adds	r3, r7, r1
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	189b      	adds	r3, r3, r2
 8006076:	187a      	adds	r2, r7, r1
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	00da      	lsls	r2, r3, #3
 8006080:	187b      	adds	r3, r7, r1
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	18d3      	adds	r3, r2, r3
 8006086:	4aad      	ldr	r2, [pc, #692]	; (800633c <USB_EPStartXfer+0x1194>)
 8006088:	4694      	mov	ip, r2
 800608a:	4463      	add	r3, ip
 800608c:	22c8      	movs	r2, #200	; 0xc8
 800608e:	18ba      	adds	r2, r7, r2
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	1d7b      	adds	r3, r7, #5
 8006094:	33ff      	adds	r3, #255	; 0xff
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d115      	bne.n	80060c8 <USB_EPStartXfer+0xf20>
 800609c:	21c8      	movs	r1, #200	; 0xc8
 800609e:	187b      	adds	r3, r7, r1
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	4aa6      	ldr	r2, [pc, #664]	; (8006340 <USB_EPStartXfer+0x1198>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	187b      	adds	r3, r7, r1
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	187b      	adds	r3, r7, r1
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	4aa2      	ldr	r2, [pc, #648]	; (8006344 <USB_EPStartXfer+0x119c>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	b29a      	uxth	r2, r3
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	801a      	strh	r2, [r3, #0]
 80060c6:	e068      	b.n	800619a <USB_EPStartXfer+0xff2>
 80060c8:	1d7b      	adds	r3, r7, #5
 80060ca:	33ff      	adds	r3, #255	; 0xff
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b3e      	cmp	r3, #62	; 0x3e
 80060d0:	d81d      	bhi.n	800610e <USB_EPStartXfer+0xf66>
 80060d2:	1d7b      	adds	r3, r7, #5
 80060d4:	33ff      	adds	r3, #255	; 0xff
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	22dc      	movs	r2, #220	; 0xdc
 80060dc:	18ba      	adds	r2, r7, r2
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	1d7b      	adds	r3, r7, #5
 80060e2:	33ff      	adds	r3, #255	; 0xff
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2201      	movs	r2, #1
 80060e8:	4013      	ands	r3, r2
 80060ea:	d005      	beq.n	80060f8 <USB_EPStartXfer+0xf50>
 80060ec:	22dc      	movs	r2, #220	; 0xdc
 80060ee:	18bb      	adds	r3, r7, r2
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	18ba      	adds	r2, r7, r2
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	23dc      	movs	r3, #220	; 0xdc
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	029b      	lsls	r3, r3, #10
 8006102:	b29a      	uxth	r2, r3
 8006104:	23c8      	movs	r3, #200	; 0xc8
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e045      	b.n	800619a <USB_EPStartXfer+0xff2>
 800610e:	1d7b      	adds	r3, r7, #5
 8006110:	33ff      	adds	r3, #255	; 0xff
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	22dc      	movs	r2, #220	; 0xdc
 8006118:	18ba      	adds	r2, r7, r2
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	1d7b      	adds	r3, r7, #5
 800611e:	33ff      	adds	r3, #255	; 0xff
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	221f      	movs	r2, #31
 8006124:	4013      	ands	r3, r2
 8006126:	d105      	bne.n	8006134 <USB_EPStartXfer+0xf8c>
 8006128:	22dc      	movs	r2, #220	; 0xdc
 800612a:	18bb      	adds	r3, r7, r2
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3b01      	subs	r3, #1
 8006130:	18ba      	adds	r2, r7, r2
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	23dc      	movs	r3, #220	; 0xdc
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	029b      	lsls	r3, r3, #10
 800613e:	b29b      	uxth	r3, r3
 8006140:	4a80      	ldr	r2, [pc, #512]	; (8006344 <USB_EPStartXfer+0x119c>)
 8006142:	4313      	orrs	r3, r2
 8006144:	b29a      	uxth	r2, r3
 8006146:	23c8      	movs	r3, #200	; 0xc8
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	e024      	b.n	800619a <USB_EPStartXfer+0xff2>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d120      	bne.n	800619a <USB_EPStartXfer+0xff2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	21d4      	movs	r1, #212	; 0xd4
 800615c:	187a      	adds	r2, r7, r1
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2250      	movs	r2, #80	; 0x50
 8006164:	5a9b      	ldrh	r3, [r3, r2]
 8006166:	b29b      	uxth	r3, r3
 8006168:	001a      	movs	r2, r3
 800616a:	187b      	adds	r3, r7, r1
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	189b      	adds	r3, r3, r2
 8006170:	187a      	adds	r2, r7, r1
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	00da      	lsls	r2, r3, #3
 800617a:	187b      	adds	r3, r7, r1
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	18d3      	adds	r3, r2, r3
 8006180:	4a6e      	ldr	r2, [pc, #440]	; (800633c <USB_EPStartXfer+0x1194>)
 8006182:	4694      	mov	ip, r2
 8006184:	4463      	add	r3, ip
 8006186:	21d0      	movs	r1, #208	; 0xd0
 8006188:	187a      	adds	r2, r7, r1
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	1d7b      	adds	r3, r7, #5
 800618e:	33ff      	adds	r3, #255	; 0xff
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b29a      	uxth	r2, r3
 8006194:	187b      	adds	r3, r7, r1
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	22c4      	movs	r2, #196	; 0xc4
 800619e:	18ba      	adds	r2, r7, r2
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d000      	beq.n	80061ac <USB_EPStartXfer+0x1004>
 80061aa:	e078      	b.n	800629e <USB_EPStartXfer+0x10f6>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	21bc      	movs	r1, #188	; 0xbc
 80061b0:	187a      	adds	r2, r7, r1
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2250      	movs	r2, #80	; 0x50
 80061b8:	5a9b      	ldrh	r3, [r3, r2]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	001a      	movs	r2, r3
 80061be:	187b      	adds	r3, r7, r1
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	189b      	adds	r3, r3, r2
 80061c4:	187a      	adds	r2, r7, r1
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00da      	lsls	r2, r3, #3
 80061ce:	187b      	adds	r3, r7, r1
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	18d3      	adds	r3, r2, r3
 80061d4:	4a5c      	ldr	r2, [pc, #368]	; (8006348 <USB_EPStartXfer+0x11a0>)
 80061d6:	4694      	mov	ip, r2
 80061d8:	4463      	add	r3, ip
 80061da:	22b8      	movs	r2, #184	; 0xb8
 80061dc:	18ba      	adds	r2, r7, r2
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	1d7b      	adds	r3, r7, #5
 80061e2:	33ff      	adds	r3, #255	; 0xff
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d115      	bne.n	8006216 <USB_EPStartXfer+0x106e>
 80061ea:	21b8      	movs	r1, #184	; 0xb8
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4a52      	ldr	r2, [pc, #328]	; (8006340 <USB_EPStartXfer+0x1198>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	187b      	adds	r3, r7, r1
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	187b      	adds	r3, r7, r1
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	4a4e      	ldr	r2, [pc, #312]	; (8006344 <USB_EPStartXfer+0x119c>)
 800620a:	4313      	orrs	r3, r2
 800620c:	b29a      	uxth	r2, r3
 800620e:	187b      	adds	r3, r7, r1
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	e068      	b.n	80062e8 <USB_EPStartXfer+0x1140>
 8006216:	1d7b      	adds	r3, r7, #5
 8006218:	33ff      	adds	r3, #255	; 0xff
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b3e      	cmp	r3, #62	; 0x3e
 800621e:	d81d      	bhi.n	800625c <USB_EPStartXfer+0x10b4>
 8006220:	1d7b      	adds	r3, r7, #5
 8006222:	33ff      	adds	r3, #255	; 0xff
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	22d8      	movs	r2, #216	; 0xd8
 800622a:	18ba      	adds	r2, r7, r2
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	1d7b      	adds	r3, r7, #5
 8006230:	33ff      	adds	r3, #255	; 0xff
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2201      	movs	r2, #1
 8006236:	4013      	ands	r3, r2
 8006238:	d005      	beq.n	8006246 <USB_EPStartXfer+0x109e>
 800623a:	22d8      	movs	r2, #216	; 0xd8
 800623c:	18bb      	adds	r3, r7, r2
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	18ba      	adds	r2, r7, r2
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	23d8      	movs	r3, #216	; 0xd8
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	029b      	lsls	r3, r3, #10
 8006250:	b29a      	uxth	r2, r3
 8006252:	23b8      	movs	r3, #184	; 0xb8
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e045      	b.n	80062e8 <USB_EPStartXfer+0x1140>
 800625c:	1d7b      	adds	r3, r7, #5
 800625e:	33ff      	adds	r3, #255	; 0xff
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	22d8      	movs	r2, #216	; 0xd8
 8006266:	18ba      	adds	r2, r7, r2
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	1d7b      	adds	r3, r7, #5
 800626c:	33ff      	adds	r3, #255	; 0xff
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	221f      	movs	r2, #31
 8006272:	4013      	ands	r3, r2
 8006274:	d105      	bne.n	8006282 <USB_EPStartXfer+0x10da>
 8006276:	22d8      	movs	r2, #216	; 0xd8
 8006278:	18bb      	adds	r3, r7, r2
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	18ba      	adds	r2, r7, r2
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	23d8      	movs	r3, #216	; 0xd8
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29b      	uxth	r3, r3
 800628e:	4a2d      	ldr	r2, [pc, #180]	; (8006344 <USB_EPStartXfer+0x119c>)
 8006290:	4313      	orrs	r3, r2
 8006292:	b29a      	uxth	r2, r3
 8006294:	23b8      	movs	r3, #184	; 0xb8
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e024      	b.n	80062e8 <USB_EPStartXfer+0x1140>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d120      	bne.n	80062e8 <USB_EPStartXfer+0x1140>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2250      	movs	r2, #80	; 0x50
 80062aa:	5a9b      	ldrh	r3, [r3, r2]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	001a      	movs	r2, r3
 80062b0:	21c4      	movs	r1, #196	; 0xc4
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	187a      	adds	r2, r7, r1
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	00da      	lsls	r2, r3, #3
 80062c2:	187b      	adds	r3, r7, r1
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	18d3      	adds	r3, r2, r3
 80062c8:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <USB_EPStartXfer+0x11a0>)
 80062ca:	4694      	mov	ip, r2
 80062cc:	4463      	add	r3, ip
 80062ce:	21c0      	movs	r1, #192	; 0xc0
 80062d0:	187a      	adds	r2, r7, r1
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	1d7b      	adds	r3, r7, #5
 80062d6:	33ff      	adds	r3, #255	; 0xff
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	b29a      	uxth	r2, r3
 80062dc:	187b      	adds	r3, r7, r1
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e001      	b.n	80062e8 <USB_EPStartXfer+0x1140>
      }
      else
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e025      	b.n	8006334 <USB_EPStartXfer+0x118c>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	18d3      	adds	r3, r2, r3
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	208a      	movs	r0, #138	; 0x8a
 80062f8:	183b      	adds	r3, r7, r0
 80062fa:	4914      	ldr	r1, [pc, #80]	; (800634c <USB_EPStartXfer+0x11a4>)
 80062fc:	400a      	ands	r2, r1
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	183b      	adds	r3, r7, r0
 8006302:	183a      	adds	r2, r7, r0
 8006304:	8812      	ldrh	r2, [r2, #0]
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	0149      	lsls	r1, r1, #5
 800630a:	404a      	eors	r2, r1
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	183b      	adds	r3, r7, r0
 8006310:	183a      	adds	r2, r7, r0
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	2180      	movs	r1, #128	; 0x80
 8006316:	0189      	lsls	r1, r1, #6
 8006318:	404a      	eors	r2, r1
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	18d3      	adds	r3, r2, r3
 8006326:	183a      	adds	r2, r7, r0
 8006328:	8812      	ldrh	r2, [r2, #0]
 800632a:	4909      	ldr	r1, [pc, #36]	; (8006350 <USB_EPStartXfer+0x11a8>)
 800632c:	430a      	orrs	r2, r1
 800632e:	b292      	uxth	r2, r2
 8006330:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b043      	add	sp, #268	; 0x10c
 800633a:	bd90      	pop	{r4, r7, pc}
 800633c:	00000402 	.word	0x00000402
 8006340:	ffff83ff 	.word	0xffff83ff
 8006344:	ffff8000 	.word	0xffff8000
 8006348:	00000406 	.word	0x00000406
 800634c:	ffffbf8f 	.word	0xffffbf8f
 8006350:	ffff8080 	.word	0xffff8080

08006354 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01d      	beq.n	80063a2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	18d3      	adds	r3, r2, r3
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29a      	uxth	r2, r3
 8006374:	200c      	movs	r0, #12
 8006376:	183b      	adds	r3, r7, r0
 8006378:	491b      	ldr	r1, [pc, #108]	; (80063e8 <USB_EPSetStall+0x94>)
 800637a:	400a      	ands	r2, r1
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	183b      	adds	r3, r7, r0
 8006380:	183a      	adds	r2, r7, r0
 8006382:	8812      	ldrh	r2, [r2, #0]
 8006384:	2110      	movs	r1, #16
 8006386:	404a      	eors	r2, r1
 8006388:	801a      	strh	r2, [r3, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	18d3      	adds	r3, r2, r3
 8006394:	183a      	adds	r2, r7, r0
 8006396:	8812      	ldrh	r2, [r2, #0]
 8006398:	4914      	ldr	r1, [pc, #80]	; (80063ec <USB_EPSetStall+0x98>)
 800639a:	430a      	orrs	r2, r1
 800639c:	b292      	uxth	r2, r2
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e01d      	b.n	80063de <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	18d3      	adds	r3, r2, r3
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	200e      	movs	r0, #14
 80063b2:	183b      	adds	r3, r7, r0
 80063b4:	490e      	ldr	r1, [pc, #56]	; (80063f0 <USB_EPSetStall+0x9c>)
 80063b6:	400a      	ands	r2, r1
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	183b      	adds	r3, r7, r0
 80063bc:	183a      	adds	r2, r7, r0
 80063be:	8812      	ldrh	r2, [r2, #0]
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	0149      	lsls	r1, r1, #5
 80063c4:	404a      	eors	r2, r1
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	18d3      	adds	r3, r2, r3
 80063d2:	183a      	adds	r2, r7, r0
 80063d4:	8812      	ldrh	r2, [r2, #0]
 80063d6:	4905      	ldr	r1, [pc, #20]	; (80063ec <USB_EPSetStall+0x98>)
 80063d8:	430a      	orrs	r2, r1
 80063da:	b292      	uxth	r2, r2
 80063dc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	0018      	movs	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b004      	add	sp, #16
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	ffff8fbf 	.word	0xffff8fbf
 80063ec:	ffff8080 	.word	0xffff8080
 80063f0:	ffffbf8f 	.word	0xffffbf8f

080063f4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	7b1b      	ldrb	r3, [r3, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d000      	beq.n	8006408 <USB_EPClearStall+0x14>
 8006406:	e095      	b.n	8006534 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d046      	beq.n	800649e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	18d2      	adds	r2, r2, r3
 800641a:	2110      	movs	r1, #16
 800641c:	187b      	adds	r3, r7, r1
 800641e:	8812      	ldrh	r2, [r2, #0]
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	187b      	adds	r3, r7, r1
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	2240      	movs	r2, #64	; 0x40
 8006428:	4013      	ands	r3, r2
 800642a:	d016      	beq.n	800645a <USB_EPClearStall+0x66>
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	18d3      	adds	r3, r2, r3
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29a      	uxth	r2, r3
 800643a:	200e      	movs	r0, #14
 800643c:	183b      	adds	r3, r7, r0
 800643e:	4940      	ldr	r1, [pc, #256]	; (8006540 <USB_EPClearStall+0x14c>)
 8006440:	400a      	ands	r2, r1
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	18d3      	adds	r3, r2, r3
 800644e:	183a      	adds	r2, r7, r0
 8006450:	8812      	ldrh	r2, [r2, #0]
 8006452:	493c      	ldr	r1, [pc, #240]	; (8006544 <USB_EPClearStall+0x150>)
 8006454:	430a      	orrs	r2, r1
 8006456:	b292      	uxth	r2, r2
 8006458:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	78db      	ldrb	r3, [r3, #3]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d068      	beq.n	8006534 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	18d3      	adds	r3, r2, r3
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29a      	uxth	r2, r3
 8006470:	200c      	movs	r0, #12
 8006472:	183b      	adds	r3, r7, r0
 8006474:	4934      	ldr	r1, [pc, #208]	; (8006548 <USB_EPClearStall+0x154>)
 8006476:	400a      	ands	r2, r1
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	183b      	adds	r3, r7, r0
 800647c:	183a      	adds	r2, r7, r0
 800647e:	8812      	ldrh	r2, [r2, #0]
 8006480:	2120      	movs	r1, #32
 8006482:	404a      	eors	r2, r1
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	18d3      	adds	r3, r2, r3
 8006490:	183a      	adds	r2, r7, r0
 8006492:	8812      	ldrh	r2, [r2, #0]
 8006494:	492d      	ldr	r1, [pc, #180]	; (800654c <USB_EPClearStall+0x158>)
 8006496:	430a      	orrs	r2, r1
 8006498:	b292      	uxth	r2, r2
 800649a:	801a      	strh	r2, [r3, #0]
 800649c:	e04a      	b.n	8006534 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	18d2      	adds	r2, r2, r3
 80064a8:	2116      	movs	r1, #22
 80064aa:	187b      	adds	r3, r7, r1
 80064ac:	8812      	ldrh	r2, [r2, #0]
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	187b      	adds	r3, r7, r1
 80064b2:	881a      	ldrh	r2, [r3, #0]
 80064b4:	2380      	movs	r3, #128	; 0x80
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	4013      	ands	r3, r2
 80064ba:	d016      	beq.n	80064ea <USB_EPClearStall+0xf6>
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	18d3      	adds	r3, r2, r3
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	2014      	movs	r0, #20
 80064cc:	183b      	adds	r3, r7, r0
 80064ce:	491c      	ldr	r1, [pc, #112]	; (8006540 <USB_EPClearStall+0x14c>)
 80064d0:	400a      	ands	r2, r1
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	18d3      	adds	r3, r2, r3
 80064de:	183a      	adds	r2, r7, r0
 80064e0:	8812      	ldrh	r2, [r2, #0]
 80064e2:	491b      	ldr	r1, [pc, #108]	; (8006550 <USB_EPClearStall+0x15c>)
 80064e4:	430a      	orrs	r2, r1
 80064e6:	b292      	uxth	r2, r2
 80064e8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	18d3      	adds	r3, r2, r3
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	2012      	movs	r0, #18
 80064fa:	183b      	adds	r3, r7, r0
 80064fc:	4915      	ldr	r1, [pc, #84]	; (8006554 <USB_EPClearStall+0x160>)
 80064fe:	400a      	ands	r2, r1
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	183b      	adds	r3, r7, r0
 8006504:	183a      	adds	r2, r7, r0
 8006506:	8812      	ldrh	r2, [r2, #0]
 8006508:	2180      	movs	r1, #128	; 0x80
 800650a:	0149      	lsls	r1, r1, #5
 800650c:	404a      	eors	r2, r1
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	183b      	adds	r3, r7, r0
 8006512:	183a      	adds	r2, r7, r0
 8006514:	8812      	ldrh	r2, [r2, #0]
 8006516:	2180      	movs	r1, #128	; 0x80
 8006518:	0189      	lsls	r1, r1, #6
 800651a:	404a      	eors	r2, r1
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	18d3      	adds	r3, r2, r3
 8006528:	183a      	adds	r2, r7, r0
 800652a:	8812      	ldrh	r2, [r2, #0]
 800652c:	4907      	ldr	r1, [pc, #28]	; (800654c <USB_EPClearStall+0x158>)
 800652e:	430a      	orrs	r2, r1
 8006530:	b292      	uxth	r2, r2
 8006532:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	0018      	movs	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	b006      	add	sp, #24
 800653c:	bd80      	pop	{r7, pc}
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	ffff8f8f 	.word	0xffff8f8f
 8006544:	ffff80c0 	.word	0xffff80c0
 8006548:	ffff8fbf 	.word	0xffff8fbf
 800654c:	ffff8080 	.word	0xffff8080
 8006550:	ffffc080 	.word	0xffffc080
 8006554:	ffffbf8f 	.word	0xffffbf8f

08006558 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	000a      	movs	r2, r1
 8006562:	1cfb      	adds	r3, r7, #3
 8006564:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006566:	1cfb      	adds	r3, r7, #3
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	224c      	movs	r2, #76	; 0x4c
 8006572:	2180      	movs	r1, #128	; 0x80
 8006574:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2258      	movs	r2, #88	; 0x58
 800658c:	5a9b      	ldrh	r3, [r3, r2]
 800658e:	b29b      	uxth	r3, r3
 8006590:	4a05      	ldr	r2, [pc, #20]	; (80065a8 <USB_DevConnect+0x28>)
 8006592:	4313      	orrs	r3, r2
 8006594:	b299      	uxth	r1, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2258      	movs	r2, #88	; 0x58
 800659a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	0018      	movs	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b002      	add	sp, #8
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	ffff8000 	.word	0xffff8000

080065ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2244      	movs	r2, #68	; 0x44
 80065b8:	5a9b      	ldrh	r3, [r3, r2]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	0018      	movs	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b004      	add	sp, #16
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	; 0x30
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	0019      	movs	r1, r3
 80065d4:	1dbb      	adds	r3, r7, #6
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	1d3b      	adds	r3, r7, #4
 80065da:	1c0a      	adds	r2, r1, #0
 80065dc:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065f0:	1dbb      	adds	r3, r7, #6
 80065f2:	881a      	ldrh	r2, [r3, #0]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	18d3      	adds	r3, r2, r3
 80065f8:	2280      	movs	r2, #128	; 0x80
 80065fa:	00d2      	lsls	r2, r2, #3
 80065fc:	4694      	mov	ip, r2
 80065fe:	4463      	add	r3, ip
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006606:	e01b      	b.n	8006640 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	3301      	adds	r3, #1
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	b29b      	uxth	r3, r3
 800661e:	001a      	movs	r2, r3
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	b29a      	uxth	r2, r3
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	3302      	adds	r3, #2
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	3301      	adds	r3, #1
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	3b01      	subs	r3, #1
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e0      	bne.n	8006608 <USB_WritePMA+0x40>
  }
}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	46bd      	mov	sp, r7
 800664a:	b00c      	add	sp, #48	; 0x30
 800664c:	bd80      	pop	{r7, pc}

0800664e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b08a      	sub	sp, #40	; 0x28
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	0019      	movs	r1, r3
 800665a:	1dbb      	adds	r3, r7, #6
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	1c0a      	adds	r2, r1, #0
 8006662:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006664:	1d3b      	adds	r3, r7, #4
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	085b      	lsrs	r3, r3, #1
 800666a:	b29b      	uxth	r3, r3
 800666c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006676:	1dbb      	adds	r3, r7, #6
 8006678:	881a      	ldrh	r2, [r3, #0]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	18d3      	adds	r3, r2, r3
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	00d2      	lsls	r2, r2, #3
 8006682:	4694      	mov	ip, r2
 8006684:	4463      	add	r3, ip
 8006686:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
 800668c:	e018      	b.n	80066c0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	3302      	adds	r3, #2
 800669a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	3301      	adds	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	0a1b      	lsrs	r3, r3, #8
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	3b01      	subs	r3, #1
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e3      	bne.n	800668e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	2201      	movs	r2, #1
 80066cc:	4013      	ands	r3, r2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	701a      	strb	r2, [r3, #0]
  }
}
 80066e4:	46c0      	nop			; (mov r8, r8)
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b00a      	add	sp, #40	; 0x28
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	000a      	movs	r2, r1
 80066f6:	1cfb      	adds	r3, r7, #3
 80066f8:	701a      	strb	r2, [r3, #0]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7c1b      	ldrb	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d116      	bne.n	8006730 <USBD_MSC_Init+0x44>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006702:	2380      	movs	r3, #128	; 0x80
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	2202      	movs	r2, #2
 800670a:	2101      	movs	r1, #1
 800670c:	f003 f806 	bl	800971c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	23b6      	movs	r3, #182	; 0xb6
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	2101      	movs	r1, #1
 8006718:	50d1      	str	r1, [r2, r3]

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	2181      	movs	r1, #129	; 0x81
 8006724:	f002 fffa 	bl	800971c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	62da      	str	r2, [r3, #44]	; 0x2c
 800672e:	e013      	b.n	8006758 <USBD_MSC_Init+0x6c>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	2340      	movs	r3, #64	; 0x40
 8006734:	2202      	movs	r2, #2
 8006736:	2101      	movs	r1, #1
 8006738:	f002 fff0 	bl	800971c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	23b6      	movs	r3, #182	; 0xb6
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	2101      	movs	r1, #1
 8006744:	50d1      	str	r1, [r2, r3]

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	2340      	movs	r3, #64	; 0x40
 800674a:	2202      	movs	r2, #2
 800674c:	2181      	movs	r1, #129	; 0x81
 800674e:	f002 ffe5 	bl	800971c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006758:	239b      	movs	r3, #155	; 0x9b
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	0018      	movs	r0, r3
 800675e:	f003 f9a7 	bl	8009ab0 <USBD_static_malloc>
 8006762:	0001      	movs	r1, r0
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	23ae      	movs	r3, #174	; 0xae
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	23ae      	movs	r3, #174	; 0xae
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	58d3      	ldr	r3, [r2, r3]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <USBD_MSC_Init+0x90>
  {
    return USBD_FAIL;
 8006778:	2302      	movs	r3, #2
 800677a:	e004      	b.n	8006786 <USBD_MSC_Init+0x9a>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	0018      	movs	r0, r3
 8006780:	f000 f9fe 	bl	8006b80 <MSC_BOT_Init>

  return USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	0018      	movs	r0, r3
 8006788:	46bd      	mov	sp, r7
 800678a:	b002      	add	sp, #8
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	000a      	movs	r2, r1
 8006798:	1cfb      	adds	r3, r7, #3
 800679a:	701a      	strb	r2, [r3, #0]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2101      	movs	r1, #1
 80067a0:	0018      	movs	r0, r3
 80067a2:	f002 fff2 	bl	800978a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	23b6      	movs	r3, #182	; 0xb6
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	2100      	movs	r1, #0
 80067ae:	50d1      	str	r1, [r2, r3]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2181      	movs	r1, #129	; 0x81
 80067b4:	0018      	movs	r0, r3
 80067b6:	f002 ffe8 	bl	800978a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	0018      	movs	r0, r3
 80067c4:	f000 fa30 	bl	8006c28 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	23ae      	movs	r3, #174	; 0xae
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	58d3      	ldr	r3, [r2, r3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <USBD_MSC_DeInit+0x5e>
  {
    USBD_free(pdev->pClassData);
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	23ae      	movs	r3, #174	; 0xae
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	58d3      	ldr	r3, [r2, r3]
 80067dc:	0018      	movs	r0, r3
 80067de:	f003 f973 	bl	8009ac8 <USBD_static_free>
    pdev->pClassData  = NULL;
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	23ae      	movs	r3, #174	; 0xae
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	2100      	movs	r1, #0
 80067ea:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	0018      	movs	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b002      	add	sp, #8
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b086      	sub	sp, #24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	23ae      	movs	r3, #174	; 0xae
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	58d3      	ldr	r3, [r2, r3]
 8006808:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800680a:	2317      	movs	r3, #23
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8006812:	230e      	movs	r3, #14
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	2200      	movs	r2, #0
 8006818:	801a      	strh	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	001a      	movs	r2, r3
 8006820:	2360      	movs	r3, #96	; 0x60
 8006822:	4013      	ands	r3, r2
 8006824:	d05b      	beq.n	80068de <USBD_MSC_Setup+0xe8>
 8006826:	2b20      	cmp	r3, #32
 8006828:	d000      	beq.n	800682c <USBD_MSC_Setup+0x36>
 800682a:	e126      	b.n	8006a7a <USBD_MSC_Setup+0x284>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2bfe      	cmp	r3, #254	; 0xfe
 8006832:	d002      	beq.n	800683a <USBD_MSC_Setup+0x44>
 8006834:	2bff      	cmp	r3, #255	; 0xff
 8006836:	d029      	beq.n	800688c <USBD_MSC_Setup+0x96>
 8006838:	e045      	b.n	80068c6 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	885b      	ldrh	r3, [r3, #2]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d119      	bne.n	8006876 <USBD_MSC_Setup+0x80>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	88db      	ldrh	r3, [r3, #6]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d115      	bne.n	8006876 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006850:	2b00      	cmp	r3, #0
 8006852:	da10      	bge.n	8006876 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	23af      	movs	r3, #175	; 0xaf
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	58d3      	ldr	r3, [r2, r3]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	4798      	blx	r3
 8006860:	0003      	movs	r3, r0
 8006862:	001a      	movs	r2, r3
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006868:	6939      	ldr	r1, [r7, #16]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	0018      	movs	r0, r3
 8006870:	f002 fbc2 	bl	8008ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006874:	e032      	b.n	80068dc <USBD_MSC_Setup+0xe6>
            USBD_CtlError(pdev, req);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	0011      	movs	r1, r2
 800687c:	0018      	movs	r0, r3
 800687e:	f002 fb3c 	bl	8008efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006882:	2317      	movs	r3, #23
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2202      	movs	r2, #2
 8006888:	701a      	strb	r2, [r3, #0]
          break;
 800688a:	e027      	b.n	80068dc <USBD_MSC_Setup+0xe6>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	885b      	ldrh	r3, [r3, #2]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10d      	bne.n	80068b0 <USBD_MSC_Setup+0xba>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	88db      	ldrh	r3, [r3, #6]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <USBD_MSC_Setup+0xba>
              ((req->bmRequest & 0x80U) != 0x80U))
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	db04      	blt.n	80068b0 <USBD_MSC_Setup+0xba>
          {
            MSC_BOT_Reset(pdev);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	0018      	movs	r0, r3
 80068aa:	f000 f9a1 	bl	8006bf0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ae:	e015      	b.n	80068dc <USBD_MSC_Setup+0xe6>
            USBD_CtlError(pdev, req);
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0011      	movs	r1, r2
 80068b6:	0018      	movs	r0, r3
 80068b8:	f002 fb1f 	bl	8008efa <USBD_CtlError>
            ret = USBD_FAIL;
 80068bc:	2317      	movs	r3, #23
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	2202      	movs	r2, #2
 80068c2:	701a      	strb	r2, [r3, #0]
          break;
 80068c4:	e00a      	b.n	80068dc <USBD_MSC_Setup+0xe6>

        default:
          USBD_CtlError(pdev, req);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0011      	movs	r1, r2
 80068cc:	0018      	movs	r0, r3
 80068ce:	f002 fb14 	bl	8008efa <USBD_CtlError>
          ret = USBD_FAIL;
 80068d2:	2317      	movs	r3, #23
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	2202      	movs	r2, #2
 80068d8:	701a      	strb	r2, [r3, #0]
          break;
 80068da:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80068dc:	e0d8      	b.n	8006a90 <USBD_MSC_Setup+0x29a>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d052      	beq.n	800698c <USBD_MSC_Setup+0x196>
 80068e6:	dc02      	bgt.n	80068ee <USBD_MSC_Setup+0xf8>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <USBD_MSC_Setup+0x102>
 80068ec:	e0b9      	b.n	8006a62 <USBD_MSC_Setup+0x26c>
 80068ee:	2b0a      	cmp	r3, #10
 80068f0:	d01b      	beq.n	800692a <USBD_MSC_Setup+0x134>
 80068f2:	2b0b      	cmp	r3, #11
 80068f4:	d032      	beq.n	800695c <USBD_MSC_Setup+0x166>
 80068f6:	e0b4      	b.n	8006a62 <USBD_MSC_Setup+0x26c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	23a7      	movs	r3, #167	; 0xa7
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	5cd3      	ldrb	r3, [r2, r3]
 8006900:	2b03      	cmp	r3, #3
 8006902:	d107      	bne.n	8006914 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006904:	230e      	movs	r3, #14
 8006906:	18f9      	adds	r1, r7, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	0018      	movs	r0, r3
 800690e:	f002 fb73 	bl	8008ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006912:	e0b1      	b.n	8006a78 <USBD_MSC_Setup+0x282>
            USBD_CtlError(pdev, req);
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	0011      	movs	r1, r2
 800691a:	0018      	movs	r0, r3
 800691c:	f002 faed 	bl	8008efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006920:	2317      	movs	r3, #23
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	2202      	movs	r2, #2
 8006926:	701a      	strb	r2, [r3, #0]
          break;
 8006928:	e0a6      	b.n	8006a78 <USBD_MSC_Setup+0x282>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	23a7      	movs	r3, #167	; 0xa7
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	5cd3      	ldrb	r3, [r2, r3]
 8006932:	2b03      	cmp	r3, #3
 8006934:	d107      	bne.n	8006946 <USBD_MSC_Setup+0x150>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1d19      	adds	r1, r3, #4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	0018      	movs	r0, r3
 8006940:	f002 fb5a 	bl	8008ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006944:	e098      	b.n	8006a78 <USBD_MSC_Setup+0x282>
            USBD_CtlError(pdev, req);
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	0011      	movs	r1, r2
 800694c:	0018      	movs	r0, r3
 800694e:	f002 fad4 	bl	8008efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006952:	2317      	movs	r3, #23
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	2202      	movs	r2, #2
 8006958:	701a      	strb	r2, [r3, #0]
          break;
 800695a:	e08d      	b.n	8006a78 <USBD_MSC_Setup+0x282>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	23a7      	movs	r3, #167	; 0xa7
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	5cd3      	ldrb	r3, [r2, r3]
 8006964:	2b03      	cmp	r3, #3
 8006966:	d106      	bne.n	8006976 <USBD_MSC_Setup+0x180>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	885b      	ldrh	r3, [r3, #2]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	001a      	movs	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006974:	e080      	b.n	8006a78 <USBD_MSC_Setup+0x282>
            USBD_CtlError(pdev, req);
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	0011      	movs	r1, r2
 800697c:	0018      	movs	r0, r3
 800697e:	f002 fabc 	bl	8008efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006982:	2317      	movs	r3, #23
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	2202      	movs	r2, #2
 8006988:	701a      	strb	r2, [r3, #0]
          break;
 800698a:	e075      	b.n	8006a78 <USBD_MSC_Setup+0x282>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	889b      	ldrh	r3, [r3, #4]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f002 ff23 	bl	80097e2 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	889b      	ldrh	r3, [r3, #4]
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	0011      	movs	r1, r2
 80069a6:	0018      	movs	r0, r3
 80069a8:	f002 feef 	bl	800978a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	889b      	ldrh	r3, [r3, #4]
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da24      	bge.n	8006a00 <USBD_MSC_Setup+0x20a>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	889b      	ldrh	r3, [r3, #4]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	001a      	movs	r2, r3
 80069be:	230f      	movs	r3, #15
 80069c0:	401a      	ands	r2, r3
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	0013      	movs	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	189b      	adds	r3, r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	18cb      	adds	r3, r1, r3
 80069ce:	3318      	adds	r3, #24
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7c1b      	ldrb	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d107      	bne.n	80069ec <USBD_MSC_Setup+0x1f6>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80069dc:	2380      	movs	r3, #128	; 0x80
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	2181      	movs	r1, #129	; 0x81
 80069e6:	f002 fe99 	bl	800971c <USBD_LL_OpenEP>
 80069ea:	e005      	b.n	80069f8 <USBD_MSC_Setup+0x202>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	2340      	movs	r3, #64	; 0x40
 80069f0:	2202      	movs	r2, #2
 80069f2:	2181      	movs	r1, #129	; 0x81
 80069f4:	f002 fe92 	bl	800971c <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80069fe:	e027      	b.n	8006a50 <USBD_MSC_Setup+0x25a>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	889b      	ldrh	r3, [r3, #4]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	001a      	movs	r2, r3
 8006a08:	230f      	movs	r3, #15
 8006a0a:	401a      	ands	r2, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	23ac      	movs	r3, #172	; 0xac
 8006a10:	0059      	lsls	r1, r3, #1
 8006a12:	0013      	movs	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	189b      	adds	r3, r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	18c3      	adds	r3, r0, r3
 8006a1c:	185b      	adds	r3, r3, r1
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7c1b      	ldrb	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d107      	bne.n	8006a3a <USBD_MSC_Setup+0x244>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006a2a:	2380      	movs	r3, #128	; 0x80
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	2101      	movs	r1, #1
 8006a34:	f002 fe72 	bl	800971c <USBD_LL_OpenEP>
 8006a38:	e005      	b.n	8006a46 <USBD_MSC_Setup+0x250>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	2340      	movs	r3, #64	; 0x40
 8006a3e:	2202      	movs	r2, #2
 8006a40:	2101      	movs	r1, #1
 8006a42:	f002 fe6b 	bl	800971c <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	23b6      	movs	r3, #182	; 0xb6
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	50d1      	str	r1, [r2, r3]
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	889b      	ldrh	r3, [r3, #4]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	0011      	movs	r1, r2
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 fa9a 	bl	8006f94 <MSC_BOT_CplClrFeature>
          break;
 8006a60:	e00a      	b.n	8006a78 <USBD_MSC_Setup+0x282>

        default:
          USBD_CtlError(pdev, req);
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	0011      	movs	r1, r2
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f002 fa46 	bl	8008efa <USBD_CtlError>
          ret = USBD_FAIL;
 8006a6e:	2317      	movs	r3, #23
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	2202      	movs	r2, #2
 8006a74:	701a      	strb	r2, [r3, #0]
          break;
 8006a76:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006a78:	e00a      	b.n	8006a90 <USBD_MSC_Setup+0x29a>

    default:
      USBD_CtlError(pdev, req);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	0011      	movs	r1, r2
 8006a80:	0018      	movs	r0, r3
 8006a82:	f002 fa3a 	bl	8008efa <USBD_CtlError>
      ret = USBD_FAIL;
 8006a86:	2317      	movs	r3, #23
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	701a      	strb	r2, [r3, #0]
      break;
 8006a8e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006a90:	2317      	movs	r3, #23
 8006a92:	18fb      	adds	r3, r7, r3
 8006a94:	781b      	ldrb	r3, [r3, #0]
}
 8006a96:	0018      	movs	r0, r3
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	b006      	add	sp, #24
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	000a      	movs	r2, r1
 8006aa8:	1cfb      	adds	r3, r7, #3
 8006aaa:	701a      	strb	r2, [r3, #0]
  MSC_BOT_DataIn(pdev, epnum);
 8006aac:	1cfb      	adds	r3, r7, #3
 8006aae:	781a      	ldrb	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	0011      	movs	r1, r2
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 f8c7 	bl	8006c48 <MSC_BOT_DataIn>

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	0018      	movs	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b002      	add	sp, #8
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	000a      	movs	r2, r1
 8006ace:	1cfb      	adds	r3, r7, #3
 8006ad0:	701a      	strb	r2, [r3, #0]
  MSC_BOT_DataOut(pdev, epnum);
 8006ad2:	1cfb      	adds	r3, r7, #3
 8006ad4:	781a      	ldrb	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	0011      	movs	r1, r2
 8006ada:	0018      	movs	r0, r3
 8006adc:	f000 f8ec 	bl	8006cb8 <MSC_BOT_DataOut>

  return USBD_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b002      	add	sp, #8
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006afa:	4b02      	ldr	r3, [pc, #8]	; (8006b04 <USBD_MSC_GetHSCfgDesc+0x18>)
}
 8006afc:	0018      	movs	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	b002      	add	sp, #8
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000090 	.word	0x20000090

08006b08 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006b16:	4b02      	ldr	r3, [pc, #8]	; (8006b20 <USBD_MSC_GetFSCfgDesc+0x18>)
}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b002      	add	sp, #8
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	200000b0 	.word	0x200000b0

08006b24 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006b32:	4b02      	ldr	r3, [pc, #8]	; (8006b3c <USBD_MSC_GetOtherSpeedCfgDesc+0x18>)
}
 8006b34:	0018      	movs	r0, r3
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b002      	add	sp, #8
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	200000d0 	.word	0x200000d0

08006b40 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	220a      	movs	r2, #10
 8006b4c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006b4e:	4b02      	ldr	r3, [pc, #8]	; (8006b58 <USBD_MSC_GetDeviceQualifierDescriptor+0x18>)
}
 8006b50:	0018      	movs	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b002      	add	sp, #8
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	200000f0 	.word	0x200000f0

08006b5c <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <USBD_MSC_RegisterStorage+0x1a>
  {
    pdev->pUserData = fops;
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	23af      	movs	r3, #175	; 0xaf
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	0018      	movs	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b002      	add	sp, #8
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	23ae      	movs	r3, #174	; 0xae
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	58d3      	ldr	r3, [r2, r3]
 8006b90:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4a12      	ldr	r2, [pc, #72]	; (8006bec <MSC_BOT_Init+0x6c>)
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	5499      	strb	r1, [r3, r2]
  hmsc->scsi_sense_head = 0U;
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	2397      	movs	r3, #151	; 0x97
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	2100      	movs	r1, #0
 8006bae:	54d1      	strb	r1, [r2, r3]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	23af      	movs	r3, #175	; 0xaf
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	58d3      	ldr	r3, [r2, r3]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2000      	movs	r0, #0
 8006bbc:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f002 fe0d 	bl	80097e2 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2181      	movs	r1, #129	; 0x81
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f002 fe08 	bl	80097e2 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2283      	movs	r2, #131	; 0x83
 8006bd6:	0092      	lsls	r2, r2, #2
 8006bd8:	189a      	adds	r2, r3, r2
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	231f      	movs	r3, #31
 8006bde:	2101      	movs	r1, #1
 8006be0:	f002 ff18 	bl	8009a14 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006be4:	46c0      	nop			; (mov r8, r8)
 8006be6:	46bd      	mov	sp, r7
 8006be8:	b004      	add	sp, #16
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	0000025d 	.word	0x0000025d

08006bf0 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	23ae      	movs	r3, #174	; 0xae
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	58d3      	ldr	r3, [r2, r3]
 8006c00:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2283      	movs	r2, #131	; 0x83
 8006c12:	0092      	lsls	r2, r2, #2
 8006c14:	189a      	adds	r2, r3, r2
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	231f      	movs	r3, #31
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	f002 fefa 	bl	8009a14 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006c20:	46c0      	nop			; (mov r8, r8)
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b004      	add	sp, #16
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	23ae      	movs	r3, #174	; 0xae
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	58d3      	ldr	r3, [r2, r3]
 8006c38:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	721a      	strb	r2, [r3, #8]
}
 8006c40:	46c0      	nop			; (mov r8, r8)
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b004      	add	sp, #16
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	000a      	movs	r2, r1
 8006c52:	1cfb      	adds	r3, r7, #3
 8006c54:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	23ae      	movs	r3, #174	; 0xae
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	58d3      	ldr	r3, [r2, r3]
 8006c5e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	7a1b      	ldrb	r3, [r3, #8]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d003      	beq.n	8006c70 <MSC_BOT_DataIn+0x28>
 8006c68:	db1a      	blt.n	8006ca0 <MSC_BOT_DataIn+0x58>
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	dc18      	bgt.n	8006ca0 <MSC_BOT_DataIn+0x58>
 8006c6e:	e011      	b.n	8006c94 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a0f      	ldr	r2, [pc, #60]	; (8006cb0 <MSC_BOT_DataIn+0x68>)
 8006c74:	5c99      	ldrb	r1, [r3, r2]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <MSC_BOT_DataIn+0x6c>)
 8006c7a:	189a      	adds	r2, r3, r2
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 f9b4 	bl	8006fec <SCSI_ProcessCmd>
 8006c84:	1e03      	subs	r3, r0, #0
 8006c86:	da0d      	bge.n	8006ca4 <MSC_BOT_DataIn+0x5c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f000 f91b 	bl	8006ec8 <MSC_BOT_SendCSW>
      }
      break;
 8006c92:	e007      	b.n	8006ca4 <MSC_BOT_DataIn+0x5c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2100      	movs	r1, #0
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f000 f915 	bl	8006ec8 <MSC_BOT_SendCSW>
      break;
 8006c9e:	e002      	b.n	8006ca6 <MSC_BOT_DataIn+0x5e>

    default:
      break;
 8006ca0:	46c0      	nop			; (mov r8, r8)
 8006ca2:	e000      	b.n	8006ca6 <MSC_BOT_DataIn+0x5e>
      break;
 8006ca4:	46c0      	nop			; (mov r8, r8)
  }
}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b004      	add	sp, #16
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	00000219 	.word	0x00000219
 8006cb4:	0000021b 	.word	0x0000021b

08006cb8 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	000a      	movs	r2, r1
 8006cc2:	1cfb      	adds	r3, r7, #3
 8006cc4:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	23ae      	movs	r3, #174	; 0xae
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	58d3      	ldr	r3, [r2, r3]
 8006cce:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	7a1b      	ldrb	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <MSC_BOT_DataOut+0x26>
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d005      	beq.n	8006ce8 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006cdc:	e016      	b.n	8006d0c <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f000 f81b 	bl	8006d1c <MSC_BOT_CBW_Decode>
      break;
 8006ce6:	e011      	b.n	8006d0c <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <MSC_BOT_DataOut+0x5c>)
 8006cec:	5c99      	ldrb	r1, [r3, r2]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <MSC_BOT_DataOut+0x60>)
 8006cf2:	189a      	adds	r2, r3, r2
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f000 f978 	bl	8006fec <SCSI_ProcessCmd>
 8006cfc:	1e03      	subs	r3, r0, #0
 8006cfe:	da04      	bge.n	8006d0a <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2101      	movs	r1, #1
 8006d04:	0018      	movs	r0, r3
 8006d06:	f000 f8df 	bl	8006ec8 <MSC_BOT_SendCSW>
      break;
 8006d0a:	46c0      	nop			; (mov r8, r8)
  }
}
 8006d0c:	46c0      	nop			; (mov r8, r8)
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b004      	add	sp, #16
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	00000219 	.word	0x00000219
 8006d18:	0000021b 	.word	0x0000021b

08006d1c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	23ae      	movs	r3, #174	; 0xae
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	58d3      	ldr	r3, [r2, r3]
 8006d2c:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	2384      	movs	r3, #132	; 0x84
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	58d1      	ldr	r1, [r2, r3]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	238c      	movs	r3, #140	; 0x8c
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	50d1      	str	r1, [r2, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	2385      	movs	r3, #133	; 0x85
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	58d1      	ldr	r1, [r2, r3]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	238d      	movs	r3, #141	; 0x8d
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	50d1      	str	r1, [r2, r3]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2101      	movs	r1, #1
 8006d52:	0018      	movs	r0, r3
 8006d54:	f002 fe96 	bl	8009a84 <USBD_LL_GetRxDataSize>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	2b1f      	cmp	r3, #31
 8006d5c:	d115      	bne.n	8006d8a <MSC_BOT_CBW_Decode+0x6e>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	2383      	movs	r3, #131	; 0x83
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	58d3      	ldr	r3, [r2, r3]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006d66:	4a35      	ldr	r2, [pc, #212]	; (8006e3c <MSC_BOT_CBW_Decode+0x120>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d10e      	bne.n	8006d8a <MSC_BOT_CBW_Decode+0x6e>
      (hmsc->cbw.bLUN > 1U) ||
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a34      	ldr	r2, [pc, #208]	; (8006e40 <MSC_BOT_CBW_Decode+0x124>)
 8006d70:	5c9b      	ldrb	r3, [r3, r2]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d809      	bhi.n	8006d8a <MSC_BOT_CBW_Decode+0x6e>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a32      	ldr	r2, [pc, #200]	; (8006e44 <MSC_BOT_CBW_Decode+0x128>)
 8006d7a:	5c9b      	ldrb	r3, [r3, r2]
      (hmsc->cbw.bLUN > 1U) ||
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <MSC_BOT_CBW_Decode+0x6e>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4a30      	ldr	r2, [pc, #192]	; (8006e44 <MSC_BOT_CBW_Decode+0x128>)
 8006d84:	5c9b      	ldrb	r3, [r3, r2]
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d90f      	bls.n	8006daa <MSC_BOT_CBW_Decode+0x8e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a2c      	ldr	r2, [pc, #176]	; (8006e40 <MSC_BOT_CBW_Decode+0x124>)
 8006d8e:	5c99      	ldrb	r1, [r3, r2]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	2320      	movs	r3, #32
 8006d94:	2205      	movs	r2, #5
 8006d96:	f000 fc51 	bl	800763c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	0018      	movs	r0, r3
 8006da4:	f000 f8c2 	bl	8006f2c <MSC_BOT_Abort>
 8006da8:	e044      	b.n	8006e34 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4a24      	ldr	r2, [pc, #144]	; (8006e40 <MSC_BOT_CBW_Decode+0x124>)
 8006dae:	5c99      	ldrb	r1, [r3, r2]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a25      	ldr	r2, [pc, #148]	; (8006e48 <MSC_BOT_CBW_Decode+0x12c>)
 8006db4:	189a      	adds	r2, r3, r2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	0018      	movs	r0, r3
 8006dba:	f000 f917 	bl	8006fec <SCSI_ProcessCmd>
 8006dbe:	1e03      	subs	r3, r0, #0
 8006dc0:	da0e      	bge.n	8006de0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	7a1b      	ldrb	r3, [r3, #8]
 8006dc6:	2b05      	cmp	r3, #5
 8006dc8:	d105      	bne.n	8006dd6 <MSC_BOT_CBW_Decode+0xba>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2101      	movs	r1, #1
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f000 f87a 	bl	8006ec8 <MSC_BOT_SendCSW>
 8006dd4:	e02e      	b.n	8006e34 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f000 f8a7 	bl	8006f2c <MSC_BOT_Abort>
 8006dde:	e029      	b.n	8006e34 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	7a1b      	ldrb	r3, [r3, #8]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d024      	beq.n	8006e32 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d020      	beq.n	8006e32 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d01c      	beq.n	8006e32 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	895b      	ldrh	r3, [r3, #10]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	330c      	adds	r3, #12
 8006e04:	0019      	movs	r1, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	895a      	ldrh	r2, [r3, #10]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f000 f81d 	bl	8006e4c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006e12:	e00f      	b.n	8006e34 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	895b      	ldrh	r3, [r3, #10]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <MSC_BOT_CBW_Decode+0x10c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2100      	movs	r1, #0
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 f851 	bl	8006ec8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006e26:	e005      	b.n	8006e34 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f000 f87e 	bl	8006f2c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006e30:	e000      	b.n	8006e34 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8006e32:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b004      	add	sp, #16
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	43425355 	.word	0x43425355
 8006e40:	00000219 	.word	0x00000219
 8006e44:	0000021a 	.word	0x0000021a
 8006e48:	0000021b 	.word	0x0000021b

08006e4c <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	1dbb      	adds	r3, r7, #6
 8006e58:	801a      	strh	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	23ae      	movs	r3, #174	; 0xae
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	58d3      	ldr	r3, [r2, r3]
 8006e62:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	2385      	movs	r3, #133	; 0x85
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	58d2      	ldr	r2, [r2, r3]
 8006e6c:	1dbb      	adds	r3, r7, #6
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d205      	bcs.n	8006e80 <MSC_BOT_SendData+0x34>
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	2385      	movs	r3, #133	; 0x85
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	58d3      	ldr	r3, [r2, r3]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	e001      	b.n	8006e84 <MSC_BOT_SendData+0x38>
 8006e80:	1dbb      	adds	r3, r7, #6
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	2012      	movs	r0, #18
 8006e86:	183a      	adds	r2, r7, r0
 8006e88:	8013      	strh	r3, [r2, #0]

  hmsc->csw.dDataResidue -= len;
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	238d      	movs	r3, #141	; 0x8d
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	58d2      	ldr	r2, [r2, r3]
 8006e92:	1dbb      	adds	r3, r7, #6
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	1ad1      	subs	r1, r2, r3
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	238d      	movs	r3, #141	; 0x8d
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	50d1      	str	r1, [r2, r3]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	238e      	movs	r3, #142	; 0x8e
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	54d1      	strb	r1, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2204      	movs	r2, #4
 8006eae:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006eb0:	183b      	adds	r3, r7, r0
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	2181      	movs	r1, #129	; 0x81
 8006eba:	f002 fd73 	bl	80099a4 <USBD_LL_Transmit>
}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b006      	add	sp, #24
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	000a      	movs	r2, r1
 8006ed2:	1cfb      	adds	r3, r7, #3
 8006ed4:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	23ae      	movs	r3, #174	; 0xae
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	58d3      	ldr	r3, [r2, r3]
 8006ede:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	238b      	movs	r3, #139	; 0x8b
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4910      	ldr	r1, [pc, #64]	; (8006f28 <MSC_BOT_SendCSW+0x60>)
 8006ee8:	50d1      	str	r1, [r2, r3]
  hmsc->csw.bStatus = CSW_Status;
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	1cf9      	adds	r1, r7, #3
 8006eee:	238e      	movs	r3, #142	; 0x8e
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	7809      	ldrb	r1, [r1, #0]
 8006ef4:	54d1      	strb	r1, [r2, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	228b      	movs	r2, #139	; 0x8b
 8006f00:	0092      	lsls	r2, r2, #2
 8006f02:	189a      	adds	r2, r3, r2
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	230d      	movs	r3, #13
 8006f08:	2181      	movs	r1, #129	; 0x81
 8006f0a:	f002 fd4b 	bl	80099a4 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2283      	movs	r2, #131	; 0x83
 8006f12:	0092      	lsls	r2, r2, #2
 8006f14:	189a      	adds	r2, r3, r2
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	231f      	movs	r3, #31
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	f002 fd7a 	bl	8009a14 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f20:	46c0      	nop			; (mov r8, r8)
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b004      	add	sp, #16
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	53425355 	.word	0x53425355

08006f2c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	23ae      	movs	r3, #174	; 0xae
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	58d3      	ldr	r3, [r2, r3]
 8006f3c:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	2386      	movs	r3, #134	; 0x86
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	5cd3      	ldrb	r3, [r2, r3]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10e      	bne.n	8006f68 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	2385      	movs	r3, #133	; 0x85
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	58d3      	ldr	r3, [r2, r3]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <MSC_BOT_Abort+0x3c>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2101      	movs	r1, #1
 8006f62:	0018      	movs	r0, r3
 8006f64:	f002 fc69 	bl	800983a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2181      	movs	r1, #129	; 0x81
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f002 fc64 	bl	800983a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	7a5b      	ldrb	r3, [r3, #9]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d108      	bne.n	8006f8c <MSC_BOT_Abort+0x60>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2283      	movs	r2, #131	; 0x83
 8006f7e:	0092      	lsls	r2, r2, #2
 8006f80:	189a      	adds	r2, r3, r2
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	231f      	movs	r3, #31
 8006f86:	2101      	movs	r1, #1
 8006f88:	f002 fd44 	bl	8009a14 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006f8c:	46c0      	nop			; (mov r8, r8)
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b004      	add	sp, #16
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	000a      	movs	r2, r1
 8006f9e:	1cfb      	adds	r3, r7, #3
 8006fa0:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	23ae      	movs	r3, #174	; 0xae
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	58d3      	ldr	r3, [r2, r3]
 8006faa:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	7a5b      	ldrb	r3, [r3, #9]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d108      	bne.n	8006fc6 <MSC_BOT_CplClrFeature+0x32>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2181      	movs	r1, #129	; 0x81
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f002 fc3e 	bl	800983a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	725a      	strb	r2, [r3, #9]
 8006fc4:	e00f      	b.n	8006fe6 <MSC_BOT_CplClrFeature+0x52>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006fc6:	1cfb      	adds	r3, r7, #3
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b25b      	sxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	da09      	bge.n	8006fe4 <MSC_BOT_CplClrFeature+0x50>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	7a5b      	ldrb	r3, [r3, #9]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d005      	beq.n	8006fe4 <MSC_BOT_CplClrFeature+0x50>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2101      	movs	r1, #1
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7ff ff73 	bl	8006ec8 <MSC_BOT_SendCSW>
 8006fe2:	e000      	b.n	8006fe6 <MSC_BOT_CplClrFeature+0x52>
  }
  else
  {
    return;
 8006fe4:	46c0      	nop			; (mov r8, r8)
  }
}
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b004      	add	sp, #16
 8006fea:	bd80      	pop	{r7, pc}

08006fec <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	230b      	movs	r3, #11
 8006ff8:	18fb      	adds	r3, r7, r3
 8006ffa:	1c0a      	adds	r2, r1, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
  switch (cmd[0])
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b5a      	cmp	r3, #90	; 0x5a
 8007004:	d870      	bhi.n	80070e8 <SCSI_ProcessCmd+0xfc>
 8007006:	009a      	lsls	r2, r3, #2
 8007008:	4b3f      	ldr	r3, [pc, #252]	; (8007108 <SCSI_ProcessCmd+0x11c>)
 800700a:	18d3      	adds	r3, r2, r3
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	469f      	mov	pc, r3
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	230b      	movs	r3, #11
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	7819      	ldrb	r1, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	0018      	movs	r0, r3
 800701c:	f000 f876 	bl	800710c <SCSI_TestUnitReady>
      break;
 8007020:	e06d      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	230b      	movs	r3, #11
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	7819      	ldrb	r1, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	0018      	movs	r0, r3
 800702e:	f000 fa83 	bl	8007538 <SCSI_RequestSense>
      break;
 8007032:	e064      	b.n	80070fe <SCSI_ProcessCmd+0x112>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	230b      	movs	r3, #11
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	7819      	ldrb	r1, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	0018      	movs	r0, r3
 8007040:	f000 f8a8 	bl	8007194 <SCSI_Inquiry>
      break;
 8007044:	e05b      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	230b      	movs	r3, #11
 800704a:	18fb      	adds	r3, r7, r3
 800704c:	7819      	ldrb	r1, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	0018      	movs	r0, r3
 8007052:	f000 fb35 	bl	80076c0 <SCSI_StartStopUnit>
      break;
 8007056:	e052      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	230b      	movs	r3, #11
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	7819      	ldrb	r1, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	0018      	movs	r0, r3
 8007064:	f000 fb2c 	bl	80076c0 <SCSI_StartStopUnit>
      break;
 8007068:	e049      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	230b      	movs	r3, #11
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	7819      	ldrb	r1, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	0018      	movs	r0, r3
 8007076:	f000 f9f7 	bl	8007468 <SCSI_ModeSense6>
      break;
 800707a:	e040      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	230b      	movs	r3, #11
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	7819      	ldrb	r1, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	0018      	movs	r0, r3
 8007088:	f000 fa22 	bl	80074d0 <SCSI_ModeSense10>
      break;
 800708c:	e037      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	230b      	movs	r3, #11
 8007092:	18fb      	adds	r3, r7, r3
 8007094:	7819      	ldrb	r1, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	0018      	movs	r0, r3
 800709a:	f000 f96d 	bl	8007378 <SCSI_ReadFormatCapacity>
      break;
 800709e:	e02e      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	230b      	movs	r3, #11
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	7819      	ldrb	r1, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	0018      	movs	r0, r3
 80070ac:	f000 f8ee 	bl	800728c <SCSI_ReadCapacity10>
      break;
 80070b0:	e025      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	230b      	movs	r3, #11
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	7819      	ldrb	r1, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	0018      	movs	r0, r3
 80070be:	f000 fb15 	bl	80076ec <SCSI_Read10>
      break;
 80070c2:	e01c      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	230b      	movs	r3, #11
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	7819      	ldrb	r1, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	0018      	movs	r0, r3
 80070d0:	f000 fbb2 	bl	8007838 <SCSI_Write10>
      break;
 80070d4:	e013      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	230b      	movs	r3, #11
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	7819      	ldrb	r1, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	0018      	movs	r0, r3
 80070e2:	f000 fc77 	bl	80079d4 <SCSI_Verify10>
      break;
 80070e6:	e00a      	b.n	80070fe <SCSI_ProcessCmd+0x112>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80070e8:	230b      	movs	r3, #11
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	7819      	ldrb	r1, [r3, #0]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	2320      	movs	r3, #32
 80070f2:	2205      	movs	r2, #5
 80070f4:	f000 faa2 	bl	800763c <SCSI_SenseCode>
      return -1;
 80070f8:	2301      	movs	r3, #1
 80070fa:	425b      	negs	r3, r3
 80070fc:	e000      	b.n	8007100 <SCSI_ProcessCmd+0x114>
  }

  return 0;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	0018      	movs	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	b004      	add	sp, #16
 8007106:	bd80      	pop	{r7, pc}
 8007108:	0800bc78 	.word	0x0800bc78

0800710c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	230b      	movs	r3, #11
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	1c0a      	adds	r2, r1, #0
 800711c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	23ae      	movs	r3, #174	; 0xae
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	58d3      	ldr	r3, [r2, r3]
 8007126:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	2385      	movs	r3, #133	; 0x85
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	58d3      	ldr	r3, [r2, r3]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	4a16      	ldr	r2, [pc, #88]	; (8007190 <SCSI_TestUnitReady+0x84>)
 8007138:	5c99      	ldrb	r1, [r3, r2]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	2320      	movs	r3, #32
 800713e:	2205      	movs	r2, #5
 8007140:	f000 fa7c 	bl	800763c <SCSI_SenseCode>

    return -1;
 8007144:	2301      	movs	r3, #1
 8007146:	425b      	negs	r3, r3
 8007148:	e01d      	b.n	8007186 <SCSI_TestUnitReady+0x7a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	23af      	movs	r3, #175	; 0xaf
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	58d3      	ldr	r3, [r2, r3]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	220b      	movs	r2, #11
 8007156:	18ba      	adds	r2, r7, r2
 8007158:	7812      	ldrb	r2, [r2, #0]
 800715a:	0010      	movs	r0, r2
 800715c:	4798      	blx	r3
 800715e:	1e03      	subs	r3, r0, #0
 8007160:	d00d      	beq.n	800717e <SCSI_TestUnitReady+0x72>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007162:	230b      	movs	r3, #11
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	7819      	ldrb	r1, [r3, #0]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	233a      	movs	r3, #58	; 0x3a
 800716c:	2202      	movs	r2, #2
 800716e:	f000 fa65 	bl	800763c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2205      	movs	r2, #5
 8007176:	721a      	strb	r2, [r3, #8]

    return -1;
 8007178:	2301      	movs	r3, #1
 800717a:	425b      	negs	r3, r3
 800717c:	e003      	b.n	8007186 <SCSI_TestUnitReady+0x7a>
  }
  hmsc->bot_data_length = 0U;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2200      	movs	r2, #0
 8007182:	815a      	strh	r2, [r3, #10]

  return 0;
 8007184:	2300      	movs	r3, #0
}
 8007186:	0018      	movs	r0, r3
 8007188:	46bd      	mov	sp, r7
 800718a:	b006      	add	sp, #24
 800718c:	bd80      	pop	{r7, pc}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	00000219 	.word	0x00000219

08007194 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	607a      	str	r2, [r7, #4]
 800719e:	230b      	movs	r3, #11
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	1c0a      	adds	r2, r1, #0
 80071a4:	701a      	strb	r2, [r3, #0]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	23ae      	movs	r3, #174	; 0xae
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	58d3      	ldr	r3, [r2, r3]
 80071ae:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3301      	adds	r3, #1
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	001a      	movs	r2, r3
 80071b8:	2301      	movs	r3, #1
 80071ba:	4013      	ands	r3, r2
 80071bc:	d01e      	beq.n	80071fc <SCSI_Inquiry+0x68>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80071be:	211e      	movs	r1, #30
 80071c0:	187b      	adds	r3, r7, r1
 80071c2:	2207      	movs	r2, #7
 80071c4:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data_length = len;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	187a      	adds	r2, r7, r1
 80071ca:	8812      	ldrh	r2, [r2, #0]
 80071cc:	815a      	strh	r2, [r3, #10]

    while (len)
 80071ce:	e00f      	b.n	80071f0 <SCSI_Inquiry+0x5c>
    {
      len--;
 80071d0:	211e      	movs	r1, #30
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	881a      	ldrh	r2, [r3, #0]
 80071d6:	187b      	adds	r3, r7, r1
 80071d8:	3a01      	subs	r2, #1
 80071da:	801a      	strh	r2, [r3, #0]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	881a      	ldrh	r2, [r3, #0]
 80071e0:	187b      	adds	r3, r7, r1
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	4928      	ldr	r1, [pc, #160]	; (8007288 <SCSI_Inquiry+0xf4>)
 80071e6:	5c89      	ldrb	r1, [r1, r2]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	18d3      	adds	r3, r2, r3
 80071ec:	1c0a      	adds	r2, r1, #0
 80071ee:	731a      	strb	r2, [r3, #12]
    while (len)
 80071f0:	231e      	movs	r3, #30
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1ea      	bne.n	80071d0 <SCSI_Inquiry+0x3c>
 80071fa:	e03f      	b.n	800727c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	23af      	movs	r3, #175	; 0xaf
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	58d3      	ldr	r3, [r2, r3]
 8007204:	69d9      	ldr	r1, [r3, #28]
 8007206:	230b      	movs	r3, #11
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	0013      	movs	r3, r2
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	189b      	adds	r3, r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	18cb      	adds	r3, r1, r3
 8007216:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	3304      	adds	r3, #4
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	b29a      	uxth	r2, r3
 8007220:	211e      	movs	r1, #30
 8007222:	187b      	adds	r3, r7, r1
 8007224:	3205      	adds	r2, #5
 8007226:	801a      	strh	r2, [r3, #0]

    if (params[4] <= len)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3304      	adds	r3, #4
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	187a      	adds	r2, r7, r1
 8007232:	8812      	ldrh	r2, [r2, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d305      	bcc.n	8007244 <SCSI_Inquiry+0xb0>
    {
      len = params[4];
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3304      	adds	r3, #4
 800723c:	781a      	ldrb	r2, [r3, #0]
 800723e:	231e      	movs	r3, #30
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	801a      	strh	r2, [r3, #0]
    }
    hmsc->bot_data_length = len;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	221e      	movs	r2, #30
 8007248:	18ba      	adds	r2, r7, r2
 800724a:	8812      	ldrh	r2, [r2, #0]
 800724c:	815a      	strh	r2, [r3, #10]

    while (len)
 800724e:	e010      	b.n	8007272 <SCSI_Inquiry+0xde>
    {
      len--;
 8007250:	211e      	movs	r1, #30
 8007252:	187b      	adds	r3, r7, r1
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	187b      	adds	r3, r7, r1
 8007258:	3a01      	subs	r2, #1
 800725a:	801a      	strh	r2, [r3, #0]
      hmsc->bot_data[len] = pPage[len];
 800725c:	187b      	adds	r3, r7, r1
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	18d2      	adds	r2, r2, r3
 8007264:	187b      	adds	r3, r7, r1
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	7811      	ldrb	r1, [r2, #0]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	18d3      	adds	r3, r2, r3
 800726e:	1c0a      	adds	r2, r1, #0
 8007270:	731a      	strb	r2, [r3, #12]
    while (len)
 8007272:	231e      	movs	r3, #30
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e9      	bne.n	8007250 <SCSI_Inquiry+0xbc>
    }
  }

  return 0;
 800727c:	2300      	movs	r3, #0
}
 800727e:	0018      	movs	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	b008      	add	sp, #32
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	0800bc60 	.word	0x0800bc60

0800728c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800728c:	b590      	push	{r4, r7, lr}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	200b      	movs	r0, #11
 8007298:	183b      	adds	r3, r7, r0
 800729a:	1c0a      	adds	r2, r1, #0
 800729c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	23ae      	movs	r3, #174	; 0xae
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	58d3      	ldr	r3, [r2, r3]
 80072a6:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	23af      	movs	r3, #175	; 0xaf
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	58d3      	ldr	r3, [r2, r3]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	2198      	movs	r1, #152	; 0x98
 80072b6:	0089      	lsls	r1, r1, #2
 80072b8:	1851      	adds	r1, r2, r1
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4c2d      	ldr	r4, [pc, #180]	; (8007374 <SCSI_ReadCapacity10+0xe8>)
 80072be:	1914      	adds	r4, r2, r4
 80072c0:	183a      	adds	r2, r7, r0
 80072c2:	7810      	ldrb	r0, [r2, #0]
 80072c4:	0022      	movs	r2, r4
 80072c6:	4798      	blx	r3
 80072c8:	1e03      	subs	r3, r0, #0
 80072ca:	d00a      	beq.n	80072e2 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80072cc:	230b      	movs	r3, #11
 80072ce:	18fb      	adds	r3, r7, r3
 80072d0:	7819      	ldrb	r1, [r3, #0]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	233a      	movs	r3, #58	; 0x3a
 80072d6:	2202      	movs	r2, #2
 80072d8:	f000 f9b0 	bl	800763c <SCSI_SenseCode>
    return -1;
 80072dc:	2301      	movs	r3, #1
 80072de:	425b      	negs	r3, r3
 80072e0:	e043      	b.n	800736a <SCSI_ReadCapacity10+0xde>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	2398      	movs	r3, #152	; 0x98
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	58d3      	ldr	r3, [r2, r3]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	0e1b      	lsrs	r3, r3, #24
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	2398      	movs	r3, #152	; 0x98
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	58d3      	ldr	r3, [r2, r3]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	0c1b      	lsrs	r3, r3, #16
 8007300:	b2da      	uxtb	r2, r3
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	2398      	movs	r3, #152	; 0x98
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	58d3      	ldr	r3, [r2, r3]
 800730e:	3b01      	subs	r3, #1
 8007310:	0a1b      	lsrs	r3, r3, #8
 8007312:	b2da      	uxtb	r2, r3
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	2398      	movs	r3, #152	; 0x98
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	58d3      	ldr	r3, [r2, r3]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b2da      	uxtb	r2, r3
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	4a11      	ldr	r2, [pc, #68]	; (8007374 <SCSI_ReadCapacity10+0xe8>)
 800732e:	5a9b      	ldrh	r3, [r3, r2]
 8007330:	161b      	asrs	r3, r3, #24
 8007332:	b2da      	uxtb	r2, r3
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	4a0e      	ldr	r2, [pc, #56]	; (8007374 <SCSI_ReadCapacity10+0xe8>)
 800733c:	5a9b      	ldrh	r3, [r3, r2]
 800733e:	141b      	asrs	r3, r3, #16
 8007340:	b2da      	uxtb	r2, r3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <SCSI_ReadCapacity10+0xe8>)
 800734a:	5a9b      	ldrh	r3, [r3, r2]
 800734c:	0a1b      	lsrs	r3, r3, #8
 800734e:	b29b      	uxth	r3, r3
 8007350:	b2da      	uxtb	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4a06      	ldr	r2, [pc, #24]	; (8007374 <SCSI_ReadCapacity10+0xe8>)
 800735a:	5a9b      	ldrh	r3, [r3, r2]
 800735c:	b2da      	uxtb	r2, r3
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2208      	movs	r2, #8
 8007366:	815a      	strh	r2, [r3, #10]
    return 0;
 8007368:	2300      	movs	r3, #0
  }
}
 800736a:	0018      	movs	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	b007      	add	sp, #28
 8007370:	bd90      	pop	{r4, r7, pc}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	0000025e 	.word	0x0000025e

08007378 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b089      	sub	sp, #36	; 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	607a      	str	r2, [r7, #4]
 8007382:	230b      	movs	r3, #11
 8007384:	18fb      	adds	r3, r7, r3
 8007386:	1c0a      	adds	r2, r1, #0
 8007388:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	23ae      	movs	r3, #174	; 0xae
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	58d3      	ldr	r3, [r2, r3]
 8007392:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007394:	231e      	movs	r3, #30
 8007396:	18fb      	adds	r3, r7, r3
 8007398:	2200      	movs	r2, #0
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e00b      	b.n	80073b6 <SCSI_ReadFormatCapacity+0x3e>
  {
    hmsc->bot_data[i] = 0U;
 800739e:	211e      	movs	r1, #30
 80073a0:	187b      	adds	r3, r7, r1
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	18d3      	adds	r3, r2, r3
 80073a8:	2200      	movs	r2, #0
 80073aa:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 80073ac:	187b      	adds	r3, r7, r1
 80073ae:	881a      	ldrh	r2, [r3, #0]
 80073b0:	187b      	adds	r3, r7, r1
 80073b2:	3201      	adds	r2, #1
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	231e      	movs	r3, #30
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	2b0b      	cmp	r3, #11
 80073be:	d9ee      	bls.n	800739e <SCSI_ReadFormatCapacity+0x26>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	23af      	movs	r3, #175	; 0xaf
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	58d3      	ldr	r3, [r2, r3]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2216      	movs	r2, #22
 80073cc:	18bc      	adds	r4, r7, r2
 80073ce:	2210      	movs	r2, #16
 80073d0:	18b9      	adds	r1, r7, r2
 80073d2:	220b      	movs	r2, #11
 80073d4:	18ba      	adds	r2, r7, r2
 80073d6:	7810      	ldrb	r0, [r2, #0]
 80073d8:	0022      	movs	r2, r4
 80073da:	4798      	blx	r3
 80073dc:	1e03      	subs	r3, r0, #0
 80073de:	d00a      	beq.n	80073f6 <SCSI_ReadFormatCapacity+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073e0:	230b      	movs	r3, #11
 80073e2:	18fb      	adds	r3, r7, r3
 80073e4:	7819      	ldrb	r1, [r3, #0]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	233a      	movs	r3, #58	; 0x3a
 80073ea:	2202      	movs	r2, #2
 80073ec:	f000 f926 	bl	800763c <SCSI_SenseCode>
    return -1;
 80073f0:	2301      	movs	r3, #1
 80073f2:	425b      	negs	r3, r3
 80073f4:	e034      	b.n	8007460 <SCSI_ReadFormatCapacity+0xe8>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2208      	movs	r2, #8
 80073fa:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	3b01      	subs	r3, #1
 8007400:	0e1b      	lsrs	r3, r3, #24
 8007402:	b2da      	uxtb	r2, r3
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	3b01      	subs	r3, #1
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	b2da      	uxtb	r2, r3
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	3b01      	subs	r3, #1
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	b2da      	uxtb	r2, r3
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2202      	movs	r2, #2
 8007430:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007432:	2116      	movs	r1, #22
 8007434:	187b      	adds	r3, r7, r1
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	141b      	asrs	r3, r3, #16
 800743a:	b2da      	uxtb	r2, r3
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007440:	187b      	adds	r3, r7, r1
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	0a1b      	lsrs	r3, r3, #8
 8007446:	b29b      	uxth	r3, r3
 8007448:	b2da      	uxtb	r2, r3
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800744e:	187b      	adds	r3, r7, r1
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b2da      	uxtb	r2, r3
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	220c      	movs	r2, #12
 800745c:	815a      	strh	r2, [r3, #10]
    return 0;
 800745e:	2300      	movs	r3, #0
  }
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b009      	add	sp, #36	; 0x24
 8007466:	bd90      	pop	{r4, r7, pc}

08007468 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	230b      	movs	r3, #11
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	1c0a      	adds	r2, r1, #0
 8007478:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	23ae      	movs	r3, #174	; 0xae
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	58d3      	ldr	r3, [r2, r3]
 8007482:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007484:	2116      	movs	r1, #22
 8007486:	187b      	adds	r3, r7, r1
 8007488:	2208      	movs	r2, #8
 800748a:	801a      	strh	r2, [r3, #0]
  hmsc->bot_data_length = len;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	187a      	adds	r2, r7, r1
 8007490:	8812      	ldrh	r2, [r2, #0]
 8007492:	815a      	strh	r2, [r3, #10]

  while (len)
 8007494:	e00f      	b.n	80074b6 <SCSI_ModeSense6+0x4e>
  {
    len--;
 8007496:	2116      	movs	r1, #22
 8007498:	187b      	adds	r3, r7, r1
 800749a:	881a      	ldrh	r2, [r3, #0]
 800749c:	187b      	adds	r3, r7, r1
 800749e:	3a01      	subs	r2, #1
 80074a0:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80074a2:	187b      	adds	r3, r7, r1
 80074a4:	881a      	ldrh	r2, [r3, #0]
 80074a6:	187b      	adds	r3, r7, r1
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	4908      	ldr	r1, [pc, #32]	; (80074cc <SCSI_ModeSense6+0x64>)
 80074ac:	5c89      	ldrb	r1, [r1, r2]
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	18d3      	adds	r3, r2, r3
 80074b2:	1c0a      	adds	r2, r1, #0
 80074b4:	731a      	strb	r2, [r3, #12]
  while (len)
 80074b6:	2316      	movs	r3, #22
 80074b8:	18fb      	adds	r3, r7, r3
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1ea      	bne.n	8007496 <SCSI_ModeSense6+0x2e>
  }
  return 0;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	0018      	movs	r0, r3
 80074c4:	46bd      	mov	sp, r7
 80074c6:	b006      	add	sp, #24
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	46c0      	nop			; (mov r8, r8)
 80074cc:	0800bc68 	.word	0x0800bc68

080074d0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	230b      	movs	r3, #11
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	1c0a      	adds	r2, r1, #0
 80074e0:	701a      	strb	r2, [r3, #0]
  uint16_t len = 8U;
 80074e2:	2116      	movs	r1, #22
 80074e4:	187b      	adds	r3, r7, r1
 80074e6:	2208      	movs	r2, #8
 80074e8:	801a      	strh	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	23ae      	movs	r3, #174	; 0xae
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	58d3      	ldr	r3, [r2, r3]
 80074f2:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	187a      	adds	r2, r7, r1
 80074f8:	8812      	ldrh	r2, [r2, #0]
 80074fa:	815a      	strh	r2, [r3, #10]

  while (len)
 80074fc:	e00f      	b.n	800751e <SCSI_ModeSense10+0x4e>
  {
    len--;
 80074fe:	2116      	movs	r1, #22
 8007500:	187b      	adds	r3, r7, r1
 8007502:	881a      	ldrh	r2, [r3, #0]
 8007504:	187b      	adds	r3, r7, r1
 8007506:	3a01      	subs	r2, #1
 8007508:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800750a:	187b      	adds	r3, r7, r1
 800750c:	881a      	ldrh	r2, [r3, #0]
 800750e:	187b      	adds	r3, r7, r1
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	4908      	ldr	r1, [pc, #32]	; (8007534 <SCSI_ModeSense10+0x64>)
 8007514:	5c89      	ldrb	r1, [r1, r2]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	18d3      	adds	r3, r2, r3
 800751a:	1c0a      	adds	r2, r1, #0
 800751c:	731a      	strb	r2, [r3, #12]
  while (len)
 800751e:	2316      	movs	r3, #22
 8007520:	18fb      	adds	r3, r7, r3
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1ea      	bne.n	80074fe <SCSI_ModeSense10+0x2e>
  }

  return 0;
 8007528:	2300      	movs	r3, #0
}
 800752a:	0018      	movs	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	b006      	add	sp, #24
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	0800bc70 	.word	0x0800bc70

08007538 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	230b      	movs	r3, #11
 8007544:	18fb      	adds	r3, r7, r3
 8007546:	1c0a      	adds	r2, r1, #0
 8007548:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	23ae      	movs	r3, #174	; 0xae
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	58d3      	ldr	r3, [r2, r3]
 8007552:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007554:	2317      	movs	r3, #23
 8007556:	18fb      	adds	r3, r7, r3
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	e00b      	b.n	8007576 <SCSI_RequestSense+0x3e>
  {
    hmsc->bot_data[i] = 0U;
 800755e:	2117      	movs	r1, #23
 8007560:	187b      	adds	r3, r7, r1
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	18d3      	adds	r3, r2, r3
 8007568:	2200      	movs	r2, #0
 800756a:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800756c:	187b      	adds	r3, r7, r1
 800756e:	781a      	ldrb	r2, [r3, #0]
 8007570:	187b      	adds	r3, r7, r1
 8007572:	3201      	adds	r2, #1
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	2317      	movs	r3, #23
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b11      	cmp	r3, #17
 800757e:	d9ee      	bls.n	800755e <SCSI_RequestSense+0x26>
  }

  hmsc->bot_data[0] = 0x70U;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2270      	movs	r2, #112	; 0x70
 8007584:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	220c      	movs	r2, #12
 800758a:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	2397      	movs	r3, #151	; 0x97
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	5cd2      	ldrb	r2, [r2, r3]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	4928      	ldr	r1, [pc, #160]	; (8007638 <SCSI_RequestSense+0x100>)
 8007598:	5c5b      	ldrb	r3, [r3, r1]
 800759a:	429a      	cmp	r2, r3
 800759c:	d038      	beq.n	8007610 <SCSI_RequestSense+0xd8>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	2397      	movs	r3, #151	; 0x97
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	5cd3      	ldrb	r3, [r2, r3]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	3347      	adds	r3, #71	; 0x47
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	18d3      	adds	r3, r2, r3
 80075ae:	3304      	adds	r3, #4
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	2397      	movs	r3, #151	; 0x97
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	5cd3      	ldrb	r3, [r2, r3]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	3347      	adds	r3, #71	; 0x47
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	18d3      	adds	r3, r2, r3
 80075c6:	3309      	adds	r3, #9
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	2397      	movs	r3, #151	; 0x97
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	5cd3      	ldrb	r3, [r2, r3]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	3347      	adds	r3, #71	; 0x47
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	18d3      	adds	r3, r2, r3
 80075de:	3308      	adds	r3, #8
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	2397      	movs	r3, #151	; 0x97
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	5cd3      	ldrb	r3, [r2, r3]
 80075ee:	3301      	adds	r3, #1
 80075f0:	b2d9      	uxtb	r1, r3
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	2397      	movs	r3, #151	; 0x97
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	54d1      	strb	r1, [r2, r3]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	2397      	movs	r3, #151	; 0x97
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	5cd3      	ldrb	r3, [r2, r3]
 8007602:	2b04      	cmp	r3, #4
 8007604:	d104      	bne.n	8007610 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	2397      	movs	r3, #151	; 0x97
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	2100      	movs	r1, #0
 800760e:	54d1      	strb	r1, [r2, r3]
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2212      	movs	r2, #18
 8007614:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3304      	adds	r3, #4
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b12      	cmp	r3, #18
 800761e:	d805      	bhi.n	800762c <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	b29a      	uxth	r2, r3
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800762c:	2300      	movs	r3, #0
}
 800762e:	0018      	movs	r0, r3
 8007630:	46bd      	mov	sp, r7
 8007632:	b006      	add	sp, #24
 8007634:	bd80      	pop	{r7, pc}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	0000025d 	.word	0x0000025d

0800763c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800763c:	b590      	push	{r4, r7, lr}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	000c      	movs	r4, r1
 8007646:	0010      	movs	r0, r2
 8007648:	0019      	movs	r1, r3
 800764a:	1cfb      	adds	r3, r7, #3
 800764c:	1c22      	adds	r2, r4, #0
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	1cbb      	adds	r3, r7, #2
 8007652:	1c02      	adds	r2, r0, #0
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	1c7b      	adds	r3, r7, #1
 8007658:	1c0a      	adds	r2, r1, #0
 800765a:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	23ae      	movs	r3, #174	; 0xae
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	58d3      	ldr	r3, [r2, r3]
 8007664:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4a14      	ldr	r2, [pc, #80]	; (80076bc <SCSI_SenseCode+0x80>)
 800766a:	5c9b      	ldrb	r3, [r3, r2]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	3347      	adds	r3, #71	; 0x47
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	18d3      	adds	r3, r2, r3
 8007674:	3304      	adds	r3, #4
 8007676:	1cba      	adds	r2, r7, #2
 8007678:	7812      	ldrb	r2, [r2, #0]
 800767a:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a0f      	ldr	r2, [pc, #60]	; (80076bc <SCSI_SenseCode+0x80>)
 8007680:	5c9b      	ldrb	r3, [r3, r2]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	3347      	adds	r3, #71	; 0x47
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	18d3      	adds	r3, r2, r3
 800768a:	3308      	adds	r3, #8
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_tail++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <SCSI_SenseCode+0x80>)
 8007694:	5c9b      	ldrb	r3, [r3, r2]
 8007696:	3301      	adds	r3, #1
 8007698:	b2d9      	uxtb	r1, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4a07      	ldr	r2, [pc, #28]	; (80076bc <SCSI_SenseCode+0x80>)
 800769e:	5499      	strb	r1, [r3, r2]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a06      	ldr	r2, [pc, #24]	; (80076bc <SCSI_SenseCode+0x80>)
 80076a4:	5c9b      	ldrb	r3, [r3, r2]
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d103      	bne.n	80076b2 <SCSI_SenseCode+0x76>
  {
    hmsc->scsi_sense_tail = 0U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4a03      	ldr	r2, [pc, #12]	; (80076bc <SCSI_SenseCode+0x80>)
 80076ae:	2100      	movs	r1, #0
 80076b0:	5499      	strb	r1, [r3, r2]
  }
}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b005      	add	sp, #20
 80076b8:	bd90      	pop	{r4, r7, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	0000025d 	.word	0x0000025d

080076c0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	607a      	str	r2, [r7, #4]
 80076ca:	230b      	movs	r3, #11
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	1c0a      	adds	r2, r1, #0
 80076d0:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	23ae      	movs	r3, #174	; 0xae
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	58d3      	ldr	r3, [r2, r3]
 80076da:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2200      	movs	r2, #0
 80076e0:	815a      	strh	r2, [r3, #10]
  return 0;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	0018      	movs	r0, r3
 80076e6:	46bd      	mov	sp, r7
 80076e8:	b006      	add	sp, #24
 80076ea:	bd80      	pop	{r7, pc}

080076ec <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	607a      	str	r2, [r7, #4]
 80076f6:	230b      	movs	r3, #11
 80076f8:	18fb      	adds	r3, r7, r3
 80076fa:	1c0a      	adds	r2, r1, #0
 80076fc:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	23ae      	movs	r3, #174	; 0xae
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	58d3      	ldr	r3, [r2, r3]
 8007706:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	7a1b      	ldrb	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d000      	beq.n	8007712 <SCSI_Read10+0x26>
 8007710:	e07d      	b.n	800780e <SCSI_Read10+0x122>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	2386      	movs	r3, #134	; 0x86
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	5cd3      	ldrb	r3, [r2, r3]
 800771a:	b25b      	sxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	db0a      	blt.n	8007736 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	4a43      	ldr	r2, [pc, #268]	; (8007830 <SCSI_Read10+0x144>)
 8007724:	5c99      	ldrb	r1, [r3, r2]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	2320      	movs	r3, #32
 800772a:	2205      	movs	r2, #5
 800772c:	f7ff ff86 	bl	800763c <SCSI_SenseCode>
      return -1;
 8007730:	2301      	movs	r3, #1
 8007732:	425b      	negs	r3, r3
 8007734:	e078      	b.n	8007828 <SCSI_Read10+0x13c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	23af      	movs	r3, #175	; 0xaf
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	58d3      	ldr	r3, [r2, r3]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	220b      	movs	r2, #11
 8007742:	18ba      	adds	r2, r7, r2
 8007744:	7812      	ldrb	r2, [r2, #0]
 8007746:	0010      	movs	r0, r2
 8007748:	4798      	blx	r3
 800774a:	1e03      	subs	r3, r0, #0
 800774c:	d00a      	beq.n	8007764 <SCSI_Read10+0x78>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800774e:	230b      	movs	r3, #11
 8007750:	18fb      	adds	r3, r7, r3
 8007752:	7819      	ldrb	r1, [r3, #0]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	233a      	movs	r3, #58	; 0x3a
 8007758:	2202      	movs	r2, #2
 800775a:	f7ff ff6f 	bl	800763c <SCSI_SenseCode>
      return -1;
 800775e:	2301      	movs	r3, #1
 8007760:	425b      	negs	r3, r3
 8007762:	e061      	b.n	8007828 <SCSI_Read10+0x13c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3302      	adds	r3, #2
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3303      	adds	r3, #3
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007774:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800777e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	3205      	adds	r2, #5
 8007784:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007786:	4313      	orrs	r3, r2
 8007788:	0019      	movs	r1, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	2399      	movs	r3, #153	; 0x99
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	50d1      	str	r1, [r2, r3]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3307      	adds	r3, #7
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	3208      	adds	r2, #8
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	0019      	movs	r1, r3
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	239a      	movs	r3, #154	; 0x9a
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	50d1      	str	r1, [r2, r3]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	2399      	movs	r3, #153	; 0x99
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	58d4      	ldr	r4, [r2, r3]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	239a      	movs	r3, #154	; 0x9a
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	58d2      	ldr	r2, [r2, r3]
 80077bc:	230b      	movs	r3, #11
 80077be:	18fb      	adds	r3, r7, r3
 80077c0:	7819      	ldrb	r1, [r3, #0]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	0013      	movs	r3, r2
 80077c6:	0022      	movs	r2, r4
 80077c8:	f000 f941 	bl	8007a4e <SCSI_CheckAddressRange>
 80077cc:	1e03      	subs	r3, r0, #0
 80077ce:	da02      	bge.n	80077d6 <SCSI_Read10+0xea>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80077d0:	2301      	movs	r3, #1
 80077d2:	425b      	negs	r3, r3
 80077d4:	e028      	b.n	8007828 <SCSI_Read10+0x13c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2202      	movs	r2, #2
 80077da:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	2385      	movs	r3, #133	; 0x85
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	58d2      	ldr	r2, [r2, r3]
 80077e4:	6979      	ldr	r1, [r7, #20]
 80077e6:	239a      	movs	r3, #154	; 0x9a
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	58cb      	ldr	r3, [r1, r3]
 80077ec:	6979      	ldr	r1, [r7, #20]
 80077ee:	4811      	ldr	r0, [pc, #68]	; (8007834 <SCSI_Read10+0x148>)
 80077f0:	5a09      	ldrh	r1, [r1, r0]
 80077f2:	434b      	muls	r3, r1
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d00a      	beq.n	800780e <SCSI_Read10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4a0d      	ldr	r2, [pc, #52]	; (8007830 <SCSI_Read10+0x144>)
 80077fc:	5c99      	ldrb	r1, [r3, r2]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	2320      	movs	r3, #32
 8007802:	2205      	movs	r2, #5
 8007804:	f7ff ff1a 	bl	800763c <SCSI_SenseCode>
      return -1;
 8007808:	2301      	movs	r3, #1
 800780a:	425b      	negs	r3, r3
 800780c:	e00c      	b.n	8007828 <SCSI_Read10+0x13c>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2280      	movs	r2, #128	; 0x80
 8007812:	0092      	lsls	r2, r2, #2
 8007814:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8007816:	230b      	movs	r3, #11
 8007818:	18fb      	adds	r3, r7, r3
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	0011      	movs	r1, r2
 8007820:	0018      	movs	r0, r3
 8007822:	f000 f93d 	bl	8007aa0 <SCSI_ProcessRead>
 8007826:	0003      	movs	r3, r0
}
 8007828:	0018      	movs	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	b007      	add	sp, #28
 800782e:	bd90      	pop	{r4, r7, pc}
 8007830:	00000219 	.word	0x00000219
 8007834:	0000025e 	.word	0x0000025e

08007838 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007838:	b590      	push	{r4, r7, lr}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	607a      	str	r2, [r7, #4]
 8007842:	230b      	movs	r3, #11
 8007844:	18fb      	adds	r3, r7, r3
 8007846:	1c0a      	adds	r2, r1, #0
 8007848:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	23ae      	movs	r3, #174	; 0xae
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	58d3      	ldr	r3, [r2, r3]
 8007852:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	7a1b      	ldrb	r3, [r3, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d000      	beq.n	800785e <SCSI_Write10+0x26>
 800785c:	e0a9      	b.n	80079b2 <SCSI_Write10+0x17a>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	2386      	movs	r3, #134	; 0x86
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	5cd3      	ldrb	r3, [r2, r3]
 8007866:	b25b      	sxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	da0a      	bge.n	8007882 <SCSI_Write10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	4a57      	ldr	r2, [pc, #348]	; (80079cc <SCSI_Write10+0x194>)
 8007870:	5c99      	ldrb	r1, [r3, r2]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	2320      	movs	r3, #32
 8007876:	2205      	movs	r2, #5
 8007878:	f7ff fee0 	bl	800763c <SCSI_SenseCode>
      return -1;
 800787c:	2301      	movs	r3, #1
 800787e:	425b      	negs	r3, r3
 8007880:	e0a0      	b.n	80079c4 <SCSI_Write10+0x18c>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	23af      	movs	r3, #175	; 0xaf
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	58d3      	ldr	r3, [r2, r3]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	220b      	movs	r2, #11
 800788e:	18ba      	adds	r2, r7, r2
 8007890:	7812      	ldrb	r2, [r2, #0]
 8007892:	0010      	movs	r0, r2
 8007894:	4798      	blx	r3
 8007896:	1e03      	subs	r3, r0, #0
 8007898:	d00a      	beq.n	80078b0 <SCSI_Write10+0x78>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800789a:	230b      	movs	r3, #11
 800789c:	18fb      	adds	r3, r7, r3
 800789e:	7819      	ldrb	r1, [r3, #0]
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	233a      	movs	r3, #58	; 0x3a
 80078a4:	2202      	movs	r2, #2
 80078a6:	f7ff fec9 	bl	800763c <SCSI_SenseCode>
      return -1;
 80078aa:	2301      	movs	r3, #1
 80078ac:	425b      	negs	r3, r3
 80078ae:	e089      	b.n	80079c4 <SCSI_Write10+0x18c>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	23af      	movs	r3, #175	; 0xaf
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	58d3      	ldr	r3, [r2, r3]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	220b      	movs	r2, #11
 80078bc:	18ba      	adds	r2, r7, r2
 80078be:	7812      	ldrb	r2, [r2, #0]
 80078c0:	0010      	movs	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	1e03      	subs	r3, r0, #0
 80078c6:	d00a      	beq.n	80078de <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80078c8:	230b      	movs	r3, #11
 80078ca:	18fb      	adds	r3, r7, r3
 80078cc:	7819      	ldrb	r1, [r3, #0]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	2327      	movs	r3, #39	; 0x27
 80078d2:	2202      	movs	r2, #2
 80078d4:	f7ff feb2 	bl	800763c <SCSI_SenseCode>
      return -1;
 80078d8:	2301      	movs	r3, #1
 80078da:	425b      	negs	r3, r3
 80078dc:	e072      	b.n	80079c4 <SCSI_Write10+0x18c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3302      	adds	r3, #2
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3303      	adds	r3, #3
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078ee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80078f8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	3205      	adds	r2, #5
 80078fe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007900:	4313      	orrs	r3, r2
 8007902:	0019      	movs	r1, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	2399      	movs	r3, #153	; 0x99
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	50d1      	str	r1, [r2, r3]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3307      	adds	r3, #7
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	3208      	adds	r2, #8
 8007918:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800791a:	4313      	orrs	r3, r2
 800791c:	0019      	movs	r1, r3
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	239a      	movs	r3, #154	; 0x9a
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	50d1      	str	r1, [r2, r3]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	2399      	movs	r3, #153	; 0x99
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	58d4      	ldr	r4, [r2, r3]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	239a      	movs	r3, #154	; 0x9a
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	58d2      	ldr	r2, [r2, r3]
 8007936:	230b      	movs	r3, #11
 8007938:	18fb      	adds	r3, r7, r3
 800793a:	7819      	ldrb	r1, [r3, #0]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	0013      	movs	r3, r2
 8007940:	0022      	movs	r2, r4
 8007942:	f000 f884 	bl	8007a4e <SCSI_CheckAddressRange>
 8007946:	1e03      	subs	r3, r0, #0
 8007948:	da02      	bge.n	8007950 <SCSI_Write10+0x118>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800794a:	2301      	movs	r3, #1
 800794c:	425b      	negs	r3, r3
 800794e:	e039      	b.n	80079c4 <SCSI_Write10+0x18c>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	239a      	movs	r3, #154	; 0x9a
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	58d3      	ldr	r3, [r2, r3]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	491d      	ldr	r1, [pc, #116]	; (80079d0 <SCSI_Write10+0x198>)
 800795c:	5a52      	ldrh	r2, [r2, r1]
 800795e:	4353      	muls	r3, r2
 8007960:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	2385      	movs	r3, #133	; 0x85
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	58d3      	ldr	r3, [r2, r3]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	429a      	cmp	r2, r3
 800796e:	d00a      	beq.n	8007986 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	4a16      	ldr	r2, [pc, #88]	; (80079cc <SCSI_Write10+0x194>)
 8007974:	5c99      	ldrb	r1, [r3, r2]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	2320      	movs	r3, #32
 800797a:	2205      	movs	r2, #5
 800797c:	f7ff fe5e 	bl	800763c <SCSI_SenseCode>
      return -1;
 8007980:	2301      	movs	r3, #1
 8007982:	425b      	negs	r3, r3
 8007984:	e01e      	b.n	80079c4 <SCSI_Write10+0x18c>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2280      	movs	r2, #128	; 0x80
 800798a:	0092      	lsls	r2, r2, #2
 800798c:	4293      	cmp	r3, r2
 800798e:	d901      	bls.n	8007994 <SCSI_Write10+0x15c>
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2201      	movs	r2, #1
 800799a:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	330c      	adds	r3, #12
 80079a0:	001a      	movs	r2, r3
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	2101      	movs	r1, #1
 80079aa:	f002 f833 	bl	8009a14 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e008      	b.n	80079c4 <SCSI_Write10+0x18c>
    return SCSI_ProcessWrite(pdev, lun);
 80079b2:	230b      	movs	r3, #11
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	781a      	ldrb	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	0011      	movs	r1, r2
 80079bc:	0018      	movs	r0, r3
 80079be:	f000 f8f9 	bl	8007bb4 <SCSI_ProcessWrite>
 80079c2:	0003      	movs	r3, r0
}
 80079c4:	0018      	movs	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b007      	add	sp, #28
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	00000219 	.word	0x00000219
 80079d0:	0000025e 	.word	0x0000025e

080079d4 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80079d4:	b590      	push	{r4, r7, lr}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	607a      	str	r2, [r7, #4]
 80079de:	230b      	movs	r3, #11
 80079e0:	18fb      	adds	r3, r7, r3
 80079e2:	1c0a      	adds	r2, r1, #0
 80079e4:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	23ae      	movs	r3, #174	; 0xae
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	58d3      	ldr	r3, [r2, r3]
 80079ee:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3301      	adds	r3, #1
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	001a      	movs	r2, r3
 80079f8:	2302      	movs	r3, #2
 80079fa:	4013      	ands	r3, r2
 80079fc:	d00a      	beq.n	8007a14 <SCSI_Verify10+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80079fe:	230b      	movs	r3, #11
 8007a00:	18fb      	adds	r3, r7, r3
 8007a02:	7819      	ldrb	r1, [r3, #0]
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	2324      	movs	r3, #36	; 0x24
 8007a08:	2205      	movs	r2, #5
 8007a0a:	f7ff fe17 	bl	800763c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007a0e:	2301      	movs	r3, #1
 8007a10:	425b      	negs	r3, r3
 8007a12:	e018      	b.n	8007a46 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	2399      	movs	r3, #153	; 0x99
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	58d4      	ldr	r4, [r2, r3]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	239a      	movs	r3, #154	; 0x9a
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	58d2      	ldr	r2, [r2, r3]
 8007a24:	230b      	movs	r3, #11
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	7819      	ldrb	r1, [r3, #0]
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	0013      	movs	r3, r2
 8007a2e:	0022      	movs	r2, r4
 8007a30:	f000 f80d 	bl	8007a4e <SCSI_CheckAddressRange>
 8007a34:	1e03      	subs	r3, r0, #0
 8007a36:	da02      	bge.n	8007a3e <SCSI_Verify10+0x6a>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007a38:	2301      	movs	r3, #1
 8007a3a:	425b      	negs	r3, r3
 8007a3c:	e003      	b.n	8007a46 <SCSI_Verify10+0x72>
  }
  hmsc->bot_data_length = 0U;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2200      	movs	r2, #0
 8007a42:	815a      	strh	r2, [r3, #10]
  return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	0018      	movs	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b007      	add	sp, #28
 8007a4c:	bd90      	pop	{r4, r7, pc}

08007a4e <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b086      	sub	sp, #24
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
 8007a5a:	230b      	movs	r3, #11
 8007a5c:	18fb      	adds	r3, r7, r3
 8007a5e:	1c0a      	adds	r2, r1, #0
 8007a60:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	23ae      	movs	r3, #174	; 0xae
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	58d3      	ldr	r3, [r2, r3]
 8007a6a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	18d2      	adds	r2, r2, r3
 8007a72:	6979      	ldr	r1, [r7, #20]
 8007a74:	2398      	movs	r3, #152	; 0x98
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	58cb      	ldr	r3, [r1, r3]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d90a      	bls.n	8007a94 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007a7e:	230b      	movs	r3, #11
 8007a80:	18fb      	adds	r3, r7, r3
 8007a82:	7819      	ldrb	r1, [r3, #0]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	2321      	movs	r3, #33	; 0x21
 8007a88:	2205      	movs	r2, #5
 8007a8a:	f7ff fdd7 	bl	800763c <SCSI_SenseCode>
    return -1;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	425b      	negs	r3, r3
 8007a92:	e000      	b.n	8007a96 <SCSI_CheckAddressRange+0x48>
  }
  return 0;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	0018      	movs	r0, r3
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b006      	add	sp, #24
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	000a      	movs	r2, r1
 8007aaa:	1cfb      	adds	r3, r7, #3
 8007aac:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	23ae      	movs	r3, #174	; 0xae
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	58d3      	ldr	r3, [r2, r3]
 8007ab6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	239a      	movs	r3, #154	; 0x9a
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	58d3      	ldr	r3, [r2, r3]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	493b      	ldr	r1, [pc, #236]	; (8007bb0 <SCSI_ProcessRead+0x110>)
 8007ac4:	5a52      	ldrh	r2, [r2, r1]
 8007ac6:	4353      	muls	r3, r2
 8007ac8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2280      	movs	r2, #128	; 0x80
 8007ace:	0092      	lsls	r2, r2, #2
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d901      	bls.n	8007ad8 <SCSI_ProcessRead+0x38>
 8007ad4:	2380      	movs	r3, #128	; 0x80
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	23af      	movs	r3, #175	; 0xaf
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	58d3      	ldr	r3, [r2, r3]
 8007ae2:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	001d      	movs	r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	2399      	movs	r3, #153	; 0x99
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	58d6      	ldr	r6, [r2, r3]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4a2e      	ldr	r2, [pc, #184]	; (8007bb0 <SCSI_ProcessRead+0x110>)
 8007af6:	5a9b      	ldrh	r3, [r3, r2]
 8007af8:	0019      	movs	r1, r3
 8007afa:	68b8      	ldr	r0, [r7, #8]
 8007afc:	f7f8 fb04 	bl	8000108 <__udivsi3>
 8007b00:	0003      	movs	r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	1cfb      	adds	r3, r7, #3
 8007b06:	7818      	ldrb	r0, [r3, #0]
 8007b08:	0013      	movs	r3, r2
 8007b0a:	0032      	movs	r2, r6
 8007b0c:	0029      	movs	r1, r5
 8007b0e:	47a0      	blx	r4
 8007b10:	1e03      	subs	r3, r0, #0
 8007b12:	da09      	bge.n	8007b28 <SCSI_ProcessRead+0x88>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007b14:	1cfb      	adds	r3, r7, #3
 8007b16:	7819      	ldrb	r1, [r3, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	2311      	movs	r3, #17
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	f7ff fd8d 	bl	800763c <SCSI_SenseCode>
    return -1;
 8007b22:	2301      	movs	r3, #1
 8007b24:	425b      	negs	r3, r3
 8007b26:	e03e      	b.n	8007ba6 <SCSI_ProcessRead+0x106>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	330c      	adds	r3, #12
 8007b2c:	001a      	movs	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	2181      	movs	r1, #129	; 0x81
 8007b36:	f001 ff35 	bl	80099a4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	2399      	movs	r3, #153	; 0x99
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	58d4      	ldr	r4, [r2, r3]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4a1a      	ldr	r2, [pc, #104]	; (8007bb0 <SCSI_ProcessRead+0x110>)
 8007b46:	5a9b      	ldrh	r3, [r3, r2]
 8007b48:	0019      	movs	r1, r3
 8007b4a:	68b8      	ldr	r0, [r7, #8]
 8007b4c:	f7f8 fadc 	bl	8000108 <__udivsi3>
 8007b50:	0003      	movs	r3, r0
 8007b52:	18e1      	adds	r1, r4, r3
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	2399      	movs	r3, #153	; 0x99
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	50d1      	str	r1, [r2, r3]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	239a      	movs	r3, #154	; 0x9a
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	58d4      	ldr	r4, [r2, r3]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4a12      	ldr	r2, [pc, #72]	; (8007bb0 <SCSI_ProcessRead+0x110>)
 8007b68:	5a9b      	ldrh	r3, [r3, r2]
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	68b8      	ldr	r0, [r7, #8]
 8007b6e:	f7f8 facb 	bl	8000108 <__udivsi3>
 8007b72:	0003      	movs	r3, r0
 8007b74:	1ae1      	subs	r1, r4, r3
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	239a      	movs	r3, #154	; 0x9a
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	50d1      	str	r1, [r2, r3]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	238d      	movs	r3, #141	; 0x8d
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	58d2      	ldr	r2, [r2, r3]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	1ad1      	subs	r1, r2, r3
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	238d      	movs	r3, #141	; 0x8d
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	50d1      	str	r1, [r2, r3]

  if (hmsc->scsi_blk_len == 0U)
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	239a      	movs	r3, #154	; 0x9a
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	58d3      	ldr	r3, [r2, r3]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <SCSI_ProcessRead+0x104>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	b005      	add	sp, #20
 8007bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	0000025e 	.word	0x0000025e

08007bb4 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	000a      	movs	r2, r1
 8007bbe:	1cfb      	adds	r3, r7, #3
 8007bc0:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	23ae      	movs	r3, #174	; 0xae
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	58d3      	ldr	r3, [r2, r3]
 8007bca:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	239a      	movs	r3, #154	; 0x9a
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	58d3      	ldr	r3, [r2, r3]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4944      	ldr	r1, [pc, #272]	; (8007ce8 <SCSI_ProcessWrite+0x134>)
 8007bd8:	5a52      	ldrh	r2, [r2, r1]
 8007bda:	4353      	muls	r3, r2
 8007bdc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2280      	movs	r2, #128	; 0x80
 8007be2:	0092      	lsls	r2, r2, #2
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d901      	bls.n	8007bec <SCSI_ProcessWrite+0x38>
 8007be8:	2380      	movs	r3, #128	; 0x80
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	23af      	movs	r3, #175	; 0xaf
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	58d3      	ldr	r3, [r2, r3]
 8007bf6:	695c      	ldr	r4, [r3, #20]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	330c      	adds	r3, #12
 8007bfc:	001d      	movs	r5, r3
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	2399      	movs	r3, #153	; 0x99
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	58d6      	ldr	r6, [r2, r3]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a37      	ldr	r2, [pc, #220]	; (8007ce8 <SCSI_ProcessWrite+0x134>)
 8007c0a:	5a9b      	ldrh	r3, [r3, r2]
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	68b8      	ldr	r0, [r7, #8]
 8007c10:	f7f8 fa7a 	bl	8000108 <__udivsi3>
 8007c14:	0003      	movs	r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	1cfb      	adds	r3, r7, #3
 8007c1a:	7818      	ldrb	r0, [r3, #0]
 8007c1c:	0013      	movs	r3, r2
 8007c1e:	0032      	movs	r2, r6
 8007c20:	0029      	movs	r1, r5
 8007c22:	47a0      	blx	r4
 8007c24:	1e03      	subs	r3, r0, #0
 8007c26:	da09      	bge.n	8007c3c <SCSI_ProcessWrite+0x88>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007c28:	1cfb      	adds	r3, r7, #3
 8007c2a:	7819      	ldrb	r1, [r3, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	2303      	movs	r3, #3
 8007c30:	2204      	movs	r2, #4
 8007c32:	f7ff fd03 	bl	800763c <SCSI_SenseCode>

    return -1;
 8007c36:	2301      	movs	r3, #1
 8007c38:	425b      	negs	r3, r3
 8007c3a:	e050      	b.n	8007cde <SCSI_ProcessWrite+0x12a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	2399      	movs	r3, #153	; 0x99
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	58d4      	ldr	r4, [r2, r3]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4a28      	ldr	r2, [pc, #160]	; (8007ce8 <SCSI_ProcessWrite+0x134>)
 8007c48:	5a9b      	ldrh	r3, [r3, r2]
 8007c4a:	0019      	movs	r1, r3
 8007c4c:	68b8      	ldr	r0, [r7, #8]
 8007c4e:	f7f8 fa5b 	bl	8000108 <__udivsi3>
 8007c52:	0003      	movs	r3, r0
 8007c54:	18e1      	adds	r1, r4, r3
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	2399      	movs	r3, #153	; 0x99
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	50d1      	str	r1, [r2, r3]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	239a      	movs	r3, #154	; 0x9a
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	58d4      	ldr	r4, [r2, r3]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4a1f      	ldr	r2, [pc, #124]	; (8007ce8 <SCSI_ProcessWrite+0x134>)
 8007c6a:	5a9b      	ldrh	r3, [r3, r2]
 8007c6c:	0019      	movs	r1, r3
 8007c6e:	68b8      	ldr	r0, [r7, #8]
 8007c70:	f7f8 fa4a 	bl	8000108 <__udivsi3>
 8007c74:	0003      	movs	r3, r0
 8007c76:	1ae1      	subs	r1, r4, r3
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	239a      	movs	r3, #154	; 0x9a
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	50d1      	str	r1, [r2, r3]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	238d      	movs	r3, #141	; 0x8d
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	58d2      	ldr	r2, [r2, r3]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	1ad1      	subs	r1, r2, r3
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	238d      	movs	r3, #141	; 0x8d
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	50d1      	str	r1, [r2, r3]

  if (hmsc->scsi_blk_len == 0U)
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	239a      	movs	r3, #154	; 0x9a
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	58d3      	ldr	r3, [r2, r3]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <SCSI_ProcessWrite+0xf8>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f7ff f90f 	bl	8006ec8 <MSC_BOT_SendCSW>
 8007caa:	e017      	b.n	8007cdc <SCSI_ProcessWrite+0x128>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	239a      	movs	r3, #154	; 0x9a
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	58d3      	ldr	r3, [r2, r3]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	490c      	ldr	r1, [pc, #48]	; (8007ce8 <SCSI_ProcessWrite+0x134>)
 8007cb8:	5a52      	ldrh	r2, [r2, r1]
 8007cba:	4353      	muls	r3, r2
 8007cbc:	2280      	movs	r2, #128	; 0x80
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d901      	bls.n	8007cc8 <SCSI_ProcessWrite+0x114>
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	001a      	movs	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	f001 fe9c 	bl	8009a14 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	0018      	movs	r0, r3
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	b005      	add	sp, #20
 8007ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	0000025e 	.word	0x0000025e

08007cec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	1dfb      	adds	r3, r7, #7
 8007cf8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d00:	2302      	movs	r3, #2
 8007d02:	e020      	b.n	8007d46 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	23ad      	movs	r3, #173	; 0xad
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	58d3      	ldr	r3, [r2, r3]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	23ad      	movs	r3, #173	; 0xad
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	2100      	movs	r1, #0
 8007d18:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	23ac      	movs	r3, #172	; 0xac
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	23a7      	movs	r3, #167	; 0xa7
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	2101      	movs	r1, #1
 8007d32:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	1dfa      	adds	r2, r7, #7
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f001 fc6e 	bl	8009620 <USBD_LL_Init>

  return USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b004      	add	sp, #16
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007d58:	230f      	movs	r3, #15
 8007d5a:	18fb      	adds	r3, r7, r3
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	23ad      	movs	r3, #173	; 0xad
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007d70:	230f      	movs	r3, #15
 8007d72:	18fb      	adds	r3, r7, r3
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	e003      	b.n	8007d82 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d7a:	230f      	movs	r3, #15
 8007d7c:	18fb      	adds	r3, r7, r3
 8007d7e:	2202      	movs	r2, #2
 8007d80:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007d82:	230f      	movs	r3, #15
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	781b      	ldrb	r3, [r3, #0]
}
 8007d88:	0018      	movs	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b004      	add	sp, #16
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f001 fc98 	bl	80096d0 <USBD_LL_Start>

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	0018      	movs	r0, r3
 8007da4:	46bd      	mov	sp, r7
 8007da6:	b002      	add	sp, #8
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	0018      	movs	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b002      	add	sp, #8
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	000a      	movs	r2, r1
 8007dc6:	1cfb      	adds	r3, r7, #3
 8007dc8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007dca:	230f      	movs	r3, #15
 8007dcc:	18fb      	adds	r3, r7, r3
 8007dce:	2202      	movs	r2, #2
 8007dd0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	23ad      	movs	r3, #173	; 0xad
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	58d3      	ldr	r3, [r2, r3]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00f      	beq.n	8007dfe <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	23ad      	movs	r3, #173	; 0xad
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	58d3      	ldr	r3, [r2, r3]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	1cfa      	adds	r2, r7, #3
 8007dea:	7811      	ldrb	r1, [r2, #0]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	0010      	movs	r0, r2
 8007df0:	4798      	blx	r3
 8007df2:	1e03      	subs	r3, r0, #0
 8007df4:	d103      	bne.n	8007dfe <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8007df6:	230f      	movs	r3, #15
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007dfe:	230f      	movs	r3, #15
 8007e00:	18fb      	adds	r3, r7, r3
 8007e02:	781b      	ldrb	r3, [r3, #0]
}
 8007e04:	0018      	movs	r0, r3
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b004      	add	sp, #16
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	000a      	movs	r2, r1
 8007e16:	1cfb      	adds	r3, r7, #3
 8007e18:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	23ad      	movs	r3, #173	; 0xad
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	58d3      	ldr	r3, [r2, r3]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	1cfa      	adds	r2, r7, #3
 8007e26:	7811      	ldrb	r1, [r2, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	0010      	movs	r0, r2
 8007e2c:	4798      	blx	r3

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	0018      	movs	r0, r3
 8007e32:	46bd      	mov	sp, r7
 8007e34:	b002      	add	sp, #8
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	22aa      	movs	r2, #170	; 0xaa
 8007e46:	0092      	lsls	r2, r2, #2
 8007e48:	4694      	mov	ip, r2
 8007e4a:	4463      	add	r3, ip
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	0011      	movs	r1, r2
 8007e50:	0018      	movs	r0, r3
 8007e52:	f001 f817 	bl	8008e84 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	23a5      	movs	r3, #165	; 0xa5
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a22      	ldr	r2, [pc, #136]	; (8007eec <USBD_LL_SetupStage+0xb4>)
 8007e64:	5a9b      	ldrh	r3, [r3, r2]
 8007e66:	0019      	movs	r1, r3
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	23a6      	movs	r3, #166	; 0xa6
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	23aa      	movs	r3, #170	; 0xaa
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	5cd3      	ldrb	r3, [r2, r3]
 8007e78:	001a      	movs	r2, r3
 8007e7a:	231f      	movs	r3, #31
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d00d      	beq.n	8007e9e <USBD_LL_SetupStage+0x66>
 8007e82:	d302      	bcc.n	8007e8a <USBD_LL_SetupStage+0x52>
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d014      	beq.n	8007eb2 <USBD_LL_SetupStage+0x7a>
 8007e88:	e01d      	b.n	8007ec6 <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	22aa      	movs	r2, #170	; 0xaa
 8007e8e:	0092      	lsls	r2, r2, #2
 8007e90:	189a      	adds	r2, r3, r2
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	0011      	movs	r1, r2
 8007e96:	0018      	movs	r0, r3
 8007e98:	f000 fa10 	bl	80082bc <USBD_StdDevReq>
      break;
 8007e9c:	e020      	b.n	8007ee0 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	22aa      	movs	r2, #170	; 0xaa
 8007ea2:	0092      	lsls	r2, r2, #2
 8007ea4:	189a      	adds	r2, r3, r2
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	0011      	movs	r1, r2
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f000 fa78 	bl	80083a0 <USBD_StdItfReq>
      break;
 8007eb0:	e016      	b.n	8007ee0 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	22aa      	movs	r2, #170	; 0xaa
 8007eb6:	0092      	lsls	r2, r2, #2
 8007eb8:	189a      	adds	r2, r3, r2
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f000 fac5 	bl	800844e <USBD_StdEPReq>
      break;
 8007ec4:	e00c      	b.n	8007ee0 <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	23aa      	movs	r3, #170	; 0xaa
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	5cd3      	ldrb	r3, [r2, r3]
 8007ece:	227f      	movs	r2, #127	; 0x7f
 8007ed0:	4393      	bics	r3, r2
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	0011      	movs	r1, r2
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f001 fcae 	bl	800983a <USBD_LL_StallEP>
      break;
 8007ede:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	b002      	add	sp, #8
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	000002ae 	.word	0x000002ae

08007ef0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	607a      	str	r2, [r7, #4]
 8007efa:	200b      	movs	r0, #11
 8007efc:	183b      	adds	r3, r7, r0
 8007efe:	1c0a      	adds	r2, r1, #0
 8007f00:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f02:	183b      	adds	r3, r7, r0
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d154      	bne.n	8007fb4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3355      	adds	r3, #85	; 0x55
 8007f0e:	33ff      	adds	r3, #255	; 0xff
 8007f10:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	23a5      	movs	r3, #165	; 0xa5
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	58d3      	ldr	r3, [r2, r3]
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d139      	bne.n	8007f92 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d919      	bls.n	8007f5e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d203      	bcs.n	8007f4c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	e002      	b.n	8007f52 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	001a      	movs	r2, r3
 8007f58:	f001 f881 	bl	800905e <USBD_CtlContinueRx>
 8007f5c:	e045      	b.n	8007fea <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	23ad      	movs	r3, #173	; 0xad
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	58d3      	ldr	r3, [r2, r3]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00d      	beq.n	8007f88 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	23a7      	movs	r3, #167	; 0xa7
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d107      	bne.n	8007f88 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	23ad      	movs	r3, #173	; 0xad
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	58d3      	ldr	r3, [r2, r3]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	0010      	movs	r0, r2
 8007f86:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f001 f87a 	bl	8009084 <USBD_CtlSendStatus>
 8007f90:	e02b      	b.n	8007fea <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	23a5      	movs	r3, #165	; 0xa5
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	58d3      	ldr	r3, [r2, r3]
 8007f9a:	2b05      	cmp	r3, #5
 8007f9c:	d125      	bne.n	8007fea <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	23a5      	movs	r3, #165	; 0xa5
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2100      	movs	r1, #0
 8007fac:	0018      	movs	r0, r3
 8007fae:	f001 fc44 	bl	800983a <USBD_LL_StallEP>
 8007fb2:	e01a      	b.n	8007fea <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	23ad      	movs	r3, #173	; 0xad
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	58d3      	ldr	r3, [r2, r3]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d011      	beq.n	8007fe6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	23a7      	movs	r3, #167	; 0xa7
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d10b      	bne.n	8007fe6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	23ad      	movs	r3, #173	; 0xad
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	58d3      	ldr	r3, [r2, r3]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	220b      	movs	r2, #11
 8007fda:	18ba      	adds	r2, r7, r2
 8007fdc:	7811      	ldrb	r1, [r2, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	0010      	movs	r0, r2
 8007fe2:	4798      	blx	r3
 8007fe4:	e001      	b.n	8007fea <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e000      	b.n	8007fec <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	0018      	movs	r0, r3
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b006      	add	sp, #24
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	607a      	str	r2, [r7, #4]
 8007ffe:	200b      	movs	r0, #11
 8008000:	183b      	adds	r3, r7, r0
 8008002:	1c0a      	adds	r2, r1, #0
 8008004:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008006:	183b      	adds	r3, r7, r0
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d000      	beq.n	8008010 <USBD_LL_DataInStage+0x1c>
 800800e:	e08e      	b.n	800812e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3314      	adds	r3, #20
 8008014:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	23a5      	movs	r3, #165	; 0xa5
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	58d3      	ldr	r3, [r2, r3]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d164      	bne.n	80080ec <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	429a      	cmp	r2, r3
 800802c:	d915      	bls.n	800805a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	1ad2      	subs	r2, r2, r3
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	b29a      	uxth	r2, r3
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	0018      	movs	r0, r3
 8008048:	f000 fff6 	bl	8009038 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	2300      	movs	r3, #0
 8008050:	2200      	movs	r2, #0
 8008052:	2100      	movs	r1, #0
 8008054:	f001 fcde 	bl	8009a14 <USBD_LL_PrepareReceive>
 8008058:	e059      	b.n	800810e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	0019      	movs	r1, r3
 8008064:	0010      	movs	r0, r2
 8008066:	f7f8 f8d5 	bl	8000214 <__aeabi_uidivmod>
 800806a:	1e0b      	subs	r3, r1, #0
 800806c:	d11f      	bne.n	80080ae <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	689a      	ldr	r2, [r3, #8]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008076:	429a      	cmp	r2, r3
 8008078:	d319      	bcc.n	80080ae <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	23a6      	movs	r3, #166	; 0xa6
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008086:	429a      	cmp	r2, r3
 8008088:	d211      	bcs.n	80080ae <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	2100      	movs	r1, #0
 8008090:	0018      	movs	r0, r3
 8008092:	f000 ffd1 	bl	8009038 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	23a6      	movs	r3, #166	; 0xa6
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	2100      	movs	r1, #0
 800809e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	2300      	movs	r3, #0
 80080a4:	2200      	movs	r2, #0
 80080a6:	2100      	movs	r1, #0
 80080a8:	f001 fcb4 	bl	8009a14 <USBD_LL_PrepareReceive>
 80080ac:	e02f      	b.n	800810e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	23ad      	movs	r3, #173	; 0xad
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	58d3      	ldr	r3, [r2, r3]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00d      	beq.n	80080d8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	23a7      	movs	r3, #167	; 0xa7
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d107      	bne.n	80080d8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	23ad      	movs	r3, #173	; 0xad
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	58d3      	ldr	r3, [r2, r3]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	0010      	movs	r0, r2
 80080d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2180      	movs	r1, #128	; 0x80
 80080dc:	0018      	movs	r0, r3
 80080de:	f001 fbac 	bl	800983a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	0018      	movs	r0, r3
 80080e6:	f000 ffe1 	bl	80090ac <USBD_CtlReceiveStatus>
 80080ea:	e010      	b.n	800810e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	23a5      	movs	r3, #165	; 0xa5
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	58d3      	ldr	r3, [r2, r3]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d005      	beq.n	8008104 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	23a5      	movs	r3, #165	; 0xa5
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008100:	2b00      	cmp	r3, #0
 8008102:	d104      	bne.n	800810e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2180      	movs	r1, #128	; 0x80
 8008108:	0018      	movs	r0, r3
 800810a:	f001 fb96 	bl	800983a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	23a8      	movs	r3, #168	; 0xa8
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	5cd3      	ldrb	r3, [r2, r3]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d124      	bne.n	8008164 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	0018      	movs	r0, r3
 800811e:	f7ff fe44 	bl	8007daa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	23a8      	movs	r3, #168	; 0xa8
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	2100      	movs	r1, #0
 800812a:	54d1      	strb	r1, [r2, r3]
 800812c:	e01a      	b.n	8008164 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	23ad      	movs	r3, #173	; 0xad
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	58d3      	ldr	r3, [r2, r3]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d011      	beq.n	8008160 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	23a7      	movs	r3, #167	; 0xa7
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8008144:	2b03      	cmp	r3, #3
 8008146:	d10b      	bne.n	8008160 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	23ad      	movs	r3, #173	; 0xad
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	58d3      	ldr	r3, [r2, r3]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	220b      	movs	r2, #11
 8008154:	18ba      	adds	r2, r7, r2
 8008156:	7811      	ldrb	r1, [r2, #0]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	0010      	movs	r0, r2
 800815c:	4798      	blx	r3
 800815e:	e001      	b.n	8008164 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008160:	2302      	movs	r3, #2
 8008162:	e000      	b.n	8008166 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	0018      	movs	r0, r3
 8008168:	46bd      	mov	sp, r7
 800816a:	b006      	add	sp, #24
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	2340      	movs	r3, #64	; 0x40
 800817a:	2200      	movs	r2, #0
 800817c:	2100      	movs	r1, #0
 800817e:	f001 facd 	bl	800971c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	23ac      	movs	r3, #172	; 0xac
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	2101      	movs	r1, #1
 800818a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	23b2      	movs	r3, #178	; 0xb2
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	2140      	movs	r1, #64	; 0x40
 8008194:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	2340      	movs	r3, #64	; 0x40
 800819a:	2200      	movs	r2, #0
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	f001 fabd 	bl	800971c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2240      	movs	r2, #64	; 0x40
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	23a7      	movs	r3, #167	; 0xa7
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	2101      	movs	r1, #1
 80081b6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	23a5      	movs	r3, #165	; 0xa5
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	2100      	movs	r1, #0
 80081c0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	23a9      	movs	r3, #169	; 0xa9
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	2100      	movs	r1, #0
 80081d0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	23ae      	movs	r3, #174	; 0xae
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	58d3      	ldr	r3, [r2, r3]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	23ad      	movs	r3, #173	; 0xad
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	58d3      	ldr	r3, [r2, r3]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	b2d9      	uxtb	r1, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	0018      	movs	r0, r3
 80081f2:	4790      	blx	r2
  }

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	0018      	movs	r0, r3
 80081f8:	46bd      	mov	sp, r7
 80081fa:	b002      	add	sp, #8
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	000a      	movs	r2, r1
 8008208:	1cfb      	adds	r3, r7, #3
 800820a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	1cfa      	adds	r2, r7, #3
 8008210:	7812      	ldrb	r2, [r2, #0]
 8008212:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	0018      	movs	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	b002      	add	sp, #8
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	23a7      	movs	r3, #167	; 0xa7
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	5cd1      	ldrb	r1, [r2, r3]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a06      	ldr	r2, [pc, #24]	; (800824c <USBD_LL_Suspend+0x2c>)
 8008234:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	23a7      	movs	r3, #167	; 0xa7
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	2104      	movs	r1, #4
 800823e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	0018      	movs	r0, r3
 8008244:	46bd      	mov	sp, r7
 8008246:	b002      	add	sp, #8
 8008248:	bd80      	pop	{r7, pc}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	0000029d 	.word	0x0000029d

08008250 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	23a7      	movs	r3, #167	; 0xa7
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	5cd3      	ldrb	r3, [r2, r3]
 8008260:	2b04      	cmp	r3, #4
 8008262:	d106      	bne.n	8008272 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a05      	ldr	r2, [pc, #20]	; (800827c <USBD_LL_Resume+0x2c>)
 8008268:	5c99      	ldrb	r1, [r3, r2]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	23a7      	movs	r3, #167	; 0xa7
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	0018      	movs	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	b002      	add	sp, #8
 800827a:	bd80      	pop	{r7, pc}
 800827c:	0000029d 	.word	0x0000029d

08008280 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	23a7      	movs	r3, #167	; 0xa7
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	5cd3      	ldrb	r3, [r2, r3]
 8008290:	2b03      	cmp	r3, #3
 8008292:	d10e      	bne.n	80082b2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	23ad      	movs	r3, #173	; 0xad
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	58d3      	ldr	r3, [r2, r3]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	23ad      	movs	r3, #173	; 0xad
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	58d3      	ldr	r3, [r2, r3]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	0010      	movs	r0, r2
 80082b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	0018      	movs	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b002      	add	sp, #8
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c6:	230f      	movs	r3, #15
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	001a      	movs	r2, r3
 80082d4:	2360      	movs	r3, #96	; 0x60
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d004      	beq.n	80082e6 <USBD_StdDevReq+0x2a>
 80082dc:	2b40      	cmp	r3, #64	; 0x40
 80082de:	d002      	beq.n	80082e6 <USBD_StdDevReq+0x2a>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <USBD_StdDevReq+0x3e>
 80082e4:	e04b      	b.n	800837e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	23ad      	movs	r3, #173	; 0xad
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	58d3      	ldr	r3, [r2, r3]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	0010      	movs	r0, r2
 80082f6:	4798      	blx	r3
      break;
 80082f8:	e048      	b.n	800838c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	785b      	ldrb	r3, [r3, #1]
 80082fe:	2b09      	cmp	r3, #9
 8008300:	d835      	bhi.n	800836e <USBD_StdDevReq+0xb2>
 8008302:	009a      	lsls	r2, r3, #2
 8008304:	4b25      	ldr	r3, [pc, #148]	; (800839c <USBD_StdDevReq+0xe0>)
 8008306:	18d3      	adds	r3, r2, r3
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	0011      	movs	r1, r2
 8008312:	0018      	movs	r0, r3
 8008314:	f000 fa5a 	bl	80087cc <USBD_GetDescriptor>
          break;
 8008318:	e030      	b.n	800837c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	0011      	movs	r1, r2
 8008320:	0018      	movs	r0, r3
 8008322:	f000 fc07 	bl	8008b34 <USBD_SetAddress>
          break;
 8008326:	e029      	b.n	800837c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	0011      	movs	r1, r2
 800832e:	0018      	movs	r0, r3
 8008330:	f000 fc54 	bl	8008bdc <USBD_SetConfig>
          break;
 8008334:	e022      	b.n	800837c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	0011      	movs	r1, r2
 800833c:	0018      	movs	r0, r3
 800833e:	f000 fcf1 	bl	8008d24 <USBD_GetConfig>
          break;
 8008342:	e01b      	b.n	800837c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	0011      	movs	r1, r2
 800834a:	0018      	movs	r0, r3
 800834c:	f000 fd24 	bl	8008d98 <USBD_GetStatus>
          break;
 8008350:	e014      	b.n	800837c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	0011      	movs	r1, r2
 8008358:	0018      	movs	r0, r3
 800835a:	f000 fd57 	bl	8008e0c <USBD_SetFeature>
          break;
 800835e:	e00d      	b.n	800837c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	0011      	movs	r1, r2
 8008366:	0018      	movs	r0, r3
 8008368:	f000 fd66 	bl	8008e38 <USBD_ClrFeature>
          break;
 800836c:	e006      	b.n	800837c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	0011      	movs	r1, r2
 8008374:	0018      	movs	r0, r3
 8008376:	f000 fdc0 	bl	8008efa <USBD_CtlError>
          break;
 800837a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800837c:	e006      	b.n	800838c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	0011      	movs	r1, r2
 8008384:	0018      	movs	r0, r3
 8008386:	f000 fdb8 	bl	8008efa <USBD_CtlError>
      break;
 800838a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800838c:	230f      	movs	r3, #15
 800838e:	18fb      	adds	r3, r7, r3
 8008390:	781b      	ldrb	r3, [r3, #0]
}
 8008392:	0018      	movs	r0, r3
 8008394:	46bd      	mov	sp, r7
 8008396:	b004      	add	sp, #16
 8008398:	bd80      	pop	{r7, pc}
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	0800bde4 	.word	0x0800bde4

080083a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083aa:	230f      	movs	r3, #15
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	2200      	movs	r2, #0
 80083b0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	001a      	movs	r2, r3
 80083b8:	2360      	movs	r3, #96	; 0x60
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d003      	beq.n	80083c8 <USBD_StdItfReq+0x28>
 80083c0:	2b40      	cmp	r3, #64	; 0x40
 80083c2:	d001      	beq.n	80083c8 <USBD_StdItfReq+0x28>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d136      	bne.n	8008436 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	23a7      	movs	r3, #167	; 0xa7
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	5cd3      	ldrb	r3, [r2, r3]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d826      	bhi.n	8008424 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	889b      	ldrh	r3, [r3, #4]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d81a      	bhi.n	8008416 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	23ad      	movs	r3, #173	; 0xad
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	58d3      	ldr	r3, [r2, r3]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	220f      	movs	r2, #15
 80083ec:	18bc      	adds	r4, r7, r2
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	0010      	movs	r0, r2
 80083f4:	4798      	blx	r3
 80083f6:	0003      	movs	r3, r0
 80083f8:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	88db      	ldrh	r3, [r3, #6]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d117      	bne.n	8008432 <USBD_StdItfReq+0x92>
 8008402:	230f      	movs	r3, #15
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d112      	bne.n	8008432 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	0018      	movs	r0, r3
 8008410:	f000 fe38 	bl	8009084 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008414:	e00d      	b.n	8008432 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	0011      	movs	r1, r2
 800841c:	0018      	movs	r0, r3
 800841e:	f000 fd6c 	bl	8008efa <USBD_CtlError>
          break;
 8008422:	e006      	b.n	8008432 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	0011      	movs	r1, r2
 800842a:	0018      	movs	r0, r3
 800842c:	f000 fd65 	bl	8008efa <USBD_CtlError>
          break;
 8008430:	e000      	b.n	8008434 <USBD_StdItfReq+0x94>
          break;
 8008432:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008434:	e006      	b.n	8008444 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0011      	movs	r1, r2
 800843c:	0018      	movs	r0, r3
 800843e:	f000 fd5c 	bl	8008efa <USBD_CtlError>
      break;
 8008442:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	0018      	movs	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	b005      	add	sp, #20
 800844c:	bd90      	pop	{r4, r7, pc}

0800844e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800844e:	b5b0      	push	{r4, r5, r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008458:	230f      	movs	r3, #15
 800845a:	18fb      	adds	r3, r7, r3
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	889a      	ldrh	r2, [r3, #4]
 8008464:	230e      	movs	r3, #14
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	001a      	movs	r2, r3
 8008470:	2360      	movs	r3, #96	; 0x60
 8008472:	4013      	ands	r3, r2
 8008474:	2b20      	cmp	r3, #32
 8008476:	d004      	beq.n	8008482 <USBD_StdEPReq+0x34>
 8008478:	2b40      	cmp	r3, #64	; 0x40
 800847a:	d002      	beq.n	8008482 <USBD_StdEPReq+0x34>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <USBD_StdEPReq+0x48>
 8008480:	e195      	b.n	80087ae <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	23ad      	movs	r3, #173	; 0xad
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	58d3      	ldr	r3, [r2, r3]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	0010      	movs	r0, r2
 8008492:	4798      	blx	r3
      break;
 8008494:	e192      	b.n	80087bc <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	001a      	movs	r2, r3
 800849c:	2360      	movs	r3, #96	; 0x60
 800849e:	4013      	ands	r3, r2
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d10f      	bne.n	80084c4 <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	23ad      	movs	r3, #173	; 0xad
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	58d3      	ldr	r3, [r2, r3]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	250f      	movs	r5, #15
 80084b0:	197c      	adds	r4, r7, r5
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	0010      	movs	r0, r2
 80084b8:	4798      	blx	r3
 80084ba:	0003      	movs	r3, r0
 80084bc:	7023      	strb	r3, [r4, #0]

        return ret;
 80084be:	197b      	adds	r3, r7, r5
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	e17e      	b.n	80087c2 <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d054      	beq.n	8008576 <USBD_StdEPReq+0x128>
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d003      	beq.n	80084d8 <USBD_StdEPReq+0x8a>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d100      	bne.n	80084d6 <USBD_StdEPReq+0x88>
 80084d4:	e097      	b.n	8008606 <USBD_StdEPReq+0x1b8>
 80084d6:	e162      	b.n	800879e <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	23a7      	movs	r3, #167	; 0xa7
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	5cd3      	ldrb	r3, [r2, r3]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d002      	beq.n	80084ea <USBD_StdEPReq+0x9c>
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d01f      	beq.n	8008528 <USBD_StdEPReq+0xda>
 80084e8:	e03d      	b.n	8008566 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084ea:	230e      	movs	r3, #14
 80084ec:	18fb      	adds	r3, r7, r3
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d012      	beq.n	800851a <USBD_StdEPReq+0xcc>
 80084f4:	230e      	movs	r3, #14
 80084f6:	18fb      	adds	r3, r7, r3
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b80      	cmp	r3, #128	; 0x80
 80084fc:	d00d      	beq.n	800851a <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084fe:	230e      	movs	r3, #14
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	781a      	ldrb	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	0011      	movs	r1, r2
 8008508:	0018      	movs	r0, r3
 800850a:	f001 f996 	bl	800983a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2180      	movs	r1, #128	; 0x80
 8008512:	0018      	movs	r0, r3
 8008514:	f001 f991 	bl	800983a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008518:	e02c      	b.n	8008574 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	0011      	movs	r1, r2
 8008520:	0018      	movs	r0, r3
 8008522:	f000 fcea 	bl	8008efa <USBD_CtlError>
              break;
 8008526:	e025      	b.n	8008574 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	885b      	ldrh	r3, [r3, #2]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d115      	bne.n	800855c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008530:	230e      	movs	r3, #14
 8008532:	18fb      	adds	r3, r7, r3
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d010      	beq.n	800855c <USBD_StdEPReq+0x10e>
 800853a:	230e      	movs	r3, #14
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b80      	cmp	r3, #128	; 0x80
 8008542:	d00b      	beq.n	800855c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	88db      	ldrh	r3, [r3, #6]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d107      	bne.n	800855c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800854c:	230e      	movs	r3, #14
 800854e:	18fb      	adds	r3, r7, r3
 8008550:	781a      	ldrb	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	0011      	movs	r1, r2
 8008556:	0018      	movs	r0, r3
 8008558:	f001 f96f 	bl	800983a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	0018      	movs	r0, r3
 8008560:	f000 fd90 	bl	8009084 <USBD_CtlSendStatus>

              break;
 8008564:	e006      	b.n	8008574 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	0011      	movs	r1, r2
 800856c:	0018      	movs	r0, r3
 800856e:	f000 fcc4 	bl	8008efa <USBD_CtlError>
              break;
 8008572:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008574:	e11a      	b.n	80087ac <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	23a7      	movs	r3, #167	; 0xa7
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	5cd3      	ldrb	r3, [r2, r3]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d002      	beq.n	8008588 <USBD_StdEPReq+0x13a>
 8008582:	2b03      	cmp	r3, #3
 8008584:	d01f      	beq.n	80085c6 <USBD_StdEPReq+0x178>
 8008586:	e035      	b.n	80085f4 <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008588:	230e      	movs	r3, #14
 800858a:	18fb      	adds	r3, r7, r3
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d012      	beq.n	80085b8 <USBD_StdEPReq+0x16a>
 8008592:	230e      	movs	r3, #14
 8008594:	18fb      	adds	r3, r7, r3
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b80      	cmp	r3, #128	; 0x80
 800859a:	d00d      	beq.n	80085b8 <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800859c:	230e      	movs	r3, #14
 800859e:	18fb      	adds	r3, r7, r3
 80085a0:	781a      	ldrb	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	0011      	movs	r1, r2
 80085a6:	0018      	movs	r0, r3
 80085a8:	f001 f947 	bl	800983a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2180      	movs	r1, #128	; 0x80
 80085b0:	0018      	movs	r0, r3
 80085b2:	f001 f942 	bl	800983a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085b6:	e025      	b.n	8008604 <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	0011      	movs	r1, r2
 80085be:	0018      	movs	r0, r3
 80085c0:	f000 fc9b 	bl	8008efa <USBD_CtlError>
              break;
 80085c4:	e01e      	b.n	8008604 <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	885b      	ldrh	r3, [r3, #2]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d119      	bne.n	8008602 <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085ce:	230e      	movs	r3, #14
 80085d0:	18fb      	adds	r3, r7, r3
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	227f      	movs	r2, #127	; 0x7f
 80085d6:	4013      	ands	r3, r2
 80085d8:	d007      	beq.n	80085ea <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80085da:	230e      	movs	r3, #14
 80085dc:	18fb      	adds	r3, r7, r3
 80085de:	781a      	ldrb	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	0011      	movs	r1, r2
 80085e4:	0018      	movs	r0, r3
 80085e6:	f001 f954 	bl	8009892 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	0018      	movs	r0, r3
 80085ee:	f000 fd49 	bl	8009084 <USBD_CtlSendStatus>
              }
              break;
 80085f2:	e006      	b.n	8008602 <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	0011      	movs	r1, r2
 80085fa:	0018      	movs	r0, r3
 80085fc:	f000 fc7d 	bl	8008efa <USBD_CtlError>
              break;
 8008600:	e000      	b.n	8008604 <USBD_StdEPReq+0x1b6>
              break;
 8008602:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008604:	e0d2      	b.n	80087ac <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	23a7      	movs	r3, #167	; 0xa7
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	5cd3      	ldrb	r3, [r2, r3]
 800860e:	2b02      	cmp	r3, #2
 8008610:	d002      	beq.n	8008618 <USBD_StdEPReq+0x1ca>
 8008612:	2b03      	cmp	r3, #3
 8008614:	d03e      	beq.n	8008694 <USBD_StdEPReq+0x246>
 8008616:	e0ba      	b.n	800878e <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008618:	230e      	movs	r3, #14
 800861a:	18fb      	adds	r3, r7, r3
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <USBD_StdEPReq+0x1ec>
 8008622:	230e      	movs	r3, #14
 8008624:	18fb      	adds	r3, r7, r3
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b80      	cmp	r3, #128	; 0x80
 800862a:	d006      	beq.n	800863a <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	0011      	movs	r1, r2
 8008632:	0018      	movs	r0, r3
 8008634:	f000 fc61 	bl	8008efa <USBD_CtlError>
                break;
 8008638:	e0b0      	b.n	800879c <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800863a:	230e      	movs	r3, #14
 800863c:	18fb      	adds	r3, r7, r3
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	b25b      	sxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	da0d      	bge.n	8008662 <USBD_StdEPReq+0x214>
 8008646:	230e      	movs	r3, #14
 8008648:	18fb      	adds	r3, r7, r3
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	227f      	movs	r2, #127	; 0x7f
 800864e:	401a      	ands	r2, r3
 8008650:	0013      	movs	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	189b      	adds	r3, r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	3310      	adds	r3, #16
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	18d3      	adds	r3, r2, r3
 800865e:	3304      	adds	r3, #4
 8008660:	e00d      	b.n	800867e <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008662:	230e      	movs	r3, #14
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	227f      	movs	r2, #127	; 0x7f
 800866a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800866c:	0013      	movs	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	189b      	adds	r3, r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	3351      	adds	r3, #81	; 0x51
 8008676:	33ff      	adds	r3, #255	; 0xff
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	18d3      	adds	r3, r2, r3
 800867c:	3304      	adds	r3, #4
 800867e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	0018      	movs	r0, r3
 800868e:	f000 fcb3 	bl	8008ff8 <USBD_CtlSendData>
              break;
 8008692:	e083      	b.n	800879c <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008694:	230e      	movs	r3, #14
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b25b      	sxtb	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	da15      	bge.n	80086cc <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086a0:	230e      	movs	r3, #14
 80086a2:	18fb      	adds	r3, r7, r3
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	220f      	movs	r2, #15
 80086a8:	401a      	ands	r2, r3
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	0013      	movs	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	189b      	adds	r3, r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	18cb      	adds	r3, r1, r3
 80086b6:	3318      	adds	r3, #24
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d11e      	bne.n	80086fc <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	0011      	movs	r1, r2
 80086c4:	0018      	movs	r0, r3
 80086c6:	f000 fc18 	bl	8008efa <USBD_CtlError>
                  break;
 80086ca:	e067      	b.n	800879c <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086cc:	230e      	movs	r3, #14
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	220f      	movs	r2, #15
 80086d4:	401a      	ands	r2, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	23ac      	movs	r3, #172	; 0xac
 80086da:	0059      	lsls	r1, r3, #1
 80086dc:	0013      	movs	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	189b      	adds	r3, r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	18c3      	adds	r3, r0, r3
 80086e6:	185b      	adds	r3, r3, r1
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	0011      	movs	r1, r2
 80086f4:	0018      	movs	r0, r3
 80086f6:	f000 fc00 	bl	8008efa <USBD_CtlError>
                  break;
 80086fa:	e04f      	b.n	800879c <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086fc:	230e      	movs	r3, #14
 80086fe:	18fb      	adds	r3, r7, r3
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	b25b      	sxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	da0d      	bge.n	8008724 <USBD_StdEPReq+0x2d6>
 8008708:	230e      	movs	r3, #14
 800870a:	18fb      	adds	r3, r7, r3
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	227f      	movs	r2, #127	; 0x7f
 8008710:	401a      	ands	r2, r3
 8008712:	0013      	movs	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	189b      	adds	r3, r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	3310      	adds	r3, #16
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	18d3      	adds	r3, r2, r3
 8008720:	3304      	adds	r3, #4
 8008722:	e00d      	b.n	8008740 <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008724:	230e      	movs	r3, #14
 8008726:	18fb      	adds	r3, r7, r3
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	227f      	movs	r2, #127	; 0x7f
 800872c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800872e:	0013      	movs	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	189b      	adds	r3, r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	3351      	adds	r3, #81	; 0x51
 8008738:	33ff      	adds	r3, #255	; 0xff
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	18d3      	adds	r3, r2, r3
 800873e:	3304      	adds	r3, #4
 8008740:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008742:	230e      	movs	r3, #14
 8008744:	18fb      	adds	r3, r7, r3
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <USBD_StdEPReq+0x308>
 800874c:	230e      	movs	r3, #14
 800874e:	18fb      	adds	r3, r7, r3
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	2b80      	cmp	r3, #128	; 0x80
 8008754:	d103      	bne.n	800875e <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	e010      	b.n	8008780 <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800875e:	230e      	movs	r3, #14
 8008760:	18fb      	adds	r3, r7, r3
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	0011      	movs	r1, r2
 8008768:	0018      	movs	r0, r3
 800876a:	f001 f8be 	bl	80098ea <USBD_LL_IsStallEP>
 800876e:	1e03      	subs	r3, r0, #0
 8008770:	d003      	beq.n	800877a <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2201      	movs	r2, #1
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	e002      	b.n	8008780 <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	0018      	movs	r0, r3
 8008788:	f000 fc36 	bl	8008ff8 <USBD_CtlSendData>
              break;
 800878c:	e006      	b.n	800879c <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	0011      	movs	r1, r2
 8008794:	0018      	movs	r0, r3
 8008796:	f000 fbb0 	bl	8008efa <USBD_CtlError>
              break;
 800879a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800879c:	e006      	b.n	80087ac <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	0011      	movs	r1, r2
 80087a4:	0018      	movs	r0, r3
 80087a6:	f000 fba8 	bl	8008efa <USBD_CtlError>
          break;
 80087aa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80087ac:	e006      	b.n	80087bc <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	0011      	movs	r1, r2
 80087b4:	0018      	movs	r0, r3
 80087b6:	f000 fba0 	bl	8008efa <USBD_CtlError>
      break;
 80087ba:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80087bc:	230f      	movs	r3, #15
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	781b      	ldrb	r3, [r3, #0]
}
 80087c2:	0018      	movs	r0, r3
 80087c4:	46bd      	mov	sp, r7
 80087c6:	b004      	add	sp, #16
 80087c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080087cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087d6:	2308      	movs	r3, #8
 80087d8:	18fb      	adds	r3, r7, r3
 80087da:	2200      	movs	r2, #0
 80087dc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087e2:	230b      	movs	r3, #11
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	2200      	movs	r2, #0
 80087e8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	2b07      	cmp	r3, #7
 80087f4:	d900      	bls.n	80087f8 <USBD_GetDescriptor+0x2c>
 80087f6:	e159      	b.n	8008aac <USBD_GetDescriptor+0x2e0>
 80087f8:	009a      	lsls	r2, r3, #2
 80087fa:	4bcc      	ldr	r3, [pc, #816]	; (8008b2c <USBD_GetDescriptor+0x360>)
 80087fc:	18d3      	adds	r3, r2, r3
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	23ac      	movs	r3, #172	; 0xac
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	58d3      	ldr	r3, [r2, r3]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7c12      	ldrb	r2, [r2, #16]
 8008810:	2108      	movs	r1, #8
 8008812:	1879      	adds	r1, r7, r1
 8008814:	0010      	movs	r0, r2
 8008816:	4798      	blx	r3
 8008818:	0003      	movs	r3, r0
 800881a:	60fb      	str	r3, [r7, #12]
      break;
 800881c:	e153      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7c1b      	ldrb	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10f      	bne.n	8008846 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	23ad      	movs	r3, #173	; 0xad
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	58d3      	ldr	r3, [r2, r3]
 800882e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008830:	2208      	movs	r2, #8
 8008832:	18ba      	adds	r2, r7, r2
 8008834:	0010      	movs	r0, r2
 8008836:	4798      	blx	r3
 8008838:	0003      	movs	r3, r0
 800883a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	2202      	movs	r2, #2
 8008842:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008844:	e13f      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	23ad      	movs	r3, #173	; 0xad
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	58d3      	ldr	r3, [r2, r3]
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	2208      	movs	r2, #8
 8008852:	18ba      	adds	r2, r7, r2
 8008854:	0010      	movs	r0, r2
 8008856:	4798      	blx	r3
 8008858:	0003      	movs	r3, r0
 800885a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	2202      	movs	r2, #2
 8008862:	701a      	strb	r2, [r3, #0]
      break;
 8008864:	e12f      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	885b      	ldrh	r3, [r3, #2]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b05      	cmp	r3, #5
 800886e:	d900      	bls.n	8008872 <USBD_GetDescriptor+0xa6>
 8008870:	e0d0      	b.n	8008a14 <USBD_GetDescriptor+0x248>
 8008872:	009a      	lsls	r2, r3, #2
 8008874:	4bae      	ldr	r3, [pc, #696]	; (8008b30 <USBD_GetDescriptor+0x364>)
 8008876:	18d3      	adds	r3, r2, r3
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	23ac      	movs	r3, #172	; 0xac
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	58d3      	ldr	r3, [r2, r3]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00d      	beq.n	80088a6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	23ac      	movs	r3, #172	; 0xac
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	58d3      	ldr	r3, [r2, r3]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	7c12      	ldrb	r2, [r2, #16]
 8008898:	2108      	movs	r1, #8
 800889a:	1879      	adds	r1, r7, r1
 800889c:	0010      	movs	r0, r2
 800889e:	4798      	blx	r3
 80088a0:	0003      	movs	r3, r0
 80088a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088a4:	e0c3      	b.n	8008a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	0011      	movs	r1, r2
 80088ac:	0018      	movs	r0, r3
 80088ae:	f000 fb24 	bl	8008efa <USBD_CtlError>
            err++;
 80088b2:	210b      	movs	r1, #11
 80088b4:	187b      	adds	r3, r7, r1
 80088b6:	781a      	ldrb	r2, [r3, #0]
 80088b8:	187b      	adds	r3, r7, r1
 80088ba:	3201      	adds	r2, #1
 80088bc:	701a      	strb	r2, [r3, #0]
          break;
 80088be:	e0b6      	b.n	8008a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	23ac      	movs	r3, #172	; 0xac
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	58d3      	ldr	r3, [r2, r3]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00d      	beq.n	80088ea <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	23ac      	movs	r3, #172	; 0xac
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	58d3      	ldr	r3, [r2, r3]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	7c12      	ldrb	r2, [r2, #16]
 80088dc:	2108      	movs	r1, #8
 80088de:	1879      	adds	r1, r7, r1
 80088e0:	0010      	movs	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	0003      	movs	r3, r0
 80088e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e8:	e0a1      	b.n	8008a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	0011      	movs	r1, r2
 80088f0:	0018      	movs	r0, r3
 80088f2:	f000 fb02 	bl	8008efa <USBD_CtlError>
            err++;
 80088f6:	210b      	movs	r1, #11
 80088f8:	187b      	adds	r3, r7, r1
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	187b      	adds	r3, r7, r1
 80088fe:	3201      	adds	r2, #1
 8008900:	701a      	strb	r2, [r3, #0]
          break;
 8008902:	e094      	b.n	8008a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	23ac      	movs	r3, #172	; 0xac
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	58d3      	ldr	r3, [r2, r3]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00d      	beq.n	800892e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	23ac      	movs	r3, #172	; 0xac
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	58d3      	ldr	r3, [r2, r3]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	7c12      	ldrb	r2, [r2, #16]
 8008920:	2108      	movs	r1, #8
 8008922:	1879      	adds	r1, r7, r1
 8008924:	0010      	movs	r0, r2
 8008926:	4798      	blx	r3
 8008928:	0003      	movs	r3, r0
 800892a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800892c:	e07f      	b.n	8008a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	0011      	movs	r1, r2
 8008934:	0018      	movs	r0, r3
 8008936:	f000 fae0 	bl	8008efa <USBD_CtlError>
            err++;
 800893a:	210b      	movs	r1, #11
 800893c:	187b      	adds	r3, r7, r1
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	187b      	adds	r3, r7, r1
 8008942:	3201      	adds	r2, #1
 8008944:	701a      	strb	r2, [r3, #0]
          break;
 8008946:	e072      	b.n	8008a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	23ac      	movs	r3, #172	; 0xac
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	58d3      	ldr	r3, [r2, r3]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00d      	beq.n	8008972 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	23ac      	movs	r3, #172	; 0xac
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	58d3      	ldr	r3, [r2, r3]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	2108      	movs	r1, #8
 8008966:	1879      	adds	r1, r7, r1
 8008968:	0010      	movs	r0, r2
 800896a:	4798      	blx	r3
 800896c:	0003      	movs	r3, r0
 800896e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008970:	e05d      	b.n	8008a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	0011      	movs	r1, r2
 8008978:	0018      	movs	r0, r3
 800897a:	f000 fabe 	bl	8008efa <USBD_CtlError>
            err++;
 800897e:	210b      	movs	r1, #11
 8008980:	187b      	adds	r3, r7, r1
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	187b      	adds	r3, r7, r1
 8008986:	3201      	adds	r2, #1
 8008988:	701a      	strb	r2, [r3, #0]
          break;
 800898a:	e050      	b.n	8008a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	23ac      	movs	r3, #172	; 0xac
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	58d3      	ldr	r3, [r2, r3]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00d      	beq.n	80089b6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	23ac      	movs	r3, #172	; 0xac
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	58d3      	ldr	r3, [r2, r3]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	7c12      	ldrb	r2, [r2, #16]
 80089a8:	2108      	movs	r1, #8
 80089aa:	1879      	adds	r1, r7, r1
 80089ac:	0010      	movs	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	0003      	movs	r3, r0
 80089b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b4:	e03b      	b.n	8008a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	0011      	movs	r1, r2
 80089bc:	0018      	movs	r0, r3
 80089be:	f000 fa9c 	bl	8008efa <USBD_CtlError>
            err++;
 80089c2:	210b      	movs	r1, #11
 80089c4:	187b      	adds	r3, r7, r1
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	187b      	adds	r3, r7, r1
 80089ca:	3201      	adds	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
          break;
 80089ce:	e02e      	b.n	8008a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	23ac      	movs	r3, #172	; 0xac
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	58d3      	ldr	r3, [r2, r3]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00d      	beq.n	80089fa <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	23ac      	movs	r3, #172	; 0xac
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	58d3      	ldr	r3, [r2, r3]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7c12      	ldrb	r2, [r2, #16]
 80089ec:	2108      	movs	r1, #8
 80089ee:	1879      	adds	r1, r7, r1
 80089f0:	0010      	movs	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	0003      	movs	r3, r0
 80089f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f8:	e019      	b.n	8008a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	0011      	movs	r1, r2
 8008a00:	0018      	movs	r0, r3
 8008a02:	f000 fa7a 	bl	8008efa <USBD_CtlError>
            err++;
 8008a06:	210b      	movs	r1, #11
 8008a08:	187b      	adds	r3, r7, r1
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	187b      	adds	r3, r7, r1
 8008a0e:	3201      	adds	r2, #1
 8008a10:	701a      	strb	r2, [r3, #0]
          break;
 8008a12:	e00c      	b.n	8008a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	0011      	movs	r1, r2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f000 fa6d 	bl	8008efa <USBD_CtlError>
          err++;
 8008a20:	210b      	movs	r1, #11
 8008a22:	187b      	adds	r3, r7, r1
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	187b      	adds	r3, r7, r1
 8008a28:	3201      	adds	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008a2c:	e04b      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>
 8008a2e:	e04a      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	7c1b      	ldrb	r3, [r3, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10b      	bne.n	8008a50 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	23ad      	movs	r3, #173	; 0xad
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	58d3      	ldr	r3, [r2, r3]
 8008a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a42:	2208      	movs	r2, #8
 8008a44:	18ba      	adds	r2, r7, r2
 8008a46:	0010      	movs	r0, r2
 8008a48:	4798      	blx	r3
 8008a4a:	0003      	movs	r3, r0
 8008a4c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a4e:	e03a      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	0011      	movs	r1, r2
 8008a56:	0018      	movs	r0, r3
 8008a58:	f000 fa4f 	bl	8008efa <USBD_CtlError>
        err++;
 8008a5c:	210b      	movs	r1, #11
 8008a5e:	187b      	adds	r3, r7, r1
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	187b      	adds	r3, r7, r1
 8008a64:	3201      	adds	r2, #1
 8008a66:	701a      	strb	r2, [r3, #0]
      break;
 8008a68:	e02d      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	7c1b      	ldrb	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10f      	bne.n	8008a92 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	23ad      	movs	r3, #173	; 0xad
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	58d3      	ldr	r3, [r2, r3]
 8008a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	18ba      	adds	r2, r7, r2
 8008a80:	0010      	movs	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	0003      	movs	r3, r0
 8008a86:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a90:	e019      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	0011      	movs	r1, r2
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f000 fa2e 	bl	8008efa <USBD_CtlError>
        err++;
 8008a9e:	210b      	movs	r1, #11
 8008aa0:	187b      	adds	r3, r7, r1
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	187b      	adds	r3, r7, r1
 8008aa6:	3201      	adds	r2, #1
 8008aa8:	701a      	strb	r2, [r3, #0]
      break;
 8008aaa:	e00c      	b.n	8008ac6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	0011      	movs	r1, r2
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f000 fa21 	bl	8008efa <USBD_CtlError>
      err++;
 8008ab8:	210b      	movs	r1, #11
 8008aba:	187b      	adds	r3, r7, r1
 8008abc:	781a      	ldrb	r2, [r3, #0]
 8008abe:	187b      	adds	r3, r7, r1
 8008ac0:	3201      	adds	r2, #1
 8008ac2:	701a      	strb	r2, [r3, #0]
      break;
 8008ac4:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008ac6:	230b      	movs	r3, #11
 8008ac8:	18fb      	adds	r3, r7, r3
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d128      	bne.n	8008b22 <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	18fb      	adds	r3, r7, r3
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d01a      	beq.n	8008b10 <USBD_GetDescriptor+0x344>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88db      	ldrh	r3, [r3, #6]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	88da      	ldrh	r2, [r3, #6]
 8008ae6:	2308      	movs	r3, #8
 8008ae8:	18fb      	adds	r3, r7, r3
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	1c18      	adds	r0, r3, #0
 8008aee:	1c11      	adds	r1, r2, #0
 8008af0:	b28a      	uxth	r2, r1
 8008af2:	b283      	uxth	r3, r0
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d900      	bls.n	8008afa <USBD_GetDescriptor+0x32e>
 8008af8:	1c01      	adds	r1, r0, #0
 8008afa:	b28a      	uxth	r2, r1
 8008afc:	2108      	movs	r1, #8
 8008afe:	187b      	adds	r3, r7, r1
 8008b00:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b02:	187b      	adds	r3, r7, r1
 8008b04:	881a      	ldrh	r2, [r3, #0]
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f000 fa74 	bl	8008ff8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	88db      	ldrh	r3, [r3, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d105      	bne.n	8008b24 <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f000 fab2 	bl	8009084 <USBD_CtlSendStatus>
 8008b20:	e000      	b.n	8008b24 <USBD_GetDescriptor+0x358>
    return;
 8008b22:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008b24:	46bd      	mov	sp, r7
 8008b26:	b004      	add	sp, #16
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	0800be0c 	.word	0x0800be0c
 8008b30:	0800be2c 	.word	0x0800be2c

08008b34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	889b      	ldrh	r3, [r3, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d13d      	bne.n	8008bc2 <USBD_SetAddress+0x8e>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	88db      	ldrh	r3, [r3, #6]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d139      	bne.n	8008bc2 <USBD_SetAddress+0x8e>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	2b7f      	cmp	r3, #127	; 0x7f
 8008b54:	d835      	bhi.n	8008bc2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	230f      	movs	r3, #15
 8008b5e:	18fb      	adds	r3, r7, r3
 8008b60:	217f      	movs	r1, #127	; 0x7f
 8008b62:	400a      	ands	r2, r1
 8008b64:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	23a7      	movs	r3, #167	; 0xa7
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	5cd3      	ldrb	r3, [r2, r3]
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d106      	bne.n	8008b80 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	0011      	movs	r1, r2
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f000 f9be 	bl	8008efa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7e:	e026      	b.n	8008bce <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	240f      	movs	r4, #15
 8008b84:	193a      	adds	r2, r7, r4
 8008b86:	4914      	ldr	r1, [pc, #80]	; (8008bd8 <USBD_SetAddress+0xa4>)
 8008b88:	7812      	ldrb	r2, [r2, #0]
 8008b8a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b8c:	193b      	adds	r3, r7, r4
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	0011      	movs	r1, r2
 8008b94:	0018      	movs	r0, r3
 8008b96:	f000 fed9 	bl	800994c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f000 fa71 	bl	8009084 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ba2:	193b      	adds	r3, r7, r4
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	23a7      	movs	r3, #167	; 0xa7
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	2102      	movs	r1, #2
 8008bb2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb4:	e00b      	b.n	8008bce <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	23a7      	movs	r3, #167	; 0xa7
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc0:	e005      	b.n	8008bce <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	0011      	movs	r1, r2
 8008bc8:	0018      	movs	r0, r3
 8008bca:	f000 f996 	bl	8008efa <USBD_CtlError>
  }
}
 8008bce:	46c0      	nop			; (mov r8, r8)
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	b005      	add	sp, #20
 8008bd4:	bd90      	pop	{r4, r7, pc}
 8008bd6:	46c0      	nop			; (mov r8, r8)
 8008bd8:	0000029e 	.word	0x0000029e

08008bdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	4b4c      	ldr	r3, [pc, #304]	; (8008d20 <USBD_SetConfig+0x144>)
 8008bee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf0:	4b4b      	ldr	r3, [pc, #300]	; (8008d20 <USBD_SetConfig+0x144>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d906      	bls.n	8008c06 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	0011      	movs	r1, r2
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f000 f97b 	bl	8008efa <USBD_CtlError>
 8008c04:	e088      	b.n	8008d18 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	23a7      	movs	r3, #167	; 0xa7
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	5cd3      	ldrb	r3, [r2, r3]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d002      	beq.n	8008c18 <USBD_SetConfig+0x3c>
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d029      	beq.n	8008c6a <USBD_SetConfig+0x8e>
 8008c16:	e071      	b.n	8008cfc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c18:	4b41      	ldr	r3, [pc, #260]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01f      	beq.n	8008c60 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008c20:	4b3f      	ldr	r3, [pc, #252]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	001a      	movs	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	23a7      	movs	r3, #167	; 0xa7
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	2103      	movs	r1, #3
 8008c32:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c34:	4b3a      	ldr	r3, [pc, #232]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	0011      	movs	r1, r2
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	f7ff f8bd 	bl	8007dbc <USBD_SetClassConfig>
 8008c42:	0003      	movs	r3, r0
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d106      	bne.n	8008c56 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	0011      	movs	r1, r2
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f000 f953 	bl	8008efa <USBD_CtlError>
            return;
 8008c54:	e060      	b.n	8008d18 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	0018      	movs	r0, r3
 8008c5a:	f000 fa13 	bl	8009084 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c5e:	e05b      	b.n	8008d18 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	0018      	movs	r0, r3
 8008c64:	f000 fa0e 	bl	8009084 <USBD_CtlSendStatus>
        break;
 8008c68:	e056      	b.n	8008d18 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c6a:	4b2d      	ldr	r3, [pc, #180]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d115      	bne.n	8008c9e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	23a7      	movs	r3, #167	; 0xa7
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	2102      	movs	r1, #2
 8008c7a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008c7c:	4b28      	ldr	r3, [pc, #160]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	001a      	movs	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c86:	4b26      	ldr	r3, [pc, #152]	; (8008d20 <USBD_SetConfig+0x144>)
 8008c88:	781a      	ldrb	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	0011      	movs	r1, r2
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f7ff f8bc 	bl	8007e0c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	0018      	movs	r0, r3
 8008c98:	f000 f9f4 	bl	8009084 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c9c:	e03c      	b.n	8008d18 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008c9e:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <USBD_SetConfig+0x144>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	001a      	movs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d022      	beq.n	8008cf2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	0011      	movs	r1, r2
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f7ff f8a8 	bl	8007e0c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008cbc:	4b18      	ldr	r3, [pc, #96]	; (8008d20 <USBD_SetConfig+0x144>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	001a      	movs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008cc6:	4b16      	ldr	r3, [pc, #88]	; (8008d20 <USBD_SetConfig+0x144>)
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	0011      	movs	r1, r2
 8008cce:	0018      	movs	r0, r3
 8008cd0:	f7ff f874 	bl	8007dbc <USBD_SetClassConfig>
 8008cd4:	0003      	movs	r3, r0
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d106      	bne.n	8008ce8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	0011      	movs	r1, r2
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f000 f90a 	bl	8008efa <USBD_CtlError>
            return;
 8008ce6:	e017      	b.n	8008d18 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	0018      	movs	r0, r3
 8008cec:	f000 f9ca 	bl	8009084 <USBD_CtlSendStatus>
        break;
 8008cf0:	e012      	b.n	8008d18 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	f000 f9c5 	bl	8009084 <USBD_CtlSendStatus>
        break;
 8008cfa:	e00d      	b.n	8008d18 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	0011      	movs	r1, r2
 8008d02:	0018      	movs	r0, r3
 8008d04:	f000 f8f9 	bl	8008efa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008d08:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <USBD_SetConfig+0x144>)
 8008d0a:	781a      	ldrb	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	0011      	movs	r1, r2
 8008d10:	0018      	movs	r0, r3
 8008d12:	f7ff f87b 	bl	8007e0c <USBD_ClrClassConfig>
        break;
 8008d16:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	b002      	add	sp, #8
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	200001f0 	.word	0x200001f0

08008d24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	88db      	ldrh	r3, [r3, #6]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d006      	beq.n	8008d44 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	0011      	movs	r1, r2
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f000 f8dc 	bl	8008efa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d42:	e025      	b.n	8008d90 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	23a7      	movs	r3, #167	; 0xa7
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	5cd3      	ldrb	r3, [r2, r3]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	db18      	blt.n	8008d82 <USBD_GetConfig+0x5e>
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	dd02      	ble.n	8008d5a <USBD_GetConfig+0x36>
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d00c      	beq.n	8008d72 <USBD_GetConfig+0x4e>
 8008d58:	e013      	b.n	8008d82 <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3308      	adds	r3, #8
 8008d64:	0019      	movs	r1, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f000 f944 	bl	8008ff8 <USBD_CtlSendData>
        break;
 8008d70:	e00e      	b.n	8008d90 <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	1d19      	adds	r1, r3, #4
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f000 f93c 	bl	8008ff8 <USBD_CtlSendData>
        break;
 8008d80:	e006      	b.n	8008d90 <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	0011      	movs	r1, r2
 8008d88:	0018      	movs	r0, r3
 8008d8a:	f000 f8b6 	bl	8008efa <USBD_CtlError>
        break;
 8008d8e:	46c0      	nop			; (mov r8, r8)
}
 8008d90:	46c0      	nop			; (mov r8, r8)
 8008d92:	46bd      	mov	sp, r7
 8008d94:	b002      	add	sp, #8
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	23a7      	movs	r3, #167	; 0xa7
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	5cd3      	ldrb	r3, [r2, r3]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d822      	bhi.n	8008df6 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	88db      	ldrh	r3, [r3, #6]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d006      	beq.n	8008dc6 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	0011      	movs	r1, r2
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f000 f89b 	bl	8008efa <USBD_CtlError>
        break;
 8008dc4:	e01e      	b.n	8008e04 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	23a9      	movs	r3, #169	; 0xa9
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	58d3      	ldr	r3, [r2, r3]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	431a      	orrs	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	330c      	adds	r3, #12
 8008de8:	0019      	movs	r1, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	0018      	movs	r0, r3
 8008df0:	f000 f902 	bl	8008ff8 <USBD_CtlSendData>
      break;
 8008df4:	e006      	b.n	8008e04 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	0011      	movs	r1, r2
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f000 f87c 	bl	8008efa <USBD_CtlError>
      break;
 8008e02:	46c0      	nop			; (mov r8, r8)
  }
}
 8008e04:	46c0      	nop			; (mov r8, r8)
 8008e06:	46bd      	mov	sp, r7
 8008e08:	b002      	add	sp, #8
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	885b      	ldrh	r3, [r3, #2]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d108      	bne.n	8008e30 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	23a9      	movs	r3, #169	; 0xa9
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	2101      	movs	r1, #1
 8008e26:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f000 f92a 	bl	8009084 <USBD_CtlSendStatus>
  }
}
 8008e30:	46c0      	nop			; (mov r8, r8)
 8008e32:	46bd      	mov	sp, r7
 8008e34:	b002      	add	sp, #8
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	23a7      	movs	r3, #167	; 0xa7
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	5cd3      	ldrb	r3, [r2, r3]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d80d      	bhi.n	8008e6c <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	885b      	ldrh	r3, [r3, #2]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d110      	bne.n	8008e7a <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	23a9      	movs	r3, #169	; 0xa9
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	2100      	movs	r1, #0
 8008e60:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	0018      	movs	r0, r3
 8008e66:	f000 f90d 	bl	8009084 <USBD_CtlSendStatus>
      }
      break;
 8008e6a:	e006      	b.n	8008e7a <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	0011      	movs	r1, r2
 8008e72:	0018      	movs	r0, r3
 8008e74:	f000 f841 	bl	8008efa <USBD_CtlError>
      break;
 8008e78:	e000      	b.n	8008e7c <USBD_ClrFeature+0x44>
      break;
 8008e7a:	46c0      	nop			; (mov r8, r8)
  }
}
 8008e7c:	46c0      	nop			; (mov r8, r8)
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b002      	add	sp, #8
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	785a      	ldrb	r2, [r3, #1]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	3302      	adds	r3, #2
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	3303      	adds	r3, #3
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	021b      	lsls	r3, r3, #8
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	18d3      	adds	r3, r2, r3
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	3305      	adds	r3, #5
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	021b      	lsls	r3, r3, #8
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	18d3      	adds	r3, r2, r3
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	3306      	adds	r3, #6
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	18d3      	adds	r3, r2, r3
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	80da      	strh	r2, [r3, #6]

}
 8008ef2:	46c0      	nop			; (mov r8, r8)
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	b002      	add	sp, #8
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2180      	movs	r1, #128	; 0x80
 8008f08:	0018      	movs	r0, r3
 8008f0a:	f000 fc96 	bl	800983a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2100      	movs	r1, #0
 8008f12:	0018      	movs	r0, r3
 8008f14:	f000 fc91 	bl	800983a <USBD_LL_StallEP>
}
 8008f18:	46c0      	nop			; (mov r8, r8)
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	b002      	add	sp, #8
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f20:	b590      	push	{r4, r7, lr}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f2c:	2317      	movs	r3, #23
 8008f2e:	18fb      	adds	r3, r7, r3
 8008f30:	2200      	movs	r2, #0
 8008f32:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d03d      	beq.n	8008fb6 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f000 f83e 	bl	8008fbe <USBD_GetLen>
 8008f42:	0003      	movs	r3, r0
 8008f44:	3301      	adds	r3, #1
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	18db      	adds	r3, r3, r3
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f50:	2017      	movs	r0, #23
 8008f52:	183b      	adds	r3, r7, r0
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	183a      	adds	r2, r7, r0
 8008f58:	1c59      	adds	r1, r3, #1
 8008f5a:	7011      	strb	r1, [r2, #0]
 8008f5c:	001a      	movs	r2, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	189b      	adds	r3, r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f68:	183b      	adds	r3, r7, r0
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	183a      	adds	r2, r7, r0
 8008f6e:	1c59      	adds	r1, r3, #1
 8008f70:	7011      	strb	r1, [r2, #0]
 8008f72:	001a      	movs	r2, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	189b      	adds	r3, r3, r2
 8008f78:	2203      	movs	r2, #3
 8008f7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f7c:	e017      	b.n	8008fae <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	60fa      	str	r2, [r7, #12]
 8008f84:	2417      	movs	r4, #23
 8008f86:	193a      	adds	r2, r7, r4
 8008f88:	7812      	ldrb	r2, [r2, #0]
 8008f8a:	1939      	adds	r1, r7, r4
 8008f8c:	1c50      	adds	r0, r2, #1
 8008f8e:	7008      	strb	r0, [r1, #0]
 8008f90:	0011      	movs	r1, r2
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	1852      	adds	r2, r2, r1
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f9a:	193b      	adds	r3, r7, r4
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	193a      	adds	r2, r7, r4
 8008fa0:	1c59      	adds	r1, r3, #1
 8008fa2:	7011      	strb	r1, [r2, #0]
 8008fa4:	001a      	movs	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	189b      	adds	r3, r3, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e3      	bne.n	8008f7e <USBD_GetString+0x5e>
    }
  }
}
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	b007      	add	sp, #28
 8008fbc:	bd90      	pop	{r4, r7, pc}

08008fbe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fc6:	230f      	movs	r3, #15
 8008fc8:	18fb      	adds	r3, r7, r3
 8008fca:	2200      	movs	r2, #0
 8008fcc:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008fce:	e008      	b.n	8008fe2 <USBD_GetLen+0x24>
  {
    len++;
 8008fd0:	210f      	movs	r1, #15
 8008fd2:	187b      	adds	r3, r7, r1
 8008fd4:	781a      	ldrb	r2, [r3, #0]
 8008fd6:	187b      	adds	r3, r7, r1
 8008fd8:	3201      	adds	r2, #1
 8008fda:	701a      	strb	r2, [r3, #0]
    buf++;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f2      	bne.n	8008fd0 <USBD_GetLen+0x12>
  }

  return len;
 8008fea:	230f      	movs	r3, #15
 8008fec:	18fb      	adds	r3, r7, r3
 8008fee:	781b      	ldrb	r3, [r3, #0]
}
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b004      	add	sp, #16
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	1dbb      	adds	r3, r7, #6
 8009004:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	23a5      	movs	r3, #165	; 0xa5
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	2102      	movs	r1, #2
 800900e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8009010:	1dbb      	adds	r3, r7, #6
 8009012:	881a      	ldrh	r2, [r3, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009018:	1dbb      	adds	r3, r7, #6
 800901a:	881a      	ldrh	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009020:	1dbb      	adds	r3, r7, #6
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	2100      	movs	r1, #0
 800902a:	f000 fcbb 	bl	80099a4 <USBD_LL_Transmit>

  return USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	0018      	movs	r0, r3
 8009032:	46bd      	mov	sp, r7
 8009034:	b004      	add	sp, #16
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	1dbb      	adds	r3, r7, #6
 8009044:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009046:	1dbb      	adds	r3, r7, #6
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	2100      	movs	r1, #0
 8009050:	f000 fca8 	bl	80099a4 <USBD_LL_Transmit>

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	0018      	movs	r0, r3
 8009058:	46bd      	mov	sp, r7
 800905a:	b004      	add	sp, #16
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	1dbb      	adds	r3, r7, #6
 800906a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800906c:	1dbb      	adds	r3, r7, #6
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	2100      	movs	r1, #0
 8009076:	f000 fccd 	bl	8009a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	b004      	add	sp, #16
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	23a5      	movs	r3, #165	; 0xa5
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	2104      	movs	r1, #4
 8009094:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	2300      	movs	r3, #0
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	f000 fc81 	bl	80099a4 <USBD_LL_Transmit>

  return USBD_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	0018      	movs	r0, r3
 80090a6:	46bd      	mov	sp, r7
 80090a8:	b002      	add	sp, #8
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	23a5      	movs	r3, #165	; 0xa5
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	2105      	movs	r1, #5
 80090bc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	2300      	movs	r3, #0
 80090c2:	2200      	movs	r2, #0
 80090c4:	2100      	movs	r1, #0
 80090c6:	f000 fca5 	bl	8009a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	0018      	movs	r0, r3
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b002      	add	sp, #8
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090d8:	4914      	ldr	r1, [pc, #80]	; (800912c <MX_USB_DEVICE_Init+0x58>)
 80090da:	4b15      	ldr	r3, [pc, #84]	; (8009130 <MX_USB_DEVICE_Init+0x5c>)
 80090dc:	2200      	movs	r2, #0
 80090de:	0018      	movs	r0, r3
 80090e0:	f7fe fe04 	bl	8007cec <USBD_Init>
 80090e4:	1e03      	subs	r3, r0, #0
 80090e6:	d001      	beq.n	80090ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090e8:	f7f7 fad4 	bl	8000694 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80090ec:	4a11      	ldr	r2, [pc, #68]	; (8009134 <MX_USB_DEVICE_Init+0x60>)
 80090ee:	4b10      	ldr	r3, [pc, #64]	; (8009130 <MX_USB_DEVICE_Init+0x5c>)
 80090f0:	0011      	movs	r1, r2
 80090f2:	0018      	movs	r0, r3
 80090f4:	f7fe fe2b 	bl	8007d4e <USBD_RegisterClass>
 80090f8:	1e03      	subs	r3, r0, #0
 80090fa:	d001      	beq.n	8009100 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80090fc:	f7f7 faca 	bl	8000694 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8009100:	4a0d      	ldr	r2, [pc, #52]	; (8009138 <MX_USB_DEVICE_Init+0x64>)
 8009102:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <MX_USB_DEVICE_Init+0x5c>)
 8009104:	0011      	movs	r1, r2
 8009106:	0018      	movs	r0, r3
 8009108:	f7fd fd28 	bl	8006b5c <USBD_MSC_RegisterStorage>
 800910c:	1e03      	subs	r3, r0, #0
 800910e:	d001      	beq.n	8009114 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009110:	f7f7 fac0 	bl	8000694 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009114:	4b06      	ldr	r3, [pc, #24]	; (8009130 <MX_USB_DEVICE_Init+0x5c>)
 8009116:	0018      	movs	r0, r3
 8009118:	f7fe fe3a 	bl	8007d90 <USBD_Start>
 800911c:	1e03      	subs	r3, r0, #0
 800911e:	d001      	beq.n	8009124 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8009120:	f7f7 fab8 	bl	8000694 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009124:	46c0      	nop			; (mov r8, r8)
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	200000fc 	.word	0x200000fc
 8009130:	20000514 	.word	0x20000514
 8009134:	20000058 	.word	0x20000058
 8009138:	2000014c 	.word	0x2000014c

0800913c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	0002      	movs	r2, r0
 8009144:	6039      	str	r1, [r7, #0]
 8009146:	1dfb      	adds	r3, r7, #7
 8009148:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2212      	movs	r2, #18
 800914e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009152:	0018      	movs	r0, r3
 8009154:	46bd      	mov	sp, r7
 8009156:	b002      	add	sp, #8
 8009158:	bd80      	pop	{r7, pc}
 800915a:	46c0      	nop			; (mov r8, r8)
 800915c:	20000118 	.word	0x20000118

08009160 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	0002      	movs	r2, r0
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	1dfb      	adds	r3, r7, #7
 800916c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2204      	movs	r2, #4
 8009172:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009174:	4b02      	ldr	r3, [pc, #8]	; (8009180 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009176:	0018      	movs	r0, r3
 8009178:	46bd      	mov	sp, r7
 800917a:	b002      	add	sp, #8
 800917c:	bd80      	pop	{r7, pc}
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	2000012c 	.word	0x2000012c

08009184 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	0002      	movs	r2, r0
 800918c:	6039      	str	r1, [r7, #0]
 800918e:	1dfb      	adds	r3, r7, #7
 8009190:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009192:	1dfb      	adds	r3, r7, #7
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	4908      	ldr	r1, [pc, #32]	; (80091c0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <USBD_FS_ProductStrDescriptor+0x40>)
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7ff febd 	bl	8008f20 <USBD_GetString>
 80091a6:	e005      	b.n	80091b4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	4905      	ldr	r1, [pc, #20]	; (80091c0 <USBD_FS_ProductStrDescriptor+0x3c>)
 80091ac:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <USBD_FS_ProductStrDescriptor+0x40>)
 80091ae:	0018      	movs	r0, r3
 80091b0:	f7ff feb6 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091b4:	4b02      	ldr	r3, [pc, #8]	; (80091c0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80091b6:	0018      	movs	r0, r3
 80091b8:	46bd      	mov	sp, r7
 80091ba:	b002      	add	sp, #8
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	200007d8 	.word	0x200007d8
 80091c4:	0800b3b4 	.word	0x0800b3b4

080091c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	0002      	movs	r2, r0
 80091d0:	6039      	str	r1, [r7, #0]
 80091d2:	1dfb      	adds	r3, r7, #7
 80091d4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	4904      	ldr	r1, [pc, #16]	; (80091ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091da:	4b05      	ldr	r3, [pc, #20]	; (80091f0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80091dc:	0018      	movs	r0, r3
 80091de:	f7ff fe9f 	bl	8008f20 <USBD_GetString>
  return USBD_StrDesc;
 80091e2:	4b02      	ldr	r3, [pc, #8]	; (80091ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80091e4:	0018      	movs	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b002      	add	sp, #8
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	200007d8 	.word	0x200007d8
 80091f0:	0800b3c8 	.word	0x0800b3c8

080091f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	0002      	movs	r2, r0
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	1dfb      	adds	r3, r7, #7
 8009200:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	221a      	movs	r2, #26
 8009206:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009208:	f000 f84c 	bl	80092a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800920c:	4b02      	ldr	r3, [pc, #8]	; (8009218 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800920e:	0018      	movs	r0, r3
 8009210:	46bd      	mov	sp, r7
 8009212:	b002      	add	sp, #8
 8009214:	bd80      	pop	{r7, pc}
 8009216:	46c0      	nop			; (mov r8, r8)
 8009218:	20000130 	.word	0x20000130

0800921c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	0002      	movs	r2, r0
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	1dfb      	adds	r3, r7, #7
 8009228:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800922a:	1dfb      	adds	r3, r7, #7
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4908      	ldr	r1, [pc, #32]	; (8009258 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009236:	4b09      	ldr	r3, [pc, #36]	; (800925c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009238:	0018      	movs	r0, r3
 800923a:	f7ff fe71 	bl	8008f20 <USBD_GetString>
 800923e:	e005      	b.n	800924c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	4905      	ldr	r1, [pc, #20]	; (8009258 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009246:	0018      	movs	r0, r3
 8009248:	f7ff fe6a 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800924c:	4b02      	ldr	r3, [pc, #8]	; (8009258 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800924e:	0018      	movs	r0, r3
 8009250:	46bd      	mov	sp, r7
 8009252:	b002      	add	sp, #8
 8009254:	bd80      	pop	{r7, pc}
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	200007d8 	.word	0x200007d8
 800925c:	0800b3dc 	.word	0x0800b3dc

08009260 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	0002      	movs	r2, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	1dfb      	adds	r3, r7, #7
 800926c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800926e:	1dfb      	adds	r3, r7, #7
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4908      	ldr	r1, [pc, #32]	; (800929c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800927c:	0018      	movs	r0, r3
 800927e:	f7ff fe4f 	bl	8008f20 <USBD_GetString>
 8009282:	e005      	b.n	8009290 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	4905      	ldr	r1, [pc, #20]	; (800929c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800928a:	0018      	movs	r0, r3
 800928c:	f7ff fe48 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	b002      	add	sp, #8
 8009298:	bd80      	pop	{r7, pc}
 800929a:	46c0      	nop			; (mov r8, r8)
 800929c:	200007d8 	.word	0x200007d8
 80092a0:	0800b3e8 	.word	0x0800b3e8

080092a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092aa:	4b10      	ldr	r3, [pc, #64]	; (80092ec <Get_SerialNum+0x48>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092b0:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <Get_SerialNum+0x4c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <Get_SerialNum+0x50>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	18d3      	adds	r3, r2, r3
 80092c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092ca:	490b      	ldr	r1, [pc, #44]	; (80092f8 <Get_SerialNum+0x54>)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2208      	movs	r2, #8
 80092d0:	0018      	movs	r0, r3
 80092d2:	f000 f815 	bl	8009300 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092d6:	4909      	ldr	r1, [pc, #36]	; (80092fc <Get_SerialNum+0x58>)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2204      	movs	r2, #4
 80092dc:	0018      	movs	r0, r3
 80092de:	f000 f80f 	bl	8009300 <IntToUnicode>
  }
}
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	46bd      	mov	sp, r7
 80092e6:	b004      	add	sp, #16
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	46c0      	nop			; (mov r8, r8)
 80092ec:	1ff80050 	.word	0x1ff80050
 80092f0:	1ff80054 	.word	0x1ff80054
 80092f4:	1ff80058 	.word	0x1ff80058
 80092f8:	20000132 	.word	0x20000132
 80092fc:	20000142 	.word	0x20000142

08009300 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	1dfb      	adds	r3, r7, #7
 800930c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800930e:	2117      	movs	r1, #23
 8009310:	187b      	adds	r3, r7, r1
 8009312:	2200      	movs	r2, #0
 8009314:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8009316:	187b      	adds	r3, r7, r1
 8009318:	2200      	movs	r2, #0
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e02f      	b.n	800937e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	0f1b      	lsrs	r3, r3, #28
 8009322:	2b09      	cmp	r3, #9
 8009324:	d80d      	bhi.n	8009342 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	0f1b      	lsrs	r3, r3, #28
 800932a:	b2da      	uxtb	r2, r3
 800932c:	2317      	movs	r3, #23
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	0019      	movs	r1, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	185b      	adds	r3, r3, r1
 800933a:	3230      	adds	r2, #48	; 0x30
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	e00c      	b.n	800935c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	0f1b      	lsrs	r3, r3, #28
 8009346:	b2da      	uxtb	r2, r3
 8009348:	2317      	movs	r3, #23
 800934a:	18fb      	adds	r3, r7, r3
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	0019      	movs	r1, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	185b      	adds	r3, r3, r1
 8009356:	3237      	adds	r2, #55	; 0x37
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009362:	2117      	movs	r1, #23
 8009364:	187b      	adds	r3, r7, r1
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	3301      	adds	r3, #1
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	18d3      	adds	r3, r2, r3
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009374:	187b      	adds	r3, r7, r1
 8009376:	781a      	ldrb	r2, [r3, #0]
 8009378:	187b      	adds	r3, r7, r1
 800937a:	3201      	adds	r2, #1
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	2317      	movs	r3, #23
 8009380:	18fa      	adds	r2, r7, r3
 8009382:	1dfb      	adds	r3, r7, #7
 8009384:	7812      	ldrb	r2, [r2, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	429a      	cmp	r2, r3
 800938a:	d3c8      	bcc.n	800931e <IntToUnicode+0x1e>
  }
}
 800938c:	46c0      	nop			; (mov r8, r8)
 800938e:	46bd      	mov	sp, r7
 8009390:	b006      	add	sp, #24
 8009392:	bd80      	pop	{r7, pc}

08009394 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	0002      	movs	r2, r0
 800939c:	1dfb      	adds	r3, r7, #7
 800939e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80093a0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80093a2:	0018      	movs	r0, r3
 80093a4:	46bd      	mov	sp, r7
 80093a6:	b002      	add	sp, #8
 80093a8:	bd80      	pop	{r7, pc}

080093aa <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	230f      	movs	r3, #15
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	1c02      	adds	r2, r0, #0
 80093ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2280      	movs	r2, #128	; 0x80
 80093c0:	0252      	lsls	r2, r2, #9
 80093c2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2280      	movs	r2, #128	; 0x80
 80093c8:	0092      	lsls	r2, r2, #2
 80093ca:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80093cc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093ce:	0018      	movs	r0, r3
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b004      	add	sp, #16
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b082      	sub	sp, #8
 80093da:	af00      	add	r7, sp, #0
 80093dc:	0002      	movs	r2, r0
 80093de:	1dfb      	adds	r3, r7, #7
 80093e0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093e2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093e4:	0018      	movs	r0, r3
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b002      	add	sp, #8
 80093ea:	bd80      	pop	{r7, pc}

080093ec <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	0002      	movs	r2, r0
 80093f4:	1dfb      	adds	r3, r7, #7
 80093f6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80093f8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093fa:	0018      	movs	r0, r3
 80093fc:	46bd      	mov	sp, r7
 80093fe:	b002      	add	sp, #8
 8009400:	bd80      	pop	{r7, pc}

08009402 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	0019      	movs	r1, r3
 800940e:	230f      	movs	r3, #15
 8009410:	18fb      	adds	r3, r7, r3
 8009412:	1c02      	adds	r2, r0, #0
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	230c      	movs	r3, #12
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	1c0a      	adds	r2, r1, #0
 800941c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800941e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009420:	0018      	movs	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	b004      	add	sp, #16
 8009426:	bd80      	pop	{r7, pc}

08009428 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	607a      	str	r2, [r7, #4]
 8009432:	0019      	movs	r1, r3
 8009434:	230f      	movs	r3, #15
 8009436:	18fb      	adds	r3, r7, r3
 8009438:	1c02      	adds	r2, r0, #0
 800943a:	701a      	strb	r2, [r3, #0]
 800943c:	230c      	movs	r3, #12
 800943e:	18fb      	adds	r3, r7, r3
 8009440:	1c0a      	adds	r2, r1, #0
 8009442:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8009444:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8009446:	0018      	movs	r0, r3
 8009448:	46bd      	mov	sp, r7
 800944a:	b004      	add	sp, #16
 800944c:	bd80      	pop	{r7, pc}

0800944e <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8009452:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009454:	0018      	movs	r0, r3
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a0a      	ldr	r2, [pc, #40]	; (8009494 <HAL_PCD_MspInit+0x38>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d10e      	bne.n	800948c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800946e:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <HAL_PCD_MspInit+0x3c>)
 8009470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <HAL_PCD_MspInit+0x3c>)
 8009474:	2180      	movs	r1, #128	; 0x80
 8009476:	0409      	lsls	r1, r1, #16
 8009478:	430a      	orrs	r2, r1
 800947a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800947c:	2200      	movs	r2, #0
 800947e:	2100      	movs	r1, #0
 8009480:	201f      	movs	r0, #31
 8009482:	f7f7 fb91 	bl	8000ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009486:	201f      	movs	r0, #31
 8009488:	f7f7 fba3 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800948c:	46c0      	nop			; (mov r8, r8)
 800948e:	46bd      	mov	sp, r7
 8009490:	b002      	add	sp, #8
 8009492:	bd80      	pop	{r7, pc}
 8009494:	40005c00 	.word	0x40005c00
 8009498:	40021000 	.word	0x40021000

0800949c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	23bc      	movs	r3, #188	; 0xbc
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	58d2      	ldr	r2, [r2, r3]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	21ac      	movs	r1, #172	; 0xac
 80094b0:	0089      	lsls	r1, r1, #2
 80094b2:	468c      	mov	ip, r1
 80094b4:	4463      	add	r3, ip
 80094b6:	0019      	movs	r1, r3
 80094b8:	0010      	movs	r0, r2
 80094ba:	f7fe fcbd 	bl	8007e38 <USBD_LL_SetupStage>
}
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b002      	add	sp, #8
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c6:	b590      	push	{r4, r7, lr}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	000a      	movs	r2, r1
 80094d0:	1cfb      	adds	r3, r7, #3
 80094d2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	23bc      	movs	r3, #188	; 0xbc
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	58d4      	ldr	r4, [r2, r3]
 80094dc:	1cfb      	adds	r3, r7, #3
 80094de:	781a      	ldrb	r2, [r3, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	23be      	movs	r3, #190	; 0xbe
 80094e4:	0059      	lsls	r1, r3, #1
 80094e6:	0013      	movs	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	189b      	adds	r3, r3, r2
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	18c3      	adds	r3, r0, r3
 80094f0:	185b      	adds	r3, r3, r1
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	1cfb      	adds	r3, r7, #3
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	0019      	movs	r1, r3
 80094fa:	0020      	movs	r0, r4
 80094fc:	f7fe fcf8 	bl	8007ef0 <USBD_LL_DataOutStage>
}
 8009500:	46c0      	nop			; (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b003      	add	sp, #12
 8009506:	bd90      	pop	{r4, r7, pc}

08009508 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	000a      	movs	r2, r1
 8009512:	1cfb      	adds	r3, r7, #3
 8009514:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	23bc      	movs	r3, #188	; 0xbc
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	58d0      	ldr	r0, [r2, r3]
 800951e:	1cfb      	adds	r3, r7, #3
 8009520:	781a      	ldrb	r2, [r3, #0]
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	0013      	movs	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	189b      	adds	r3, r3, r2
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	18cb      	adds	r3, r1, r3
 800952e:	333c      	adds	r3, #60	; 0x3c
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	1cfb      	adds	r3, r7, #3
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	0019      	movs	r1, r3
 8009538:	f7fe fd5c 	bl	8007ff4 <USBD_LL_DataInStage>
}
 800953c:	46c0      	nop			; (mov r8, r8)
 800953e:	46bd      	mov	sp, r7
 8009540:	b002      	add	sp, #8
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	23bc      	movs	r3, #188	; 0xbc
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	58d3      	ldr	r3, [r2, r3]
 8009554:	0018      	movs	r0, r3
 8009556:	f7fe fe93 	bl	8008280 <USBD_LL_SOF>
}
 800955a:	46c0      	nop			; (mov r8, r8)
 800955c:	46bd      	mov	sp, r7
 800955e:	b002      	add	sp, #8
 8009560:	bd80      	pop	{r7, pc}

08009562 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800956a:	230f      	movs	r3, #15
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	2201      	movs	r2, #1
 8009570:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d001      	beq.n	800957e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800957a:	f7f7 f88b 	bl	8000694 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	23bc      	movs	r3, #188	; 0xbc
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	58d2      	ldr	r2, [r2, r3]
 8009586:	230f      	movs	r3, #15
 8009588:	18fb      	adds	r3, r7, r3
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	0019      	movs	r1, r3
 800958e:	0010      	movs	r0, r2
 8009590:	f7fe fe35 	bl	80081fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	23bc      	movs	r3, #188	; 0xbc
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	58d3      	ldr	r3, [r2, r3]
 800959c:	0018      	movs	r0, r3
 800959e:	f7fe fde6 	bl	800816e <USBD_LL_Reset>
}
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	46bd      	mov	sp, r7
 80095a6:	b004      	add	sp, #16
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	23bc      	movs	r3, #188	; 0xbc
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	58d3      	ldr	r3, [r2, r3]
 80095bc:	0018      	movs	r0, r3
 80095be:	f7fe fe2f 	bl	8008220 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d005      	beq.n	80095d6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095ca:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <HAL_PCD_SuspendCallback+0x34>)
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <HAL_PCD_SuspendCallback+0x34>)
 80095d0:	2106      	movs	r1, #6
 80095d2:	430a      	orrs	r2, r1
 80095d4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80095d6:	46c0      	nop			; (mov r8, r8)
 80095d8:	46bd      	mov	sp, r7
 80095da:	b002      	add	sp, #8
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	46c0      	nop			; (mov r8, r8)
 80095e0:	e000ed00 	.word	0xe000ed00

080095e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d007      	beq.n	8009604 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095f4:	4b09      	ldr	r3, [pc, #36]	; (800961c <HAL_PCD_ResumeCallback+0x38>)
 80095f6:	691a      	ldr	r2, [r3, #16]
 80095f8:	4b08      	ldr	r3, [pc, #32]	; (800961c <HAL_PCD_ResumeCallback+0x38>)
 80095fa:	2106      	movs	r1, #6
 80095fc:	438a      	bics	r2, r1
 80095fe:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009600:	f000 fa6a 	bl	8009ad8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	23bc      	movs	r3, #188	; 0xbc
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	58d3      	ldr	r3, [r2, r3]
 800960c:	0018      	movs	r0, r3
 800960e:	f7fe fe1f 	bl	8008250 <USBD_LL_Resume>
}
 8009612:	46c0      	nop			; (mov r8, r8)
 8009614:	46bd      	mov	sp, r7
 8009616:	b002      	add	sp, #8
 8009618:	bd80      	pop	{r7, pc}
 800961a:	46c0      	nop			; (mov r8, r8)
 800961c:	e000ed00 	.word	0xe000ed00

08009620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009628:	4a27      	ldr	r2, [pc, #156]	; (80096c8 <USBD_LL_Init+0xa8>)
 800962a:	23bc      	movs	r3, #188	; 0xbc
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	23b0      	movs	r3, #176	; 0xb0
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4923      	ldr	r1, [pc, #140]	; (80096c8 <USBD_LL_Init+0xa8>)
 800963a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800963c:	4b22      	ldr	r3, [pc, #136]	; (80096c8 <USBD_LL_Init+0xa8>)
 800963e:	4a23      	ldr	r2, [pc, #140]	; (80096cc <USBD_LL_Init+0xac>)
 8009640:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009642:	4b21      	ldr	r3, [pc, #132]	; (80096c8 <USBD_LL_Init+0xa8>)
 8009644:	2208      	movs	r2, #8
 8009646:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009648:	4b1f      	ldr	r3, [pc, #124]	; (80096c8 <USBD_LL_Init+0xa8>)
 800964a:	2202      	movs	r2, #2
 800964c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800964e:	4b1e      	ldr	r3, [pc, #120]	; (80096c8 <USBD_LL_Init+0xa8>)
 8009650:	2202      	movs	r2, #2
 8009652:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009654:	4b1c      	ldr	r3, [pc, #112]	; (80096c8 <USBD_LL_Init+0xa8>)
 8009656:	2200      	movs	r2, #0
 8009658:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800965a:	4b1b      	ldr	r3, [pc, #108]	; (80096c8 <USBD_LL_Init+0xa8>)
 800965c:	2200      	movs	r2, #0
 800965e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009660:	4b19      	ldr	r3, [pc, #100]	; (80096c8 <USBD_LL_Init+0xa8>)
 8009662:	2200      	movs	r2, #0
 8009664:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009666:	4b18      	ldr	r3, [pc, #96]	; (80096c8 <USBD_LL_Init+0xa8>)
 8009668:	0018      	movs	r0, r3
 800966a:	f7f7 fc63 	bl	8000f34 <HAL_PCD_Init>
 800966e:	1e03      	subs	r3, r0, #0
 8009670:	d001      	beq.n	8009676 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8009672:	f7f7 f80f 	bl	8000694 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	23b0      	movs	r3, #176	; 0xb0
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	58d0      	ldr	r0, [r2, r3]
 800967e:	2318      	movs	r3, #24
 8009680:	2200      	movs	r2, #0
 8009682:	2100      	movs	r1, #0
 8009684:	f7f9 fa5c 	bl	8002b40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	23b0      	movs	r3, #176	; 0xb0
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	58d0      	ldr	r0, [r2, r3]
 8009690:	2358      	movs	r3, #88	; 0x58
 8009692:	2200      	movs	r2, #0
 8009694:	2180      	movs	r1, #128	; 0x80
 8009696:	f7f9 fa53 	bl	8002b40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	23b0      	movs	r3, #176	; 0xb0
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	58d0      	ldr	r0, [r2, r3]
 80096a2:	2398      	movs	r3, #152	; 0x98
 80096a4:	2200      	movs	r2, #0
 80096a6:	2181      	movs	r1, #129	; 0x81
 80096a8:	f7f9 fa4a 	bl	8002b40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	23b0      	movs	r3, #176	; 0xb0
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	58d0      	ldr	r0, [r2, r3]
 80096b4:	23d8      	movs	r3, #216	; 0xd8
 80096b6:	2200      	movs	r2, #0
 80096b8:	2101      	movs	r1, #1
 80096ba:	f7f9 fa41 	bl	8002b40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	0018      	movs	r0, r3
 80096c2:	46bd      	mov	sp, r7
 80096c4:	b002      	add	sp, #8
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	200009d8 	.word	0x200009d8
 80096cc:	40005c00 	.word	0x40005c00

080096d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d8:	210f      	movs	r1, #15
 80096da:	187b      	adds	r3, r7, r1
 80096dc:	2200      	movs	r2, #0
 80096de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e0:	260e      	movs	r6, #14
 80096e2:	19bb      	adds	r3, r7, r6
 80096e4:	2200      	movs	r2, #0
 80096e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	23b0      	movs	r3, #176	; 0xb0
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	58d3      	ldr	r3, [r2, r3]
 80096f0:	000d      	movs	r5, r1
 80096f2:	187c      	adds	r4, r7, r1
 80096f4:	0018      	movs	r0, r3
 80096f6:	f7f7 fd2d 	bl	8001154 <HAL_PCD_Start>
 80096fa:	0003      	movs	r3, r0
 80096fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fe:	19bc      	adds	r4, r7, r6
 8009700:	0029      	movs	r1, r5
 8009702:	187b      	adds	r3, r7, r1
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	0018      	movs	r0, r3
 8009708:	f000 f9ed 	bl	8009ae6 <USBD_Get_USB_Status>
 800970c:	0003      	movs	r3, r0
 800970e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009710:	19bb      	adds	r3, r7, r6
 8009712:	781b      	ldrb	r3, [r3, #0]
}
 8009714:	0018      	movs	r0, r3
 8009716:	46bd      	mov	sp, r7
 8009718:	b005      	add	sp, #20
 800971a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800971c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800971c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	000c      	movs	r4, r1
 8009726:	0010      	movs	r0, r2
 8009728:	0019      	movs	r1, r3
 800972a:	1cfb      	adds	r3, r7, #3
 800972c:	1c22      	adds	r2, r4, #0
 800972e:	701a      	strb	r2, [r3, #0]
 8009730:	1cbb      	adds	r3, r7, #2
 8009732:	1c02      	adds	r2, r0, #0
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	003b      	movs	r3, r7
 8009738:	1c0a      	adds	r2, r1, #0
 800973a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800973c:	260f      	movs	r6, #15
 800973e:	19bb      	adds	r3, r7, r6
 8009740:	2200      	movs	r2, #0
 8009742:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009744:	250e      	movs	r5, #14
 8009746:	197b      	adds	r3, r7, r5
 8009748:	2200      	movs	r2, #0
 800974a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	23b0      	movs	r3, #176	; 0xb0
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	58d0      	ldr	r0, [r2, r3]
 8009754:	19bc      	adds	r4, r7, r6
 8009756:	1cbb      	adds	r3, r7, #2
 8009758:	781d      	ldrb	r5, [r3, #0]
 800975a:	003b      	movs	r3, r7
 800975c:	881a      	ldrh	r2, [r3, #0]
 800975e:	1cfb      	adds	r3, r7, #3
 8009760:	7819      	ldrb	r1, [r3, #0]
 8009762:	002b      	movs	r3, r5
 8009764:	f7f7 fec3 	bl	80014ee <HAL_PCD_EP_Open>
 8009768:	0003      	movs	r3, r0
 800976a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976c:	250e      	movs	r5, #14
 800976e:	197c      	adds	r4, r7, r5
 8009770:	19bb      	adds	r3, r7, r6
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	0018      	movs	r0, r3
 8009776:	f000 f9b6 	bl	8009ae6 <USBD_Get_USB_Status>
 800977a:	0003      	movs	r3, r0
 800977c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800977e:	197b      	adds	r3, r7, r5
 8009780:	781b      	ldrb	r3, [r3, #0]
}
 8009782:	0018      	movs	r0, r3
 8009784:	46bd      	mov	sp, r7
 8009786:	b005      	add	sp, #20
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800978a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	000a      	movs	r2, r1
 8009794:	1cfb      	adds	r3, r7, #3
 8009796:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009798:	210f      	movs	r1, #15
 800979a:	187b      	adds	r3, r7, r1
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a0:	260e      	movs	r6, #14
 80097a2:	19bb      	adds	r3, r7, r6
 80097a4:	2200      	movs	r2, #0
 80097a6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	23b0      	movs	r3, #176	; 0xb0
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	58d2      	ldr	r2, [r2, r3]
 80097b0:	000d      	movs	r5, r1
 80097b2:	187c      	adds	r4, r7, r1
 80097b4:	1cfb      	adds	r3, r7, #3
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	0019      	movs	r1, r3
 80097ba:	0010      	movs	r0, r2
 80097bc:	f7f7 ff0f 	bl	80015de <HAL_PCD_EP_Close>
 80097c0:	0003      	movs	r3, r0
 80097c2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c4:	19bc      	adds	r4, r7, r6
 80097c6:	0029      	movs	r1, r5
 80097c8:	187b      	adds	r3, r7, r1
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	0018      	movs	r0, r3
 80097ce:	f000 f98a 	bl	8009ae6 <USBD_Get_USB_Status>
 80097d2:	0003      	movs	r3, r0
 80097d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80097d6:	19bb      	adds	r3, r7, r6
 80097d8:	781b      	ldrb	r3, [r3, #0]
}
 80097da:	0018      	movs	r0, r3
 80097dc:	46bd      	mov	sp, r7
 80097de:	b005      	add	sp, #20
 80097e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097e2 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	000a      	movs	r2, r1
 80097ec:	1cfb      	adds	r3, r7, #3
 80097ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f0:	210f      	movs	r1, #15
 80097f2:	187b      	adds	r3, r7, r1
 80097f4:	2200      	movs	r2, #0
 80097f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f8:	260e      	movs	r6, #14
 80097fa:	19bb      	adds	r3, r7, r6
 80097fc:	2200      	movs	r2, #0
 80097fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	23b0      	movs	r3, #176	; 0xb0
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	58d2      	ldr	r2, [r2, r3]
 8009808:	000d      	movs	r5, r1
 800980a:	187c      	adds	r4, r7, r1
 800980c:	1cfb      	adds	r3, r7, #3
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	0019      	movs	r1, r3
 8009812:	0010      	movs	r0, r2
 8009814:	f7f8 f894 	bl	8001940 <HAL_PCD_EP_Flush>
 8009818:	0003      	movs	r3, r0
 800981a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981c:	19bc      	adds	r4, r7, r6
 800981e:	0029      	movs	r1, r5
 8009820:	187b      	adds	r3, r7, r1
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	0018      	movs	r0, r3
 8009826:	f000 f95e 	bl	8009ae6 <USBD_Get_USB_Status>
 800982a:	0003      	movs	r3, r0
 800982c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800982e:	19bb      	adds	r3, r7, r6
 8009830:	781b      	ldrb	r3, [r3, #0]
}
 8009832:	0018      	movs	r0, r3
 8009834:	46bd      	mov	sp, r7
 8009836:	b005      	add	sp, #20
 8009838:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800983a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800983a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	000a      	movs	r2, r1
 8009844:	1cfb      	adds	r3, r7, #3
 8009846:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009848:	210f      	movs	r1, #15
 800984a:	187b      	adds	r3, r7, r1
 800984c:	2200      	movs	r2, #0
 800984e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009850:	260e      	movs	r6, #14
 8009852:	19bb      	adds	r3, r7, r6
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	23b0      	movs	r3, #176	; 0xb0
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	58d2      	ldr	r2, [r2, r3]
 8009860:	000d      	movs	r5, r1
 8009862:	187c      	adds	r4, r7, r1
 8009864:	1cfb      	adds	r3, r7, #3
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	0019      	movs	r1, r3
 800986a:	0010      	movs	r0, r2
 800986c:	f7f7 ffae 	bl	80017cc <HAL_PCD_EP_SetStall>
 8009870:	0003      	movs	r3, r0
 8009872:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009874:	19bc      	adds	r4, r7, r6
 8009876:	0029      	movs	r1, r5
 8009878:	187b      	adds	r3, r7, r1
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	0018      	movs	r0, r3
 800987e:	f000 f932 	bl	8009ae6 <USBD_Get_USB_Status>
 8009882:	0003      	movs	r3, r0
 8009884:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009886:	19bb      	adds	r3, r7, r6
 8009888:	781b      	ldrb	r3, [r3, #0]
}
 800988a:	0018      	movs	r0, r3
 800988c:	46bd      	mov	sp, r7
 800988e:	b005      	add	sp, #20
 8009890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009892 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009894:	b085      	sub	sp, #20
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	000a      	movs	r2, r1
 800989c:	1cfb      	adds	r3, r7, #3
 800989e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a0:	210f      	movs	r1, #15
 80098a2:	187b      	adds	r3, r7, r1
 80098a4:	2200      	movs	r2, #0
 80098a6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a8:	260e      	movs	r6, #14
 80098aa:	19bb      	adds	r3, r7, r6
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	23b0      	movs	r3, #176	; 0xb0
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	58d2      	ldr	r2, [r2, r3]
 80098b8:	000d      	movs	r5, r1
 80098ba:	187c      	adds	r4, r7, r1
 80098bc:	1cfb      	adds	r3, r7, #3
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	0019      	movs	r1, r3
 80098c2:	0010      	movs	r0, r2
 80098c4:	f7f7 ffde 	bl	8001884 <HAL_PCD_EP_ClrStall>
 80098c8:	0003      	movs	r3, r0
 80098ca:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098cc:	19bc      	adds	r4, r7, r6
 80098ce:	0029      	movs	r1, r5
 80098d0:	187b      	adds	r3, r7, r1
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	0018      	movs	r0, r3
 80098d6:	f000 f906 	bl	8009ae6 <USBD_Get_USB_Status>
 80098da:	0003      	movs	r3, r0
 80098dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80098de:	19bb      	adds	r3, r7, r6
 80098e0:	781b      	ldrb	r3, [r3, #0]
}
 80098e2:	0018      	movs	r0, r3
 80098e4:	46bd      	mov	sp, r7
 80098e6:	b005      	add	sp, #20
 80098e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098ea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	000a      	movs	r2, r1
 80098f4:	1cfb      	adds	r3, r7, #3
 80098f6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	23b0      	movs	r3, #176	; 0xb0
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	58d3      	ldr	r3, [r2, r3]
 8009900:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009902:	1cfb      	adds	r3, r7, #3
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	b25b      	sxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	da0d      	bge.n	8009928 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800990c:	1cfb      	adds	r3, r7, #3
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	227f      	movs	r2, #127	; 0x7f
 8009912:	4013      	ands	r3, r2
 8009914:	68f9      	ldr	r1, [r7, #12]
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	0013      	movs	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	189b      	adds	r3, r3, r2
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	18cb      	adds	r3, r1, r3
 8009922:	3302      	adds	r3, #2
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	e00d      	b.n	8009944 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009928:	1cfb      	adds	r3, r7, #3
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	227f      	movs	r2, #127	; 0x7f
 800992e:	401a      	ands	r2, r3
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	23b5      	movs	r3, #181	; 0xb5
 8009934:	0059      	lsls	r1, r3, #1
 8009936:	0013      	movs	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	189b      	adds	r3, r3, r2
 800993c:	00db      	lsls	r3, r3, #3
 800993e:	18c3      	adds	r3, r0, r3
 8009940:	185b      	adds	r3, r3, r1
 8009942:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009944:	0018      	movs	r0, r3
 8009946:	46bd      	mov	sp, r7
 8009948:	b004      	add	sp, #16
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800994c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	000a      	movs	r2, r1
 8009956:	1cfb      	adds	r3, r7, #3
 8009958:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995a:	210f      	movs	r1, #15
 800995c:	187b      	adds	r3, r7, r1
 800995e:	2200      	movs	r2, #0
 8009960:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009962:	260e      	movs	r6, #14
 8009964:	19bb      	adds	r3, r7, r6
 8009966:	2200      	movs	r2, #0
 8009968:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	23b0      	movs	r3, #176	; 0xb0
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	58d2      	ldr	r2, [r2, r3]
 8009972:	000d      	movs	r5, r1
 8009974:	187c      	adds	r4, r7, r1
 8009976:	1cfb      	adds	r3, r7, #3
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	0019      	movs	r1, r3
 800997c:	0010      	movs	r0, r2
 800997e:	f7f7 fd8b 	bl	8001498 <HAL_PCD_SetAddress>
 8009982:	0003      	movs	r3, r0
 8009984:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009986:	19bc      	adds	r4, r7, r6
 8009988:	0029      	movs	r1, r5
 800998a:	187b      	adds	r3, r7, r1
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	0018      	movs	r0, r3
 8009990:	f000 f8a9 	bl	8009ae6 <USBD_Get_USB_Status>
 8009994:	0003      	movs	r3, r0
 8009996:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009998:	19bb      	adds	r3, r7, r6
 800999a:	781b      	ldrb	r3, [r3, #0]
}
 800999c:	0018      	movs	r0, r3
 800999e:	46bd      	mov	sp, r7
 80099a0:	b005      	add	sp, #20
 80099a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	0008      	movs	r0, r1
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	0019      	movs	r1, r3
 80099b2:	230b      	movs	r3, #11
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	1c02      	adds	r2, r0, #0
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	2408      	movs	r4, #8
 80099bc:	193b      	adds	r3, r7, r4
 80099be:	1c0a      	adds	r2, r1, #0
 80099c0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c2:	2117      	movs	r1, #23
 80099c4:	187b      	adds	r3, r7, r1
 80099c6:	2200      	movs	r2, #0
 80099c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ca:	2516      	movs	r5, #22
 80099cc:	197b      	adds	r3, r7, r5
 80099ce:	2200      	movs	r2, #0
 80099d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	23b0      	movs	r3, #176	; 0xb0
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	58d0      	ldr	r0, [r2, r3]
 80099da:	193b      	adds	r3, r7, r4
 80099dc:	881d      	ldrh	r5, [r3, #0]
 80099de:	000e      	movs	r6, r1
 80099e0:	187c      	adds	r4, r7, r1
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	230b      	movs	r3, #11
 80099e6:	18fb      	adds	r3, r7, r3
 80099e8:	7819      	ldrb	r1, [r3, #0]
 80099ea:	002b      	movs	r3, r5
 80099ec:	f7f7 fea5 	bl	800173a <HAL_PCD_EP_Transmit>
 80099f0:	0003      	movs	r3, r0
 80099f2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f4:	2516      	movs	r5, #22
 80099f6:	197c      	adds	r4, r7, r5
 80099f8:	0031      	movs	r1, r6
 80099fa:	187b      	adds	r3, r7, r1
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	0018      	movs	r0, r3
 8009a00:	f000 f871 	bl	8009ae6 <USBD_Get_USB_Status>
 8009a04:	0003      	movs	r3, r0
 8009a06:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a08:	197b      	adds	r3, r7, r5
 8009a0a:	781b      	ldrb	r3, [r3, #0]
}
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	b007      	add	sp, #28
 8009a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	0008      	movs	r0, r1
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	0019      	movs	r1, r3
 8009a22:	230b      	movs	r3, #11
 8009a24:	18fb      	adds	r3, r7, r3
 8009a26:	1c02      	adds	r2, r0, #0
 8009a28:	701a      	strb	r2, [r3, #0]
 8009a2a:	2408      	movs	r4, #8
 8009a2c:	193b      	adds	r3, r7, r4
 8009a2e:	1c0a      	adds	r2, r1, #0
 8009a30:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a32:	2117      	movs	r1, #23
 8009a34:	187b      	adds	r3, r7, r1
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a3a:	2516      	movs	r5, #22
 8009a3c:	197b      	adds	r3, r7, r5
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	23b0      	movs	r3, #176	; 0xb0
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	58d0      	ldr	r0, [r2, r3]
 8009a4a:	193b      	adds	r3, r7, r4
 8009a4c:	881d      	ldrh	r5, [r3, #0]
 8009a4e:	000e      	movs	r6, r1
 8009a50:	187c      	adds	r4, r7, r1
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	230b      	movs	r3, #11
 8009a56:	18fb      	adds	r3, r7, r3
 8009a58:	7819      	ldrb	r1, [r3, #0]
 8009a5a:	002b      	movs	r3, r5
 8009a5c:	f7f7 fe10 	bl	8001680 <HAL_PCD_EP_Receive>
 8009a60:	0003      	movs	r3, r0
 8009a62:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a64:	2516      	movs	r5, #22
 8009a66:	197c      	adds	r4, r7, r5
 8009a68:	0031      	movs	r1, r6
 8009a6a:	187b      	adds	r3, r7, r1
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f000 f839 	bl	8009ae6 <USBD_Get_USB_Status>
 8009a74:	0003      	movs	r3, r0
 8009a76:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a78:	197b      	adds	r3, r7, r5
 8009a7a:	781b      	ldrb	r3, [r3, #0]
}
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	b007      	add	sp, #28
 8009a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	000a      	movs	r2, r1
 8009a8e:	1cfb      	adds	r3, r7, #3
 8009a90:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	23b0      	movs	r3, #176	; 0xb0
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	58d2      	ldr	r2, [r2, r3]
 8009a9a:	1cfb      	adds	r3, r7, #3
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	0019      	movs	r1, r3
 8009aa0:	0010      	movs	r0, r2
 8009aa2:	f7f7 fe31 	bl	8001708 <HAL_PCD_EP_GetRxCount>
 8009aa6:	0003      	movs	r3, r0
}
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	b002      	add	sp, #8
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ab8:	4b02      	ldr	r3, [pc, #8]	; (8009ac4 <USBD_static_malloc+0x14>)
}
 8009aba:	0018      	movs	r0, r3
 8009abc:	46bd      	mov	sp, r7
 8009abe:	b002      	add	sp, #8
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	200001f4 	.word	0x200001f4

08009ac8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]

}
 8009ad0:	46c0      	nop			; (mov r8, r8)
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	b002      	add	sp, #8
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009adc:	f7f6 fd00 	bl	80004e0 <SystemClock_Config>
}
 8009ae0:	46c0      	nop			; (mov r8, r8)
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b084      	sub	sp, #16
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	0002      	movs	r2, r0
 8009aee:	1dfb      	adds	r3, r7, #7
 8009af0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af2:	230f      	movs	r3, #15
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009afa:	1dfb      	adds	r3, r7, #7
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d00d      	beq.n	8009b1e <USBD_Get_USB_Status+0x38>
 8009b02:	dc02      	bgt.n	8009b0a <USBD_Get_USB_Status+0x24>
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <USBD_Get_USB_Status+0x2e>
 8009b08:	e018      	b.n	8009b3c <USBD_Get_USB_Status+0x56>
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d00c      	beq.n	8009b28 <USBD_Get_USB_Status+0x42>
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d00f      	beq.n	8009b32 <USBD_Get_USB_Status+0x4c>
 8009b12:	e013      	b.n	8009b3c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b14:	230f      	movs	r3, #15
 8009b16:	18fb      	adds	r3, r7, r3
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
    break;
 8009b1c:	e013      	b.n	8009b46 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b1e:	230f      	movs	r3, #15
 8009b20:	18fb      	adds	r3, r7, r3
 8009b22:	2202      	movs	r2, #2
 8009b24:	701a      	strb	r2, [r3, #0]
    break;
 8009b26:	e00e      	b.n	8009b46 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b28:	230f      	movs	r3, #15
 8009b2a:	18fb      	adds	r3, r7, r3
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]
    break;
 8009b30:	e009      	b.n	8009b46 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b32:	230f      	movs	r3, #15
 8009b34:	18fb      	adds	r3, r7, r3
 8009b36:	2202      	movs	r2, #2
 8009b38:	701a      	strb	r2, [r3, #0]
    break;
 8009b3a:	e004      	b.n	8009b46 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009b3c:	230f      	movs	r3, #15
 8009b3e:	18fb      	adds	r3, r7, r3
 8009b40:	2202      	movs	r2, #2
 8009b42:	701a      	strb	r2, [r3, #0]
    break;
 8009b44:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8009b46:	230f      	movs	r3, #15
 8009b48:	18fb      	adds	r3, r7, r3
 8009b4a:	781b      	ldrb	r3, [r3, #0]
}
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b004      	add	sp, #16
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	0002      	movs	r2, r0
 8009b5c:	1dfb      	adds	r3, r7, #7
 8009b5e:	701a      	strb	r2, [r3, #0]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8009b60:	240f      	movs	r4, #15
 8009b62:	193a      	adds	r2, r7, r4
 8009b64:	1df9      	adds	r1, r7, #7
 8009b66:	4806      	ldr	r0, [pc, #24]	; (8009b80 <W25qxx_Spi+0x2c>)
 8009b68:	2364      	movs	r3, #100	; 0x64
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f7fa fa91 	bl	8004094 <HAL_SPI_TransmitReceive>
	return ret;
 8009b72:	193b      	adds	r3, r7, r4
 8009b74:	781b      	ldrb	r3, [r3, #0]
}
 8009b76:	0018      	movs	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	b005      	add	sp, #20
 8009b7c:	bd90      	pop	{r4, r7, pc}
 8009b7e:	46c0      	nop			; (mov r8, r8)
 8009b80:	200004b8 	.word	0x200004b8

08009b84 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60bb      	str	r3, [r7, #8]
 8009b92:	2300      	movs	r3, #0
 8009b94:	607b      	str	r3, [r7, #4]
 8009b96:	2300      	movs	r3, #0
 8009b98:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8009b9a:	23a0      	movs	r3, #160	; 0xa0
 8009b9c:	05db      	lsls	r3, r3, #23
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2110      	movs	r1, #16
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f7f7 f9a8 	bl	8000ef8 <HAL_GPIO_WritePin>


  W25qxx_Spi(0x9F);
 8009ba8:	209f      	movs	r0, #159	; 0x9f
 8009baa:	f7ff ffd3 	bl	8009b54 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009bae:	20a5      	movs	r0, #165	; 0xa5
 8009bb0:	f7ff ffd0 	bl	8009b54 <W25qxx_Spi>
 8009bb4:	0003      	movs	r3, r0
 8009bb6:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009bb8:	20a5      	movs	r0, #165	; 0xa5
 8009bba:	f7ff ffcb 	bl	8009b54 <W25qxx_Spi>
 8009bbe:	0003      	movs	r3, r0
 8009bc0:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009bc2:	20a5      	movs	r0, #165	; 0xa5
 8009bc4:	f7ff ffc6 	bl	8009b54 <W25qxx_Spi>
 8009bc8:	0003      	movs	r3, r0
 8009bca:	603b      	str	r3, [r7, #0]

  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8009bcc:	23a0      	movs	r3, #160	; 0xa0
 8009bce:	05db      	lsls	r3, r3, #23
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	2110      	movs	r1, #16
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	f7f7 f98f 	bl	8000ef8 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	041a      	lsls	r2, r3, #16
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	021b      	lsls	r3, r3, #8
 8009be2:	4313      	orrs	r3, r2
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]
  return Temp;
 8009bea:	68fb      	ldr	r3, [r7, #12]
}
 8009bec:	0018      	movs	r0, r3
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	b004      	add	sp, #16
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8009bf4:	b590      	push	{r4, r7, lr}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8009bfa:	23a0      	movs	r3, #160	; 0xa0
 8009bfc:	05db      	lsls	r3, r3, #23
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2110      	movs	r1, #16
 8009c02:	0018      	movs	r0, r3
 8009c04:	f7f7 f978 	bl	8000ef8 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8009c08:	204b      	movs	r0, #75	; 0x4b
 8009c0a:	f7ff ffa3 	bl	8009b54 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8009c0e:	1dfb      	adds	r3, r7, #7
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	e007      	b.n	8009c26 <W25qxx_ReadUniqID+0x32>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009c16:	20a5      	movs	r0, #165	; 0xa5
 8009c18:	f7ff ff9c 	bl	8009b54 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8009c1c:	1dfb      	adds	r3, r7, #7
 8009c1e:	781a      	ldrb	r2, [r3, #0]
 8009c20:	1dfb      	adds	r3, r7, #7
 8009c22:	3201      	adds	r2, #1
 8009c24:	701a      	strb	r2, [r3, #0]
 8009c26:	1dfb      	adds	r3, r7, #7
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d9f3      	bls.n	8009c16 <W25qxx_ReadUniqID+0x22>
	for(uint8_t	i=0;i<8;i++)
 8009c2e:	1dbb      	adds	r3, r7, #6
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	e00e      	b.n	8009c54 <W25qxx_ReadUniqID+0x60>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009c36:	1dbb      	adds	r3, r7, #6
 8009c38:	781c      	ldrb	r4, [r3, #0]
 8009c3a:	20a5      	movs	r0, #165	; 0xa5
 8009c3c:	f7ff ff8a 	bl	8009b54 <W25qxx_Spi>
 8009c40:	0003      	movs	r3, r0
 8009c42:	001a      	movs	r2, r3
 8009c44:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <W25qxx_ReadUniqID+0x80>)
 8009c46:	191b      	adds	r3, r3, r4
 8009c48:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8009c4a:	1dbb      	adds	r3, r7, #6
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	1dbb      	adds	r3, r7, #6
 8009c50:	3201      	adds	r2, #1
 8009c52:	701a      	strb	r2, [r3, #0]
 8009c54:	1dbb      	adds	r3, r7, #6
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b07      	cmp	r3, #7
 8009c5a:	d9ec      	bls.n	8009c36 <W25qxx_ReadUniqID+0x42>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8009c5c:	23a0      	movs	r3, #160	; 0xa0
 8009c5e:	05db      	lsls	r3, r3, #23
 8009c60:	2201      	movs	r2, #1
 8009c62:	2110      	movs	r1, #16
 8009c64:	0018      	movs	r0, r3
 8009c66:	f7f7 f947 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	b003      	add	sp, #12
 8009c70:	bd90      	pop	{r4, r7, pc}
 8009c72:	46c0      	nop			; (mov r8, r8)
 8009c74:	20000cd0 	.word	0x20000cd0

08009c78 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8009c7c:	23a0      	movs	r3, #160	; 0xa0
 8009c7e:	05db      	lsls	r3, r3, #23
 8009c80:	2200      	movs	r2, #0
 8009c82:	2110      	movs	r1, #16
 8009c84:	0018      	movs	r0, r3
 8009c86:	f7f7 f937 	bl	8000ef8 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8009c8a:	2006      	movs	r0, #6
 8009c8c:	f7ff ff62 	bl	8009b54 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8009c90:	23a0      	movs	r3, #160	; 0xa0
 8009c92:	05db      	lsls	r3, r3, #23
 8009c94:	2201      	movs	r2, #1
 8009c96:	2110      	movs	r1, #16
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f7f7 f92d 	bl	8000ef8 <HAL_GPIO_WritePin>
  W25qxx_Delay(1);
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	f7f6 feb4 	bl	8000a0c <HAL_Delay>
}
 8009ca4:	46c0      	nop			; (mov r8, r8)
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
	...

08009cac <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
  W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8009cac:	b5b0      	push	{r4, r5, r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	0002      	movs	r2, r0
 8009cb4:	1dfb      	adds	r3, r7, #7
 8009cb6:	701a      	strb	r2, [r3, #0]
	uint8_t	status=0;
 8009cb8:	230f      	movs	r3, #15
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8009cc0:	23a0      	movs	r3, #160	; 0xa0
 8009cc2:	05db      	lsls	r3, r3, #23
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2110      	movs	r1, #16
 8009cc8:	0018      	movs	r0, r3
 8009cca:	f7f7 f915 	bl	8000ef8 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8009cce:	1dfb      	adds	r3, r7, #7
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d10f      	bne.n	8009cf6 <W25qxx_ReadStatusRegister+0x4a>
	{
		W25qxx_Spi(0x05);
 8009cd6:	2005      	movs	r0, #5
 8009cd8:	f7ff ff3c 	bl	8009b54 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009cdc:	250f      	movs	r5, #15
 8009cde:	197c      	adds	r4, r7, r5
 8009ce0:	20a5      	movs	r0, #165	; 0xa5
 8009ce2:	f7ff ff37 	bl	8009b54 <W25qxx_Spi>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 8009cea:	4b1b      	ldr	r3, [pc, #108]	; (8009d58 <W25qxx_ReadStatusRegister+0xac>)
 8009cec:	197a      	adds	r2, r7, r5
 8009cee:	2124      	movs	r1, #36	; 0x24
 8009cf0:	7812      	ldrb	r2, [r2, #0]
 8009cf2:	545a      	strb	r2, [r3, r1]
 8009cf4:	e022      	b.n	8009d3c <W25qxx_ReadStatusRegister+0x90>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8009cf6:	1dfb      	adds	r3, r7, #7
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d10f      	bne.n	8009d1e <W25qxx_ReadStatusRegister+0x72>
	{
		W25qxx_Spi(0x35);
 8009cfe:	2035      	movs	r0, #53	; 0x35
 8009d00:	f7ff ff28 	bl	8009b54 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009d04:	250f      	movs	r5, #15
 8009d06:	197c      	adds	r4, r7, r5
 8009d08:	20a5      	movs	r0, #165	; 0xa5
 8009d0a:	f7ff ff23 	bl	8009b54 <W25qxx_Spi>
 8009d0e:	0003      	movs	r3, r0
 8009d10:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 8009d12:	4b11      	ldr	r3, [pc, #68]	; (8009d58 <W25qxx_ReadStatusRegister+0xac>)
 8009d14:	197a      	adds	r2, r7, r5
 8009d16:	2125      	movs	r1, #37	; 0x25
 8009d18:	7812      	ldrb	r2, [r2, #0]
 8009d1a:	545a      	strb	r2, [r3, r1]
 8009d1c:	e00e      	b.n	8009d3c <W25qxx_ReadStatusRegister+0x90>
	}
	else
	{
		W25qxx_Spi(0x15);
 8009d1e:	2015      	movs	r0, #21
 8009d20:	f7ff ff18 	bl	8009b54 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009d24:	250f      	movs	r5, #15
 8009d26:	197c      	adds	r4, r7, r5
 8009d28:	20a5      	movs	r0, #165	; 0xa5
 8009d2a:	f7ff ff13 	bl	8009b54 <W25qxx_Spi>
 8009d2e:	0003      	movs	r3, r0
 8009d30:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 8009d32:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <W25qxx_ReadStatusRegister+0xac>)
 8009d34:	197a      	adds	r2, r7, r5
 8009d36:	2126      	movs	r1, #38	; 0x26
 8009d38:	7812      	ldrb	r2, [r2, #0]
 8009d3a:	545a      	strb	r2, [r3, r1]
	}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8009d3c:	23a0      	movs	r3, #160	; 0xa0
 8009d3e:	05db      	lsls	r3, r3, #23
 8009d40:	2201      	movs	r2, #1
 8009d42:	2110      	movs	r1, #16
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7f7 f8d7 	bl	8000ef8 <HAL_GPIO_WritePin>
	return status;
 8009d4a:	230f      	movs	r3, #15
 8009d4c:	18fb      	adds	r3, r7, r3
 8009d4e:	781b      	ldrb	r3, [r3, #0]
}
 8009d50:	0018      	movs	r0, r3
 8009d52:	46bd      	mov	sp, r7
 8009d54:	b004      	add	sp, #16
 8009d56:	bdb0      	pop	{r4, r5, r7, pc}
 8009d58:	20000cd0 	.word	0x20000cd0

08009d5c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8009d60:	2001      	movs	r0, #1
 8009d62:	f7f6 fe53 	bl	8000a0c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8009d66:	23a0      	movs	r3, #160	; 0xa0
 8009d68:	05db      	lsls	r3, r3, #23
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2110      	movs	r1, #16
 8009d6e:	0018      	movs	r0, r3
 8009d70:	f7f7 f8c2 	bl	8000ef8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8009d74:	2005      	movs	r0, #5
 8009d76:	f7ff feed 	bl	8009b54 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009d7a:	20a5      	movs	r0, #165	; 0xa5
 8009d7c:	f7ff feea 	bl	8009b54 <W25qxx_Spi>
 8009d80:	0003      	movs	r3, r0
 8009d82:	0019      	movs	r1, r3
 8009d84:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <W25qxx_WaitForWriteEnd+0x58>)
 8009d86:	2224      	movs	r2, #36	; 0x24
 8009d88:	5499      	strb	r1, [r3, r2]
		W25qxx_Delay(1);
 8009d8a:	2001      	movs	r0, #1
 8009d8c:	f7f6 fe3e 	bl	8000a0c <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8009d90:	4b08      	ldr	r3, [pc, #32]	; (8009db4 <W25qxx_WaitForWriteEnd+0x58>)
 8009d92:	2224      	movs	r2, #36	; 0x24
 8009d94:	5c9b      	ldrb	r3, [r3, r2]
 8009d96:	001a      	movs	r2, r3
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	d1ed      	bne.n	8009d7a <W25qxx_WaitForWriteEnd+0x1e>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8009d9e:	23a0      	movs	r3, #160	; 0xa0
 8009da0:	05db      	lsls	r3, r3, #23
 8009da2:	2201      	movs	r2, #1
 8009da4:	2110      	movs	r1, #16
 8009da6:	0018      	movs	r0, r3
 8009da8:	f7f7 f8a6 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 8009dac:	46c0      	nop			; (mov r8, r8)
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	46c0      	nop			; (mov r8, r8)
 8009db4:	20000cd0 	.word	0x20000cd0

08009db8 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
  w25qxx.Lock=1;
 8009dbc:	4b8f      	ldr	r3, [pc, #572]	; (8009ffc <W25qxx_Init+0x244>)
 8009dbe:	2227      	movs	r2, #39	; 0x27
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	5499      	strb	r1, [r3, r2]

  while(HAL_GetTick () <100)
 8009dc4:	e002      	b.n	8009dcc <W25qxx_Init+0x14>
    W25qxx_Delay(1);
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	f7f6 fe20 	bl	8000a0c <HAL_Delay>
  while(HAL_GetTick () <100)
 8009dcc:	f7f6 fe14 	bl	80009f8 <HAL_GetTick>
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	2b63      	cmp	r3, #99	; 0x63
 8009dd4:	d9f7      	bls.n	8009dc6 <W25qxx_Init+0xe>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8009dd6:	23a0      	movs	r3, #160	; 0xa0
 8009dd8:	05db      	lsls	r3, r3, #23
 8009dda:	2201      	movs	r2, #1
 8009ddc:	2110      	movs	r1, #16
 8009dde:	0018      	movs	r0, r3
 8009de0:	f7f7 f88a 	bl	8000ef8 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8009de4:	2064      	movs	r0, #100	; 0x64
 8009de6:	f7f6 fe11 	bl	8000a0c <HAL_Delay>

  #if (_W25QXX_DEBUG==1)
  	  printf("w25qxx Init Begin...\r\n");
 8009dea:	4b85      	ldr	r3, [pc, #532]	; (800a000 <W25qxx_Init+0x248>)
 8009dec:	0018      	movs	r0, r3
 8009dee:	f000 fbcd 	bl	800a58c <puts>
  #endif
  id = W25qxx_ReadID();
 8009df2:	f7ff fec7 	bl	8009b84 <W25qxx_ReadID>
 8009df6:	0002      	movs	r2, r0
 8009df8:	4b82      	ldr	r3, [pc, #520]	; (800a004 <W25qxx_Init+0x24c>)
 8009dfa:	601a      	str	r2, [r3, #0]

  #if (_W25QXX_DEBUG==1)
  	  printf("w25qxx ID:0x%X\r\n", id);
 8009dfc:	4b81      	ldr	r3, [pc, #516]	; (800a004 <W25qxx_Init+0x24c>)
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	4b81      	ldr	r3, [pc, #516]	; (800a008 <W25qxx_Init+0x250>)
 8009e02:	0011      	movs	r1, r2
 8009e04:	0018      	movs	r0, r3
 8009e06:	f000 fb47 	bl	800a498 <iprintf>
  #endif

  switch(id & 0x000000FF)
 8009e0a:	4b7e      	ldr	r3, [pc, #504]	; (800a004 <W25qxx_Init+0x24c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	22ff      	movs	r2, #255	; 0xff
 8009e10:	4013      	ands	r3, r2
 8009e12:	3b11      	subs	r3, #17
 8009e14:	2b0f      	cmp	r3, #15
 8009e16:	d875      	bhi.n	8009f04 <W25qxx_Init+0x14c>
 8009e18:	009a      	lsls	r2, r3, #2
 8009e1a:	4b7c      	ldr	r3, [pc, #496]	; (800a00c <W25qxx_Init+0x254>)
 8009e1c:	18d3      	adds	r3, r2, r3
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	469f      	mov	pc, r3
  {
		case 0x20:	// 	w25q512
			w25qxx.ID=W25Q512;
 8009e22:	4b76      	ldr	r3, [pc, #472]	; (8009ffc <W25qxx_Init+0x244>)
 8009e24:	220a      	movs	r2, #10
 8009e26:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8009e28:	4b74      	ldr	r3, [pc, #464]	; (8009ffc <W25qxx_Init+0x244>)
 8009e2a:	2280      	movs	r2, #128	; 0x80
 8009e2c:	00d2      	lsls	r2, r2, #3
 8009e2e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q512\r\n");
 8009e30:	4b77      	ldr	r3, [pc, #476]	; (800a010 <W25qxx_Init+0x258>)
 8009e32:	0018      	movs	r0, r3
 8009e34:	f000 fbaa 	bl	800a58c <puts>
			#endif
		break;
 8009e38:	e06e      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x19:	// 	w25q256
			w25qxx.ID=W25Q256;
 8009e3a:	4b70      	ldr	r3, [pc, #448]	; (8009ffc <W25qxx_Init+0x244>)
 8009e3c:	2209      	movs	r2, #9
 8009e3e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8009e40:	4b6e      	ldr	r3, [pc, #440]	; (8009ffc <W25qxx_Init+0x244>)
 8009e42:	2280      	movs	r2, #128	; 0x80
 8009e44:	0092      	lsls	r2, r2, #2
 8009e46:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q256\r\n");
 8009e48:	4b72      	ldr	r3, [pc, #456]	; (800a014 <W25qxx_Init+0x25c>)
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f000 fb9e 	bl	800a58c <puts>
			#endif
		break;
 8009e50:	e062      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x18:	// 	w25q128
			w25qxx.ID=W25Q128;
 8009e52:	4b6a      	ldr	r3, [pc, #424]	; (8009ffc <W25qxx_Init+0x244>)
 8009e54:	2208      	movs	r2, #8
 8009e56:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8009e58:	4b68      	ldr	r3, [pc, #416]	; (8009ffc <W25qxx_Init+0x244>)
 8009e5a:	2280      	movs	r2, #128	; 0x80
 8009e5c:	0052      	lsls	r2, r2, #1
 8009e5e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q128\r\n");
 8009e60:	4b6d      	ldr	r3, [pc, #436]	; (800a018 <W25qxx_Init+0x260>)
 8009e62:	0018      	movs	r0, r3
 8009e64:	f000 fb92 	bl	800a58c <puts>
			#endif
		break;
 8009e68:	e056      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x17:	//	w25q64                       /// for the demostration we are using this chip //
			w25qxx.ID=W25Q64;
 8009e6a:	4b64      	ldr	r3, [pc, #400]	; (8009ffc <W25qxx_Init+0x244>)
 8009e6c:	2207      	movs	r2, #7
 8009e6e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8009e70:	4b62      	ldr	r3, [pc, #392]	; (8009ffc <W25qxx_Init+0x244>)
 8009e72:	2280      	movs	r2, #128	; 0x80
 8009e74:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q64\r\n");
 8009e76:	4b69      	ldr	r3, [pc, #420]	; (800a01c <W25qxx_Init+0x264>)
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f000 fb87 	bl	800a58c <puts>
			#endif
		break;
 8009e7e:	e04b      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x16:	//	w25q32
			w25qxx.ID=W25Q32;
 8009e80:	4b5e      	ldr	r3, [pc, #376]	; (8009ffc <W25qxx_Init+0x244>)
 8009e82:	2206      	movs	r2, #6
 8009e84:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8009e86:	4b5d      	ldr	r3, [pc, #372]	; (8009ffc <W25qxx_Init+0x244>)
 8009e88:	2240      	movs	r2, #64	; 0x40
 8009e8a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q32\r\n");
 8009e8c:	4b64      	ldr	r3, [pc, #400]	; (800a020 <W25qxx_Init+0x268>)
 8009e8e:	0018      	movs	r0, r3
 8009e90:	f000 fb7c 	bl	800a58c <puts>
			#endif
		break;
 8009e94:	e040      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x15:	//	w25q16
			w25qxx.ID=W25Q16;
 8009e96:	4b59      	ldr	r3, [pc, #356]	; (8009ffc <W25qxx_Init+0x244>)
 8009e98:	2205      	movs	r2, #5
 8009e9a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8009e9c:	4b57      	ldr	r3, [pc, #348]	; (8009ffc <W25qxx_Init+0x244>)
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q16\r\n");
 8009ea2:	4b60      	ldr	r3, [pc, #384]	; (800a024 <W25qxx_Init+0x26c>)
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f000 fb71 	bl	800a58c <puts>
			#endif
		break;
 8009eaa:	e035      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x14:	//	w25q80
			w25qxx.ID=W25Q80;
 8009eac:	4b53      	ldr	r3, [pc, #332]	; (8009ffc <W25qxx_Init+0x244>)
 8009eae:	2204      	movs	r2, #4
 8009eb0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8009eb2:	4b52      	ldr	r3, [pc, #328]	; (8009ffc <W25qxx_Init+0x244>)
 8009eb4:	2210      	movs	r2, #16
 8009eb6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q80\r\n");
 8009eb8:	4b5b      	ldr	r3, [pc, #364]	; (800a028 <W25qxx_Init+0x270>)
 8009eba:	0018      	movs	r0, r3
 8009ebc:	f000 fb66 	bl	800a58c <puts>
			#endif
		break;
 8009ec0:	e02a      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x13:	//	w25q40
			w25qxx.ID=W25Q40;
 8009ec2:	4b4e      	ldr	r3, [pc, #312]	; (8009ffc <W25qxx_Init+0x244>)
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8009ec8:	4b4c      	ldr	r3, [pc, #304]	; (8009ffc <W25qxx_Init+0x244>)
 8009eca:	2208      	movs	r2, #8
 8009ecc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q40\r\n");
 8009ece:	4b57      	ldr	r3, [pc, #348]	; (800a02c <W25qxx_Init+0x274>)
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f000 fb5b 	bl	800a58c <puts>
			#endif
		break;
 8009ed6:	e01f      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x12:	//	w25q20
			w25qxx.ID=W25Q20;
 8009ed8:	4b48      	ldr	r3, [pc, #288]	; (8009ffc <W25qxx_Init+0x244>)
 8009eda:	2202      	movs	r2, #2
 8009edc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8009ede:	4b47      	ldr	r3, [pc, #284]	; (8009ffc <W25qxx_Init+0x244>)
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q20\r\n");
 8009ee4:	4b52      	ldr	r3, [pc, #328]	; (800a030 <W25qxx_Init+0x278>)
 8009ee6:	0018      	movs	r0, r3
 8009ee8:	f000 fb50 	bl	800a58c <puts>
			#endif
		break;
 8009eec:	e014      	b.n	8009f18 <W25qxx_Init+0x160>
		case 0x11:	//	w25q10
			w25qxx.ID=W25Q10;
 8009eee:	4b43      	ldr	r3, [pc, #268]	; (8009ffc <W25qxx_Init+0x244>)
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8009ef4:	4b41      	ldr	r3, [pc, #260]	; (8009ffc <W25qxx_Init+0x244>)
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Chip: w25q10\r\n");
 8009efa:	4b4e      	ldr	r3, [pc, #312]	; (800a034 <W25qxx_Init+0x27c>)
 8009efc:	0018      	movs	r0, r3
 8009efe:	f000 fb45 	bl	800a58c <puts>
			#endif
		break;
 8009f02:	e009      	b.n	8009f18 <W25qxx_Init+0x160>
		default:
			#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
 8009f04:	4b4c      	ldr	r3, [pc, #304]	; (800a038 <W25qxx_Init+0x280>)
 8009f06:	0018      	movs	r0, r3
 8009f08:	f000 fb40 	bl	800a58c <puts>
			#endif
			w25qxx.Lock=0;
 8009f0c:	4b3b      	ldr	r3, [pc, #236]	; (8009ffc <W25qxx_Init+0x244>)
 8009f0e:	2227      	movs	r2, #39	; 0x27
 8009f10:	2100      	movs	r1, #0
 8009f12:	5499      	strb	r1, [r3, r2]
			return false;
 8009f14:	2300      	movs	r3, #0
 8009f16:	e06e      	b.n	8009ff6 <W25qxx_Init+0x23e>

	}
	w25qxx.PageSize=256;
 8009f18:	4b38      	ldr	r3, [pc, #224]	; (8009ffc <W25qxx_Init+0x244>)
 8009f1a:	2280      	movs	r2, #128	; 0x80
 8009f1c:	0052      	lsls	r2, r2, #1
 8009f1e:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8009f20:	4b36      	ldr	r3, [pc, #216]	; (8009ffc <W25qxx_Init+0x244>)
 8009f22:	2280      	movs	r2, #128	; 0x80
 8009f24:	0152      	lsls	r2, r2, #5
 8009f26:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8009f28:	4b34      	ldr	r3, [pc, #208]	; (8009ffc <W25qxx_Init+0x244>)
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	011a      	lsls	r2, r3, #4
 8009f2e:	4b33      	ldr	r3, [pc, #204]	; (8009ffc <W25qxx_Init+0x244>)
 8009f30:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8009f32:	4b32      	ldr	r3, [pc, #200]	; (8009ffc <W25qxx_Init+0x244>)
 8009f34:	695a      	ldr	r2, [r3, #20]
 8009f36:	4b31      	ldr	r3, [pc, #196]	; (8009ffc <W25qxx_Init+0x244>)
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	435a      	muls	r2, r3
 8009f3c:	4b2f      	ldr	r3, [pc, #188]	; (8009ffc <W25qxx_Init+0x244>)
 8009f3e:	895b      	ldrh	r3, [r3, #10]
 8009f40:	0019      	movs	r1, r3
 8009f42:	0010      	movs	r0, r2
 8009f44:	f7f6 f8e0 	bl	8000108 <__udivsi3>
 8009f48:	0003      	movs	r3, r0
 8009f4a:	001a      	movs	r2, r3
 8009f4c:	4b2b      	ldr	r3, [pc, #172]	; (8009ffc <W25qxx_Init+0x244>)
 8009f4e:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8009f50:	4b2a      	ldr	r3, [pc, #168]	; (8009ffc <W25qxx_Init+0x244>)
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	011a      	lsls	r2, r3, #4
 8009f56:	4b29      	ldr	r3, [pc, #164]	; (8009ffc <W25qxx_Init+0x244>)
 8009f58:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8009f5a:	4b28      	ldr	r3, [pc, #160]	; (8009ffc <W25qxx_Init+0x244>)
 8009f5c:	695a      	ldr	r2, [r3, #20]
 8009f5e:	4b27      	ldr	r3, [pc, #156]	; (8009ffc <W25qxx_Init+0x244>)
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	4353      	muls	r3, r2
 8009f64:	0a9a      	lsrs	r2, r3, #10
 8009f66:	4b25      	ldr	r3, [pc, #148]	; (8009ffc <W25qxx_Init+0x244>)
 8009f68:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 8009f6a:	f7ff fe43 	bl	8009bf4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8009f6e:	2001      	movs	r0, #1
 8009f70:	f7ff fe9c 	bl	8009cac <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8009f74:	2002      	movs	r0, #2
 8009f76:	f7ff fe99 	bl	8009cac <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8009f7a:	2003      	movs	r0, #3
 8009f7c:	f7ff fe96 	bl	8009cac <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
		printf("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 8009f80:	4b1e      	ldr	r3, [pc, #120]	; (8009ffc <W25qxx_Init+0x244>)
 8009f82:	895b      	ldrh	r3, [r3, #10]
 8009f84:	001a      	movs	r2, r3
 8009f86:	4b2d      	ldr	r3, [pc, #180]	; (800a03c <W25qxx_Init+0x284>)
 8009f88:	0011      	movs	r1, r2
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f000 fa84 	bl	800a498 <iprintf>
		printf("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 8009f90:	4b1a      	ldr	r3, [pc, #104]	; (8009ffc <W25qxx_Init+0x244>)
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	4b2a      	ldr	r3, [pc, #168]	; (800a040 <W25qxx_Init+0x288>)
 8009f96:	0011      	movs	r1, r2
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f000 fa7d 	bl	800a498 <iprintf>
		printf("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 8009f9e:	4b17      	ldr	r3, [pc, #92]	; (8009ffc <W25qxx_Init+0x244>)
 8009fa0:	691a      	ldr	r2, [r3, #16]
 8009fa2:	4b28      	ldr	r3, [pc, #160]	; (800a044 <W25qxx_Init+0x28c>)
 8009fa4:	0011      	movs	r1, r2
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	f000 fa76 	bl	800a498 <iprintf>
		printf("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 8009fac:	4b13      	ldr	r3, [pc, #76]	; (8009ffc <W25qxx_Init+0x244>)
 8009fae:	695a      	ldr	r2, [r3, #20]
 8009fb0:	4b25      	ldr	r3, [pc, #148]	; (800a048 <W25qxx_Init+0x290>)
 8009fb2:	0011      	movs	r1, r2
 8009fb4:	0018      	movs	r0, r3
 8009fb6:	f000 fa6f 	bl	800a498 <iprintf>
		printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 8009fba:	4b10      	ldr	r3, [pc, #64]	; (8009ffc <W25qxx_Init+0x244>)
 8009fbc:	699a      	ldr	r2, [r3, #24]
 8009fbe:	4b23      	ldr	r3, [pc, #140]	; (800a04c <W25qxx_Init+0x294>)
 8009fc0:	0011      	movs	r1, r2
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f000 fa68 	bl	800a498 <iprintf>
		printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <W25qxx_Init+0x244>)
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	4b20      	ldr	r3, [pc, #128]	; (800a050 <W25qxx_Init+0x298>)
 8009fce:	0011      	movs	r1, r2
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f000 fa61 	bl	800a498 <iprintf>
		printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 8009fd6:	4b09      	ldr	r3, [pc, #36]	; (8009ffc <W25qxx_Init+0x244>)
 8009fd8:	6a1a      	ldr	r2, [r3, #32]
 8009fda:	4b1e      	ldr	r3, [pc, #120]	; (800a054 <W25qxx_Init+0x29c>)
 8009fdc:	0011      	movs	r1, r2
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f000 fa5a 	bl	800a498 <iprintf>
		printf("w25qxx Init Done\r\n");
 8009fe4:	4b1c      	ldr	r3, [pc, #112]	; (800a058 <W25qxx_Init+0x2a0>)
 8009fe6:	0018      	movs	r0, r3
 8009fe8:	f000 fad0 	bl	800a58c <puts>
	#endif
	w25qxx.Lock=0;
 8009fec:	4b03      	ldr	r3, [pc, #12]	; (8009ffc <W25qxx_Init+0x244>)
 8009fee:	2227      	movs	r2, #39	; 0x27
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	5499      	strb	r1, [r3, r2]
	return true;
 8009ff4:	2301      	movs	r3, #1
}
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20000cd0 	.word	0x20000cd0
 800a000:	0800b3f8 	.word	0x0800b3f8
 800a004:	20000ccc 	.word	0x20000ccc
 800a008:	0800b410 	.word	0x0800b410
 800a00c:	0800be68 	.word	0x0800be68
 800a010:	0800b424 	.word	0x0800b424
 800a014:	0800b43c 	.word	0x0800b43c
 800a018:	0800b454 	.word	0x0800b454
 800a01c:	0800b46c 	.word	0x0800b46c
 800a020:	0800b484 	.word	0x0800b484
 800a024:	0800b49c 	.word	0x0800b49c
 800a028:	0800b4b4 	.word	0x0800b4b4
 800a02c:	0800b4cc 	.word	0x0800b4cc
 800a030:	0800b4e4 	.word	0x0800b4e4
 800a034:	0800b4fc 	.word	0x0800b4fc
 800a038:	0800b514 	.word	0x0800b514
 800a03c:	0800b528 	.word	0x0800b528
 800a040:	0800b548 	.word	0x0800b548
 800a044:	0800b560 	.word	0x0800b560
 800a048:	0800b580 	.word	0x0800b580
 800a04c:	0800b59c 	.word	0x0800b59c
 800a050:	0800b5bc 	.word	0x0800b5bc
 800a054:	0800b5d8 	.word	0x0800b5d8
 800a058:	0800b5f8 	.word	0x0800b5f8

0800a05c <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
	while(w25qxx.Lock==1)
 800a062:	e002      	b.n	800a06a <W25qxx_EraseChip+0xe>
		W25qxx_Delay(1);
 800a064:	2001      	movs	r0, #1
 800a066:	f7f6 fcd1 	bl	8000a0c <HAL_Delay>
	while(w25qxx.Lock==1)
 800a06a:	4b27      	ldr	r3, [pc, #156]	; (800a108 <W25qxx_EraseChip+0xac>)
 800a06c:	2227      	movs	r2, #39	; 0x27
 800a06e:	5c9b      	ldrb	r3, [r3, r2]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d0f7      	beq.n	800a064 <W25qxx_EraseChip+0x8>
	w25qxx.Lock=1;
 800a074:	4b24      	ldr	r3, [pc, #144]	; (800a108 <W25qxx_EraseChip+0xac>)
 800a076:	2227      	movs	r2, #39	; 0x27
 800a078:	2101      	movs	r1, #1
 800a07a:	5499      	strb	r1, [r3, r2]
	#if (_W25QXX_DEBUG==1)
		uint32_t StartTime = HAL_GetTick();
 800a07c:	f7f6 fcbc 	bl	80009f8 <HAL_GetTick>
 800a080:	0003      	movs	r3, r0
 800a082:	607b      	str	r3, [r7, #4]
		printf("w25qxx EraseChip Begin...\r\n");
 800a084:	4b21      	ldr	r3, [pc, #132]	; (800a10c <W25qxx_EraseChip+0xb0>)
 800a086:	0018      	movs	r0, r3
 800a088:	f000 fa80 	bl	800a58c <puts>
	#endif

	W25qxx_WriteEnable();
 800a08c:	f7ff fdf4 	bl	8009c78 <W25qxx_WriteEnable>

	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800a090:	23a0      	movs	r3, #160	; 0xa0
 800a092:	05db      	lsls	r3, r3, #23
 800a094:	2200      	movs	r2, #0
 800a096:	2110      	movs	r1, #16
 800a098:	0018      	movs	r0, r3
 800a09a:	f7f6 ff2d 	bl	8000ef8 <HAL_GPIO_WritePin>
	W25qxx_Spi(WRITESTAT1);
 800a09e:	2001      	movs	r0, #1
 800a0a0:	f7ff fd58 	bl	8009b54 <W25qxx_Spi>
	W25qxx_Spi(0x03);
 800a0a4:	2003      	movs	r0, #3
 800a0a6:	f7ff fd55 	bl	8009b54 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800a0aa:	23a0      	movs	r3, #160	; 0xa0
 800a0ac:	05db      	lsls	r3, r3, #23
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	2110      	movs	r1, #16
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	f7f6 ff20 	bl	8000ef8 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800a0b8:	23a0      	movs	r3, #160	; 0xa0
 800a0ba:	05db      	lsls	r3, r3, #23
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2110      	movs	r1, #16
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7f6 ff19 	bl	8000ef8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 800a0c6:	20c7      	movs	r0, #199	; 0xc7
 800a0c8:	f7ff fd44 	bl	8009b54 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800a0cc:	23a0      	movs	r3, #160	; 0xa0
 800a0ce:	05db      	lsls	r3, r3, #23
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	2110      	movs	r1, #16
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	f7f6 ff0f 	bl	8000ef8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800a0da:	f7ff fe3f 	bl	8009d5c <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
		printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
 800a0de:	f7f6 fc8b 	bl	80009f8 <HAL_GetTick>
 800a0e2:	0002      	movs	r2, r0
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	1ad2      	subs	r2, r2, r3
 800a0e8:	4b09      	ldr	r3, [pc, #36]	; (800a110 <W25qxx_EraseChip+0xb4>)
 800a0ea:	0011      	movs	r1, r2
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f000 f9d3 	bl	800a498 <iprintf>
	#endif
	W25qxx_Delay(10);
 800a0f2:	200a      	movs	r0, #10
 800a0f4:	f7f6 fc8a 	bl	8000a0c <HAL_Delay>
	w25qxx.Lock=0;
 800a0f8:	4b03      	ldr	r3, [pc, #12]	; (800a108 <W25qxx_EraseChip+0xac>)
 800a0fa:	2227      	movs	r2, #39	; 0x27
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	5499      	strb	r1, [r3, r2]
}
 800a100:	46c0      	nop			; (mov r8, r8)
 800a102:	46bd      	mov	sp, r7
 800a104:	b002      	add	sp, #8
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20000cd0 	.word	0x20000cd0
 800a10c:	0800b60c 	.word	0x0800b60c
 800a110:	0800b628 	.word	0x0800b628

0800a114 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 800a122:	e002      	b.n	800a12a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800a124:	2001      	movs	r0, #1
 800a126:	f7f6 fc71 	bl	8000a0c <HAL_Delay>
	while(w25qxx.Lock==1)
 800a12a:	4b5a      	ldr	r3, [pc, #360]	; (800a294 <W25qxx_WritePage+0x180>)
 800a12c:	2227      	movs	r2, #39	; 0x27
 800a12e:	5c9b      	ldrb	r3, [r3, r2]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d0f7      	beq.n	800a124 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 800a134:	4b57      	ldr	r3, [pc, #348]	; (800a294 <W25qxx_WritePage+0x180>)
 800a136:	2227      	movs	r2, #39	; 0x27
 800a138:	2101      	movs	r1, #1
 800a13a:	5499      	strb	r1, [r3, r2]
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	18d3      	adds	r3, r2, r3
 800a142:	4a54      	ldr	r2, [pc, #336]	; (800a294 <W25qxx_WritePage+0x180>)
 800a144:	8952      	ldrh	r2, [r2, #10]
 800a146:	4293      	cmp	r3, r2
 800a148:	d802      	bhi.n	800a150 <W25qxx_WritePage+0x3c>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 800a150:	4b50      	ldr	r3, [pc, #320]	; (800a294 <W25qxx_WritePage+0x180>)
 800a152:	895b      	ldrh	r3, [r3, #10]
 800a154:	001a      	movs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	18d3      	adds	r3, r2, r3
 800a162:	4a4c      	ldr	r2, [pc, #304]	; (800a294 <W25qxx_WritePage+0x180>)
 800a164:	8952      	ldrh	r2, [r2, #10]
 800a166:	4293      	cmp	r3, r2
 800a168:	d905      	bls.n	800a176 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800a16a:	4b4a      	ldr	r3, [pc, #296]	; (800a294 <W25qxx_WritePage+0x180>)
 800a16c:	895b      	ldrh	r3, [r3, #10]
 800a16e:	001a      	movs	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
		printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	4846      	ldr	r0, [pc, #280]	; (800a298 <W25qxx_WritePage+0x184>)
 800a17e:	f000 f98b 	bl	800a498 <iprintf>
		W25qxx_Delay(100);
 800a182:	2064      	movs	r0, #100	; 0x64
 800a184:	f7f6 fc42 	bl	8000a0c <HAL_Delay>
		uint32_t StartTime = HAL_GetTick();
 800a188:	f7f6 fc36 	bl	80009f8 <HAL_GetTick>
 800a18c:	0003      	movs	r3, r0
 800a18e:	613b      	str	r3, [r7, #16]
	#endif
  W25qxx_WaitForWriteEnd();
 800a190:	f7ff fde4 	bl	8009d5c <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 800a194:	f7ff fd70 	bl	8009c78 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800a198:	23a0      	movs	r3, #160	; 0xa0
 800a19a:	05db      	lsls	r3, r3, #23
 800a19c:	2200      	movs	r2, #0
 800a19e:	2110      	movs	r1, #16
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f7f6 fea9 	bl	8000ef8 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 800a1a6:	2002      	movs	r0, #2
 800a1a8:	f7ff fcd4 	bl	8009b54 <W25qxx_Spi>
  Page_Address = (Page_Address*w25qxx.PageSize) + OffsetInByte;
 800a1ac:	4b39      	ldr	r3, [pc, #228]	; (800a294 <W25qxx_WritePage+0x180>)
 800a1ae:	895b      	ldrh	r3, [r3, #10]
 800a1b0:	001a      	movs	r2, r3
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4353      	muls	r3, r2
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	18d3      	adds	r3, r2, r3
 800a1ba:	60bb      	str	r3, [r7, #8]
  if(w25qxx.ID>=W25Q256)
 800a1bc:	4b35      	ldr	r3, [pc, #212]	; (800a294 <W25qxx_WritePage+0x180>)
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d905      	bls.n	800a1d0 <W25qxx_WritePage+0xbc>
	W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	0e1b      	lsrs	r3, r3, #24
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f7ff fcc2 	bl	8009b54 <W25qxx_Spi>

  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	0c1b      	lsrs	r3, r3, #16
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f7ff fcbc 	bl	8009b54 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	0a1b      	lsrs	r3, r3, #8
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f7ff fcb6 	bl	8009b54 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	0018      	movs	r0, r3
 800a1ee:	f7ff fcb1 	bl	8009b54 <W25qxx_Spi>
  HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	4828      	ldr	r0, [pc, #160]	; (800a29c <W25qxx_WritePage+0x188>)
 800a1fa:	2364      	movs	r3, #100	; 0x64
 800a1fc:	f7f9 fcce 	bl	8003b9c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800a200:	23a0      	movs	r3, #160	; 0xa0
 800a202:	05db      	lsls	r3, r3, #23
 800a204:	2201      	movs	r2, #1
 800a206:	2110      	movs	r1, #16
 800a208:	0018      	movs	r0, r3
 800a20a:	f7f6 fe75 	bl	8000ef8 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800a20e:	f7ff fda5 	bl	8009d5c <W25qxx_WaitForWriteEnd>

  #if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime;
 800a212:	f7f6 fbf1 	bl	80009f8 <HAL_GetTick>
 800a216:	0002      	movs	r2, r0
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 800a21e:	2300      	movs	r3, #0
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	e01a      	b.n	800a25a <W25qxx_WritePage+0x146>
	{
		if((i%8==0)&&(i>2))
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	2207      	movs	r2, #7
 800a228:	4013      	ands	r3, r2
 800a22a:	d109      	bne.n	800a240 <W25qxx_WritePage+0x12c>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d906      	bls.n	800a240 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 800a232:	4b1b      	ldr	r3, [pc, #108]	; (800a2a0 <W25qxx_WritePage+0x18c>)
 800a234:	0018      	movs	r0, r3
 800a236:	f000 f9a9 	bl	800a58c <puts>
			W25qxx_Delay(10);
 800a23a:	200a      	movs	r0, #10
 800a23c:	f7f6 fbe6 	bl	8000a0c <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	18d3      	adds	r3, r2, r3
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	001a      	movs	r2, r3
 800a24a:	4b16      	ldr	r3, [pc, #88]	; (800a2a4 <W25qxx_WritePage+0x190>)
 800a24c:	0011      	movs	r1, r2
 800a24e:	0018      	movs	r0, r3
 800a250:	f000 f922 	bl	800a498 <iprintf>
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	3301      	adds	r3, #1
 800a258:	617b      	str	r3, [r7, #20]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d3e0      	bcc.n	800a224 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 800a262:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <W25qxx_WritePage+0x18c>)
 800a264:	0018      	movs	r0, r3
 800a266:	f000 f991 	bl	800a58c <puts>
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	4b0e      	ldr	r3, [pc, #56]	; (800a2a8 <W25qxx_WritePage+0x194>)
 800a26e:	0011      	movs	r1, r2
 800a270:	0018      	movs	r0, r3
 800a272:	f000 f911 	bl	800a498 <iprintf>
	W25qxx_Delay(100);
 800a276:	2064      	movs	r0, #100	; 0x64
 800a278:	f7f6 fbc8 	bl	8000a0c <HAL_Delay>
  #endif

  W25qxx_Delay(1);
 800a27c:	2001      	movs	r0, #1
 800a27e:	f7f6 fbc5 	bl	8000a0c <HAL_Delay>
  w25qxx.Lock=0;
 800a282:	4b04      	ldr	r3, [pc, #16]	; (800a294 <W25qxx_WritePage+0x180>)
 800a284:	2227      	movs	r2, #39	; 0x27
 800a286:	2100      	movs	r1, #0
 800a288:	5499      	strb	r1, [r3, r2]
}
 800a28a:	46c0      	nop			; (mov r8, r8)
 800a28c:	46bd      	mov	sp, r7
 800a28e:	b006      	add	sp, #24
 800a290:	bd80      	pop	{r7, pc}
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	20000cd0 	.word	0x20000cd0
 800a298:	0800b8d8 	.word	0x0800b8d8
 800a29c:	200004b8 	.word	0x200004b8
 800a2a0:	0800b914 	.word	0x0800b914
 800a2a4:	0800b918 	.word	0x0800b918
 800a2a8:	0800b920 	.word	0x0800b920

0800a2ac <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 800a2ba:	e002      	b.n	800a2c2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800a2bc:	2001      	movs	r0, #1
 800a2be:	f7f6 fba5 	bl	8000a0c <HAL_Delay>
	while(w25qxx.Lock==1)
 800a2c2:	4b56      	ldr	r3, [pc, #344]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a2c4:	2227      	movs	r2, #39	; 0x27
 800a2c6:	5c9b      	ldrb	r3, [r3, r2]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d0f7      	beq.n	800a2bc <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 800a2cc:	4b53      	ldr	r3, [pc, #332]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a2ce:	2227      	movs	r2, #39	; 0x27
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	5499      	strb	r1, [r3, r2]

	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 800a2d4:	4b51      	ldr	r3, [pc, #324]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a2d6:	895b      	ldrh	r3, [r3, #10]
 800a2d8:	001a      	movs	r2, r3
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d802      	bhi.n	800a2e6 <W25qxx_ReadPage+0x3a>
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d102      	bne.n	800a2ec <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 800a2e6:	4b4d      	ldr	r3, [pc, #308]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a2e8:	895b      	ldrh	r3, [r3, #10]
 800a2ea:	603b      	str	r3, [r7, #0]

	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	18d3      	adds	r3, r2, r3
 800a2f2:	4a4a      	ldr	r2, [pc, #296]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a2f4:	8952      	ldrh	r2, [r2, #10]
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d905      	bls.n	800a306 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800a2fa:	4b48      	ldr	r3, [pc, #288]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a2fc:	895b      	ldrh	r3, [r3, #10]
 800a2fe:	001a      	movs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	603b      	str	r3, [r7, #0]

	#if (_W25QXX_DEBUG==1)
		printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	4844      	ldr	r0, [pc, #272]	; (800a420 <W25qxx_ReadPage+0x174>)
 800a30e:	f000 f8c3 	bl	800a498 <iprintf>
		W25qxx_Delay(100);
 800a312:	2064      	movs	r0, #100	; 0x64
 800a314:	f7f6 fb7a 	bl	8000a0c <HAL_Delay>
		uint32_t StartTime = HAL_GetTick();
 800a318:	f7f6 fb6e 	bl	80009f8 <HAL_GetTick>
 800a31c:	0003      	movs	r3, r0
 800a31e:	613b      	str	r3, [r7, #16]
	#endif

	Page_Address = (Page_Address*w25qxx.PageSize) + OffsetInByte;
 800a320:	4b3e      	ldr	r3, [pc, #248]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a322:	895b      	ldrh	r3, [r3, #10]
 800a324:	001a      	movs	r2, r3
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	4353      	muls	r3, r2
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	18d3      	adds	r3, r2, r3
 800a32e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800a330:	23a0      	movs	r3, #160	; 0xa0
 800a332:	05db      	lsls	r3, r3, #23
 800a334:	2200      	movs	r2, #0
 800a336:	2110      	movs	r1, #16
 800a338:	0018      	movs	r0, r3
 800a33a:	f7f6 fddd 	bl	8000ef8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 800a33e:	200b      	movs	r0, #11
 800a340:	f7ff fc08 	bl	8009b54 <W25qxx_Spi>

	if(w25qxx.ID>=W25Q256)
 800a344:	4b35      	ldr	r3, [pc, #212]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d905      	bls.n	800a358 <W25qxx_ReadPage+0xac>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	0e1b      	lsrs	r3, r3, #24
 800a350:	b2db      	uxtb	r3, r3
 800a352:	0018      	movs	r0, r3
 800a354:	f7ff fbfe 	bl	8009b54 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	0c1b      	lsrs	r3, r3, #16
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	0018      	movs	r0, r3
 800a360:	f7ff fbf8 	bl	8009b54 <W25qxx_Spi>
	W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	0a1b      	lsrs	r3, r3, #8
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	0018      	movs	r0, r3
 800a36c:	f7ff fbf2 	bl	8009b54 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	0018      	movs	r0, r3
 800a376:	f7ff fbed 	bl	8009b54 <W25qxx_Spi>
	W25qxx_Spi(0);
 800a37a:	2000      	movs	r0, #0
 800a37c:	f7ff fbea 	bl	8009b54 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	b29a      	uxth	r2, r3
 800a384:	68f9      	ldr	r1, [r7, #12]
 800a386:	4827      	ldr	r0, [pc, #156]	; (800a424 <W25qxx_ReadPage+0x178>)
 800a388:	2364      	movs	r3, #100	; 0x64
 800a38a:	f7f9 fd5d 	bl	8003e48 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800a38e:	23a0      	movs	r3, #160	; 0xa0
 800a390:	05db      	lsls	r3, r3, #23
 800a392:	2201      	movs	r2, #1
 800a394:	2110      	movs	r1, #16
 800a396:	0018      	movs	r0, r3
 800a398:	f7f6 fdae 	bl	8000ef8 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
		StartTime = HAL_GetTick() - StartTime;
 800a39c:	f7f6 fb2c 	bl	80009f8 <HAL_GetTick>
 800a3a0:	0002      	movs	r2, r0
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	613b      	str	r3, [r7, #16]
		for(uint32_t i=0;i<NumByteToRead_up_to_PageSize ; i++)
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e01a      	b.n	800a3e4 <W25qxx_ReadPage+0x138>
		{
		if((i%8==0)&&(i>2))
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	d109      	bne.n	800a3ca <W25qxx_ReadPage+0x11e>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d906      	bls.n	800a3ca <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800a3bc:	4b1a      	ldr	r3, [pc, #104]	; (800a428 <W25qxx_ReadPage+0x17c>)
 800a3be:	0018      	movs	r0, r3
 800a3c0:	f000 f8e4 	bl	800a58c <puts>
			W25qxx_Delay(10);
 800a3c4:	200a      	movs	r0, #10
 800a3c6:	f7f6 fb21 	bl	8000a0c <HAL_Delay>
		}
			printf("0x%02X,",pBuffer[i]);
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	18d3      	adds	r3, r2, r3
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	001a      	movs	r2, r3
 800a3d4:	4b15      	ldr	r3, [pc, #84]	; (800a42c <W25qxx_ReadPage+0x180>)
 800a3d6:	0011      	movs	r1, r2
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f000 f85d 	bl	800a498 <iprintf>
		for(uint32_t i=0;i<NumByteToRead_up_to_PageSize ; i++)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d3e0      	bcc.n	800a3ae <W25qxx_ReadPage+0x102>
		}
		printf("\r\n");
 800a3ec:	4b0e      	ldr	r3, [pc, #56]	; (800a428 <W25qxx_ReadPage+0x17c>)
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	f000 f8cc 	bl	800a58c <puts>
		printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4b0e      	ldr	r3, [pc, #56]	; (800a430 <W25qxx_ReadPage+0x184>)
 800a3f8:	0011      	movs	r1, r2
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f000 f84c 	bl	800a498 <iprintf>
		W25qxx_Delay(100);
 800a400:	2064      	movs	r0, #100	; 0x64
 800a402:	f7f6 fb03 	bl	8000a0c <HAL_Delay>
	#endif
	W25qxx_Delay(1);
 800a406:	2001      	movs	r0, #1
 800a408:	f7f6 fb00 	bl	8000a0c <HAL_Delay>
	w25qxx.Lock=0;
 800a40c:	4b03      	ldr	r3, [pc, #12]	; (800a41c <W25qxx_ReadPage+0x170>)
 800a40e:	2227      	movs	r2, #39	; 0x27
 800a410:	2100      	movs	r1, #0
 800a412:	5499      	strb	r1, [r3, r2]
}
 800a414:	46c0      	nop			; (mov r8, r8)
 800a416:	46bd      	mov	sp, r7
 800a418:	b006      	add	sp, #24
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	20000cd0 	.word	0x20000cd0
 800a420:	0800baf0 	.word	0x0800baf0
 800a424:	200004b8 	.word	0x200004b8
 800a428:	0800b914 	.word	0x0800b914
 800a42c:	0800b918 	.word	0x0800b918
 800a430:	0800bb2c 	.word	0x0800bb2c

0800a434 <__errno>:
 800a434:	4b01      	ldr	r3, [pc, #4]	; (800a43c <__errno+0x8>)
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	4770      	bx	lr
 800a43a:	46c0      	nop			; (mov r8, r8)
 800a43c:	2000016c 	.word	0x2000016c

0800a440 <__libc_init_array>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	2600      	movs	r6, #0
 800a444:	4d0c      	ldr	r5, [pc, #48]	; (800a478 <__libc_init_array+0x38>)
 800a446:	4c0d      	ldr	r4, [pc, #52]	; (800a47c <__libc_init_array+0x3c>)
 800a448:	1b64      	subs	r4, r4, r5
 800a44a:	10a4      	asrs	r4, r4, #2
 800a44c:	42a6      	cmp	r6, r4
 800a44e:	d109      	bne.n	800a464 <__libc_init_array+0x24>
 800a450:	2600      	movs	r6, #0
 800a452:	f000 ffa3 	bl	800b39c <_init>
 800a456:	4d0a      	ldr	r5, [pc, #40]	; (800a480 <__libc_init_array+0x40>)
 800a458:	4c0a      	ldr	r4, [pc, #40]	; (800a484 <__libc_init_array+0x44>)
 800a45a:	1b64      	subs	r4, r4, r5
 800a45c:	10a4      	asrs	r4, r4, #2
 800a45e:	42a6      	cmp	r6, r4
 800a460:	d105      	bne.n	800a46e <__libc_init_array+0x2e>
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	00b3      	lsls	r3, r6, #2
 800a466:	58eb      	ldr	r3, [r5, r3]
 800a468:	4798      	blx	r3
 800a46a:	3601      	adds	r6, #1
 800a46c:	e7ee      	b.n	800a44c <__libc_init_array+0xc>
 800a46e:	00b3      	lsls	r3, r6, #2
 800a470:	58eb      	ldr	r3, [r5, r3]
 800a472:	4798      	blx	r3
 800a474:	3601      	adds	r6, #1
 800a476:	e7f2      	b.n	800a45e <__libc_init_array+0x1e>
 800a478:	0800bf48 	.word	0x0800bf48
 800a47c:	0800bf48 	.word	0x0800bf48
 800a480:	0800bf48 	.word	0x0800bf48
 800a484:	0800bf4c 	.word	0x0800bf4c

0800a488 <memset>:
 800a488:	0003      	movs	r3, r0
 800a48a:	1812      	adds	r2, r2, r0
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d100      	bne.n	800a492 <memset+0xa>
 800a490:	4770      	bx	lr
 800a492:	7019      	strb	r1, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	e7f9      	b.n	800a48c <memset+0x4>

0800a498 <iprintf>:
 800a498:	b40f      	push	{r0, r1, r2, r3}
 800a49a:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <iprintf+0x30>)
 800a49c:	b513      	push	{r0, r1, r4, lr}
 800a49e:	681c      	ldr	r4, [r3, #0]
 800a4a0:	2c00      	cmp	r4, #0
 800a4a2:	d005      	beq.n	800a4b0 <iprintf+0x18>
 800a4a4:	69a3      	ldr	r3, [r4, #24]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d102      	bne.n	800a4b0 <iprintf+0x18>
 800a4aa:	0020      	movs	r0, r4
 800a4ac:	f000 fa3c 	bl	800a928 <__sinit>
 800a4b0:	ab05      	add	r3, sp, #20
 800a4b2:	9a04      	ldr	r2, [sp, #16]
 800a4b4:	68a1      	ldr	r1, [r4, #8]
 800a4b6:	0020      	movs	r0, r4
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	f000 fc05 	bl	800acc8 <_vfiprintf_r>
 800a4be:	bc16      	pop	{r1, r2, r4}
 800a4c0:	bc08      	pop	{r3}
 800a4c2:	b004      	add	sp, #16
 800a4c4:	4718      	bx	r3
 800a4c6:	46c0      	nop			; (mov r8, r8)
 800a4c8:	2000016c 	.word	0x2000016c

0800a4cc <_puts_r>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	0005      	movs	r5, r0
 800a4d0:	000e      	movs	r6, r1
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d004      	beq.n	800a4e0 <_puts_r+0x14>
 800a4d6:	6983      	ldr	r3, [r0, #24]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d101      	bne.n	800a4e0 <_puts_r+0x14>
 800a4dc:	f000 fa24 	bl	800a928 <__sinit>
 800a4e0:	69ab      	ldr	r3, [r5, #24]
 800a4e2:	68ac      	ldr	r4, [r5, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <_puts_r+0x22>
 800a4e8:	0028      	movs	r0, r5
 800a4ea:	f000 fa1d 	bl	800a928 <__sinit>
 800a4ee:	4b24      	ldr	r3, [pc, #144]	; (800a580 <_puts_r+0xb4>)
 800a4f0:	429c      	cmp	r4, r3
 800a4f2:	d10f      	bne.n	800a514 <_puts_r+0x48>
 800a4f4:	686c      	ldr	r4, [r5, #4]
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	071b      	lsls	r3, r3, #28
 800a4fa:	d502      	bpl.n	800a502 <_puts_r+0x36>
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d11f      	bne.n	800a542 <_puts_r+0x76>
 800a502:	0021      	movs	r1, r4
 800a504:	0028      	movs	r0, r5
 800a506:	f000 f8a1 	bl	800a64c <__swsetup_r>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d019      	beq.n	800a542 <_puts_r+0x76>
 800a50e:	2001      	movs	r0, #1
 800a510:	4240      	negs	r0, r0
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	4b1b      	ldr	r3, [pc, #108]	; (800a584 <_puts_r+0xb8>)
 800a516:	429c      	cmp	r4, r3
 800a518:	d101      	bne.n	800a51e <_puts_r+0x52>
 800a51a:	68ac      	ldr	r4, [r5, #8]
 800a51c:	e7eb      	b.n	800a4f6 <_puts_r+0x2a>
 800a51e:	4b1a      	ldr	r3, [pc, #104]	; (800a588 <_puts_r+0xbc>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d1e8      	bne.n	800a4f6 <_puts_r+0x2a>
 800a524:	68ec      	ldr	r4, [r5, #12]
 800a526:	e7e6      	b.n	800a4f6 <_puts_r+0x2a>
 800a528:	3601      	adds	r6, #1
 800a52a:	60a3      	str	r3, [r4, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	da04      	bge.n	800a53a <_puts_r+0x6e>
 800a530:	69a2      	ldr	r2, [r4, #24]
 800a532:	429a      	cmp	r2, r3
 800a534:	dc16      	bgt.n	800a564 <_puts_r+0x98>
 800a536:	290a      	cmp	r1, #10
 800a538:	d014      	beq.n	800a564 <_puts_r+0x98>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	1c5a      	adds	r2, r3, #1
 800a53e:	6022      	str	r2, [r4, #0]
 800a540:	7019      	strb	r1, [r3, #0]
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	7831      	ldrb	r1, [r6, #0]
 800a546:	3b01      	subs	r3, #1
 800a548:	2900      	cmp	r1, #0
 800a54a:	d1ed      	bne.n	800a528 <_puts_r+0x5c>
 800a54c:	60a3      	str	r3, [r4, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	da0f      	bge.n	800a572 <_puts_r+0xa6>
 800a552:	0022      	movs	r2, r4
 800a554:	310a      	adds	r1, #10
 800a556:	0028      	movs	r0, r5
 800a558:	f000 f822 	bl	800a5a0 <__swbuf_r>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d0d6      	beq.n	800a50e <_puts_r+0x42>
 800a560:	200a      	movs	r0, #10
 800a562:	e7d6      	b.n	800a512 <_puts_r+0x46>
 800a564:	0022      	movs	r2, r4
 800a566:	0028      	movs	r0, r5
 800a568:	f000 f81a 	bl	800a5a0 <__swbuf_r>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d1e8      	bne.n	800a542 <_puts_r+0x76>
 800a570:	e7cd      	b.n	800a50e <_puts_r+0x42>
 800a572:	200a      	movs	r0, #10
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	6022      	str	r2, [r4, #0]
 800a57a:	7018      	strb	r0, [r3, #0]
 800a57c:	e7c9      	b.n	800a512 <_puts_r+0x46>
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	0800becc 	.word	0x0800becc
 800a584:	0800beec 	.word	0x0800beec
 800a588:	0800beac 	.word	0x0800beac

0800a58c <puts>:
 800a58c:	b510      	push	{r4, lr}
 800a58e:	4b03      	ldr	r3, [pc, #12]	; (800a59c <puts+0x10>)
 800a590:	0001      	movs	r1, r0
 800a592:	6818      	ldr	r0, [r3, #0]
 800a594:	f7ff ff9a 	bl	800a4cc <_puts_r>
 800a598:	bd10      	pop	{r4, pc}
 800a59a:	46c0      	nop			; (mov r8, r8)
 800a59c:	2000016c 	.word	0x2000016c

0800a5a0 <__swbuf_r>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	0005      	movs	r5, r0
 800a5a4:	000e      	movs	r6, r1
 800a5a6:	0014      	movs	r4, r2
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d004      	beq.n	800a5b6 <__swbuf_r+0x16>
 800a5ac:	6983      	ldr	r3, [r0, #24]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <__swbuf_r+0x16>
 800a5b2:	f000 f9b9 	bl	800a928 <__sinit>
 800a5b6:	4b22      	ldr	r3, [pc, #136]	; (800a640 <__swbuf_r+0xa0>)
 800a5b8:	429c      	cmp	r4, r3
 800a5ba:	d12d      	bne.n	800a618 <__swbuf_r+0x78>
 800a5bc:	686c      	ldr	r4, [r5, #4]
 800a5be:	69a3      	ldr	r3, [r4, #24]
 800a5c0:	60a3      	str	r3, [r4, #8]
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	071b      	lsls	r3, r3, #28
 800a5c6:	d531      	bpl.n	800a62c <__swbuf_r+0x8c>
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d02e      	beq.n	800a62c <__swbuf_r+0x8c>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	6922      	ldr	r2, [r4, #16]
 800a5d2:	b2f7      	uxtb	r7, r6
 800a5d4:	1a98      	subs	r0, r3, r2
 800a5d6:	6963      	ldr	r3, [r4, #20]
 800a5d8:	b2f6      	uxtb	r6, r6
 800a5da:	4283      	cmp	r3, r0
 800a5dc:	dc05      	bgt.n	800a5ea <__swbuf_r+0x4a>
 800a5de:	0021      	movs	r1, r4
 800a5e0:	0028      	movs	r0, r5
 800a5e2:	f000 f933 	bl	800a84c <_fflush_r>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d126      	bne.n	800a638 <__swbuf_r+0x98>
 800a5ea:	68a3      	ldr	r3, [r4, #8]
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	60a3      	str	r3, [r4, #8]
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	1c5a      	adds	r2, r3, #1
 800a5f6:	6022      	str	r2, [r4, #0]
 800a5f8:	701f      	strb	r7, [r3, #0]
 800a5fa:	6963      	ldr	r3, [r4, #20]
 800a5fc:	4283      	cmp	r3, r0
 800a5fe:	d004      	beq.n	800a60a <__swbuf_r+0x6a>
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	07db      	lsls	r3, r3, #31
 800a604:	d51a      	bpl.n	800a63c <__swbuf_r+0x9c>
 800a606:	2e0a      	cmp	r6, #10
 800a608:	d118      	bne.n	800a63c <__swbuf_r+0x9c>
 800a60a:	0021      	movs	r1, r4
 800a60c:	0028      	movs	r0, r5
 800a60e:	f000 f91d 	bl	800a84c <_fflush_r>
 800a612:	2800      	cmp	r0, #0
 800a614:	d012      	beq.n	800a63c <__swbuf_r+0x9c>
 800a616:	e00f      	b.n	800a638 <__swbuf_r+0x98>
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <__swbuf_r+0xa4>)
 800a61a:	429c      	cmp	r4, r3
 800a61c:	d101      	bne.n	800a622 <__swbuf_r+0x82>
 800a61e:	68ac      	ldr	r4, [r5, #8]
 800a620:	e7cd      	b.n	800a5be <__swbuf_r+0x1e>
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <__swbuf_r+0xa8>)
 800a624:	429c      	cmp	r4, r3
 800a626:	d1ca      	bne.n	800a5be <__swbuf_r+0x1e>
 800a628:	68ec      	ldr	r4, [r5, #12]
 800a62a:	e7c8      	b.n	800a5be <__swbuf_r+0x1e>
 800a62c:	0021      	movs	r1, r4
 800a62e:	0028      	movs	r0, r5
 800a630:	f000 f80c 	bl	800a64c <__swsetup_r>
 800a634:	2800      	cmp	r0, #0
 800a636:	d0ca      	beq.n	800a5ce <__swbuf_r+0x2e>
 800a638:	2601      	movs	r6, #1
 800a63a:	4276      	negs	r6, r6
 800a63c:	0030      	movs	r0, r6
 800a63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a640:	0800becc 	.word	0x0800becc
 800a644:	0800beec 	.word	0x0800beec
 800a648:	0800beac 	.word	0x0800beac

0800a64c <__swsetup_r>:
 800a64c:	4b36      	ldr	r3, [pc, #216]	; (800a728 <__swsetup_r+0xdc>)
 800a64e:	b570      	push	{r4, r5, r6, lr}
 800a650:	681d      	ldr	r5, [r3, #0]
 800a652:	0006      	movs	r6, r0
 800a654:	000c      	movs	r4, r1
 800a656:	2d00      	cmp	r5, #0
 800a658:	d005      	beq.n	800a666 <__swsetup_r+0x1a>
 800a65a:	69ab      	ldr	r3, [r5, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d102      	bne.n	800a666 <__swsetup_r+0x1a>
 800a660:	0028      	movs	r0, r5
 800a662:	f000 f961 	bl	800a928 <__sinit>
 800a666:	4b31      	ldr	r3, [pc, #196]	; (800a72c <__swsetup_r+0xe0>)
 800a668:	429c      	cmp	r4, r3
 800a66a:	d10f      	bne.n	800a68c <__swsetup_r+0x40>
 800a66c:	686c      	ldr	r4, [r5, #4]
 800a66e:	230c      	movs	r3, #12
 800a670:	5ee2      	ldrsh	r2, [r4, r3]
 800a672:	b293      	uxth	r3, r2
 800a674:	0719      	lsls	r1, r3, #28
 800a676:	d42d      	bmi.n	800a6d4 <__swsetup_r+0x88>
 800a678:	06d9      	lsls	r1, r3, #27
 800a67a:	d411      	bmi.n	800a6a0 <__swsetup_r+0x54>
 800a67c:	2309      	movs	r3, #9
 800a67e:	2001      	movs	r0, #1
 800a680:	6033      	str	r3, [r6, #0]
 800a682:	3337      	adds	r3, #55	; 0x37
 800a684:	4313      	orrs	r3, r2
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	4240      	negs	r0, r0
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	4b28      	ldr	r3, [pc, #160]	; (800a730 <__swsetup_r+0xe4>)
 800a68e:	429c      	cmp	r4, r3
 800a690:	d101      	bne.n	800a696 <__swsetup_r+0x4a>
 800a692:	68ac      	ldr	r4, [r5, #8]
 800a694:	e7eb      	b.n	800a66e <__swsetup_r+0x22>
 800a696:	4b27      	ldr	r3, [pc, #156]	; (800a734 <__swsetup_r+0xe8>)
 800a698:	429c      	cmp	r4, r3
 800a69a:	d1e8      	bne.n	800a66e <__swsetup_r+0x22>
 800a69c:	68ec      	ldr	r4, [r5, #12]
 800a69e:	e7e6      	b.n	800a66e <__swsetup_r+0x22>
 800a6a0:	075b      	lsls	r3, r3, #29
 800a6a2:	d513      	bpl.n	800a6cc <__swsetup_r+0x80>
 800a6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6a6:	2900      	cmp	r1, #0
 800a6a8:	d008      	beq.n	800a6bc <__swsetup_r+0x70>
 800a6aa:	0023      	movs	r3, r4
 800a6ac:	3344      	adds	r3, #68	; 0x44
 800a6ae:	4299      	cmp	r1, r3
 800a6b0:	d002      	beq.n	800a6b8 <__swsetup_r+0x6c>
 800a6b2:	0030      	movs	r0, r6
 800a6b4:	f000 fa38 	bl	800ab28 <_free_r>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	6363      	str	r3, [r4, #52]	; 0x34
 800a6bc:	2224      	movs	r2, #36	; 0x24
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	4393      	bics	r3, r2
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6063      	str	r3, [r4, #4]
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	2308      	movs	r3, #8
 800a6ce:	89a2      	ldrh	r2, [r4, #12]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	81a3      	strh	r3, [r4, #12]
 800a6d4:	6923      	ldr	r3, [r4, #16]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10b      	bne.n	800a6f2 <__swsetup_r+0xa6>
 800a6da:	21a0      	movs	r1, #160	; 0xa0
 800a6dc:	2280      	movs	r2, #128	; 0x80
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	0089      	lsls	r1, r1, #2
 800a6e2:	0092      	lsls	r2, r2, #2
 800a6e4:	400b      	ands	r3, r1
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d003      	beq.n	800a6f2 <__swsetup_r+0xa6>
 800a6ea:	0021      	movs	r1, r4
 800a6ec:	0030      	movs	r0, r6
 800a6ee:	f000 f9d7 	bl	800aaa0 <__smakebuf_r>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	89a2      	ldrh	r2, [r4, #12]
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	d011      	beq.n	800a71e <__swsetup_r+0xd2>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60a3      	str	r3, [r4, #8]
 800a6fe:	6963      	ldr	r3, [r4, #20]
 800a700:	425b      	negs	r3, r3
 800a702:	61a3      	str	r3, [r4, #24]
 800a704:	2000      	movs	r0, #0
 800a706:	6923      	ldr	r3, [r4, #16]
 800a708:	4283      	cmp	r3, r0
 800a70a:	d1be      	bne.n	800a68a <__swsetup_r+0x3e>
 800a70c:	230c      	movs	r3, #12
 800a70e:	5ee2      	ldrsh	r2, [r4, r3]
 800a710:	0613      	lsls	r3, r2, #24
 800a712:	d5ba      	bpl.n	800a68a <__swsetup_r+0x3e>
 800a714:	2340      	movs	r3, #64	; 0x40
 800a716:	4313      	orrs	r3, r2
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	3801      	subs	r0, #1
 800a71c:	e7b5      	b.n	800a68a <__swsetup_r+0x3e>
 800a71e:	0792      	lsls	r2, r2, #30
 800a720:	d400      	bmi.n	800a724 <__swsetup_r+0xd8>
 800a722:	6963      	ldr	r3, [r4, #20]
 800a724:	60a3      	str	r3, [r4, #8]
 800a726:	e7ed      	b.n	800a704 <__swsetup_r+0xb8>
 800a728:	2000016c 	.word	0x2000016c
 800a72c:	0800becc 	.word	0x0800becc
 800a730:	0800beec 	.word	0x0800beec
 800a734:	0800beac 	.word	0x0800beac

0800a738 <__sflush_r>:
 800a738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a73a:	898a      	ldrh	r2, [r1, #12]
 800a73c:	0005      	movs	r5, r0
 800a73e:	000c      	movs	r4, r1
 800a740:	0713      	lsls	r3, r2, #28
 800a742:	d460      	bmi.n	800a806 <__sflush_r+0xce>
 800a744:	684b      	ldr	r3, [r1, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	dc04      	bgt.n	800a754 <__sflush_r+0x1c>
 800a74a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	dc01      	bgt.n	800a754 <__sflush_r+0x1c>
 800a750:	2000      	movs	r0, #0
 800a752:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a754:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a756:	2f00      	cmp	r7, #0
 800a758:	d0fa      	beq.n	800a750 <__sflush_r+0x18>
 800a75a:	2300      	movs	r3, #0
 800a75c:	682e      	ldr	r6, [r5, #0]
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	2380      	movs	r3, #128	; 0x80
 800a762:	015b      	lsls	r3, r3, #5
 800a764:	6a21      	ldr	r1, [r4, #32]
 800a766:	401a      	ands	r2, r3
 800a768:	d034      	beq.n	800a7d4 <__sflush_r+0x9c>
 800a76a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	075b      	lsls	r3, r3, #29
 800a770:	d506      	bpl.n	800a780 <__sflush_r+0x48>
 800a772:	6863      	ldr	r3, [r4, #4]
 800a774:	1ac0      	subs	r0, r0, r3
 800a776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <__sflush_r+0x48>
 800a77c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a77e:	1ac0      	subs	r0, r0, r3
 800a780:	0002      	movs	r2, r0
 800a782:	6a21      	ldr	r1, [r4, #32]
 800a784:	2300      	movs	r3, #0
 800a786:	0028      	movs	r0, r5
 800a788:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a78a:	47b8      	blx	r7
 800a78c:	89a1      	ldrh	r1, [r4, #12]
 800a78e:	1c43      	adds	r3, r0, #1
 800a790:	d106      	bne.n	800a7a0 <__sflush_r+0x68>
 800a792:	682b      	ldr	r3, [r5, #0]
 800a794:	2b1d      	cmp	r3, #29
 800a796:	d830      	bhi.n	800a7fa <__sflush_r+0xc2>
 800a798:	4a2b      	ldr	r2, [pc, #172]	; (800a848 <__sflush_r+0x110>)
 800a79a:	40da      	lsrs	r2, r3
 800a79c:	07d3      	lsls	r3, r2, #31
 800a79e:	d52c      	bpl.n	800a7fa <__sflush_r+0xc2>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	6063      	str	r3, [r4, #4]
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	6023      	str	r3, [r4, #0]
 800a7a8:	04cb      	lsls	r3, r1, #19
 800a7aa:	d505      	bpl.n	800a7b8 <__sflush_r+0x80>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <__sflush_r+0x7e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d100      	bne.n	800a7b8 <__sflush_r+0x80>
 800a7b6:	6560      	str	r0, [r4, #84]	; 0x54
 800a7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ba:	602e      	str	r6, [r5, #0]
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	d0c7      	beq.n	800a750 <__sflush_r+0x18>
 800a7c0:	0023      	movs	r3, r4
 800a7c2:	3344      	adds	r3, #68	; 0x44
 800a7c4:	4299      	cmp	r1, r3
 800a7c6:	d002      	beq.n	800a7ce <__sflush_r+0x96>
 800a7c8:	0028      	movs	r0, r5
 800a7ca:	f000 f9ad 	bl	800ab28 <_free_r>
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	6360      	str	r0, [r4, #52]	; 0x34
 800a7d2:	e7be      	b.n	800a752 <__sflush_r+0x1a>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	0028      	movs	r0, r5
 800a7d8:	47b8      	blx	r7
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	d1c6      	bne.n	800a76c <__sflush_r+0x34>
 800a7de:	682b      	ldr	r3, [r5, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d0c3      	beq.n	800a76c <__sflush_r+0x34>
 800a7e4:	2b1d      	cmp	r3, #29
 800a7e6:	d001      	beq.n	800a7ec <__sflush_r+0xb4>
 800a7e8:	2b16      	cmp	r3, #22
 800a7ea:	d101      	bne.n	800a7f0 <__sflush_r+0xb8>
 800a7ec:	602e      	str	r6, [r5, #0]
 800a7ee:	e7af      	b.n	800a750 <__sflush_r+0x18>
 800a7f0:	2340      	movs	r3, #64	; 0x40
 800a7f2:	89a2      	ldrh	r2, [r4, #12]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	e7ab      	b.n	800a752 <__sflush_r+0x1a>
 800a7fa:	2340      	movs	r3, #64	; 0x40
 800a7fc:	430b      	orrs	r3, r1
 800a7fe:	2001      	movs	r0, #1
 800a800:	81a3      	strh	r3, [r4, #12]
 800a802:	4240      	negs	r0, r0
 800a804:	e7a5      	b.n	800a752 <__sflush_r+0x1a>
 800a806:	690f      	ldr	r7, [r1, #16]
 800a808:	2f00      	cmp	r7, #0
 800a80a:	d0a1      	beq.n	800a750 <__sflush_r+0x18>
 800a80c:	680b      	ldr	r3, [r1, #0]
 800a80e:	600f      	str	r7, [r1, #0]
 800a810:	1bdb      	subs	r3, r3, r7
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	2300      	movs	r3, #0
 800a816:	0792      	lsls	r2, r2, #30
 800a818:	d100      	bne.n	800a81c <__sflush_r+0xe4>
 800a81a:	694b      	ldr	r3, [r1, #20]
 800a81c:	60a3      	str	r3, [r4, #8]
 800a81e:	9b01      	ldr	r3, [sp, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	dc00      	bgt.n	800a826 <__sflush_r+0xee>
 800a824:	e794      	b.n	800a750 <__sflush_r+0x18>
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	003a      	movs	r2, r7
 800a82a:	6a21      	ldr	r1, [r4, #32]
 800a82c:	0028      	movs	r0, r5
 800a82e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a830:	47b0      	blx	r6
 800a832:	2800      	cmp	r0, #0
 800a834:	dc03      	bgt.n	800a83e <__sflush_r+0x106>
 800a836:	2340      	movs	r3, #64	; 0x40
 800a838:	89a2      	ldrh	r2, [r4, #12]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	e7df      	b.n	800a7fe <__sflush_r+0xc6>
 800a83e:	9b01      	ldr	r3, [sp, #4]
 800a840:	183f      	adds	r7, r7, r0
 800a842:	1a1b      	subs	r3, r3, r0
 800a844:	9301      	str	r3, [sp, #4]
 800a846:	e7ea      	b.n	800a81e <__sflush_r+0xe6>
 800a848:	20400001 	.word	0x20400001

0800a84c <_fflush_r>:
 800a84c:	690b      	ldr	r3, [r1, #16]
 800a84e:	b570      	push	{r4, r5, r6, lr}
 800a850:	0005      	movs	r5, r0
 800a852:	000c      	movs	r4, r1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <_fflush_r+0x10>
 800a858:	2000      	movs	r0, #0
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d004      	beq.n	800a86a <_fflush_r+0x1e>
 800a860:	6983      	ldr	r3, [r0, #24]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <_fflush_r+0x1e>
 800a866:	f000 f85f 	bl	800a928 <__sinit>
 800a86a:	4b0b      	ldr	r3, [pc, #44]	; (800a898 <_fflush_r+0x4c>)
 800a86c:	429c      	cmp	r4, r3
 800a86e:	d109      	bne.n	800a884 <_fflush_r+0x38>
 800a870:	686c      	ldr	r4, [r5, #4]
 800a872:	220c      	movs	r2, #12
 800a874:	5ea3      	ldrsh	r3, [r4, r2]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d0ee      	beq.n	800a858 <_fflush_r+0xc>
 800a87a:	0021      	movs	r1, r4
 800a87c:	0028      	movs	r0, r5
 800a87e:	f7ff ff5b 	bl	800a738 <__sflush_r>
 800a882:	e7ea      	b.n	800a85a <_fflush_r+0xe>
 800a884:	4b05      	ldr	r3, [pc, #20]	; (800a89c <_fflush_r+0x50>)
 800a886:	429c      	cmp	r4, r3
 800a888:	d101      	bne.n	800a88e <_fflush_r+0x42>
 800a88a:	68ac      	ldr	r4, [r5, #8]
 800a88c:	e7f1      	b.n	800a872 <_fflush_r+0x26>
 800a88e:	4b04      	ldr	r3, [pc, #16]	; (800a8a0 <_fflush_r+0x54>)
 800a890:	429c      	cmp	r4, r3
 800a892:	d1ee      	bne.n	800a872 <_fflush_r+0x26>
 800a894:	68ec      	ldr	r4, [r5, #12]
 800a896:	e7ec      	b.n	800a872 <_fflush_r+0x26>
 800a898:	0800becc 	.word	0x0800becc
 800a89c:	0800beec 	.word	0x0800beec
 800a8a0:	0800beac 	.word	0x0800beac

0800a8a4 <std>:
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	b510      	push	{r4, lr}
 800a8a8:	0004      	movs	r4, r0
 800a8aa:	6003      	str	r3, [r0, #0]
 800a8ac:	6043      	str	r3, [r0, #4]
 800a8ae:	6083      	str	r3, [r0, #8]
 800a8b0:	8181      	strh	r1, [r0, #12]
 800a8b2:	6643      	str	r3, [r0, #100]	; 0x64
 800a8b4:	81c2      	strh	r2, [r0, #14]
 800a8b6:	6103      	str	r3, [r0, #16]
 800a8b8:	6143      	str	r3, [r0, #20]
 800a8ba:	6183      	str	r3, [r0, #24]
 800a8bc:	0019      	movs	r1, r3
 800a8be:	2208      	movs	r2, #8
 800a8c0:	305c      	adds	r0, #92	; 0x5c
 800a8c2:	f7ff fde1 	bl	800a488 <memset>
 800a8c6:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <std+0x38>)
 800a8c8:	6224      	str	r4, [r4, #32]
 800a8ca:	6263      	str	r3, [r4, #36]	; 0x24
 800a8cc:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <std+0x3c>)
 800a8ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8d0:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <std+0x40>)
 800a8d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8d4:	4b04      	ldr	r3, [pc, #16]	; (800a8e8 <std+0x44>)
 800a8d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	46c0      	nop			; (mov r8, r8)
 800a8dc:	0800b205 	.word	0x0800b205
 800a8e0:	0800b22d 	.word	0x0800b22d
 800a8e4:	0800b265 	.word	0x0800b265
 800a8e8:	0800b291 	.word	0x0800b291

0800a8ec <_cleanup_r>:
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	4902      	ldr	r1, [pc, #8]	; (800a8f8 <_cleanup_r+0xc>)
 800a8f0:	f000 f88c 	bl	800aa0c <_fwalk_reent>
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	46c0      	nop			; (mov r8, r8)
 800a8f8:	0800a84d 	.word	0x0800a84d

0800a8fc <__sfmoreglue>:
 800a8fc:	b570      	push	{r4, r5, r6, lr}
 800a8fe:	2568      	movs	r5, #104	; 0x68
 800a900:	1e4a      	subs	r2, r1, #1
 800a902:	4355      	muls	r5, r2
 800a904:	000e      	movs	r6, r1
 800a906:	0029      	movs	r1, r5
 800a908:	3174      	adds	r1, #116	; 0x74
 800a90a:	f000 f957 	bl	800abbc <_malloc_r>
 800a90e:	1e04      	subs	r4, r0, #0
 800a910:	d008      	beq.n	800a924 <__sfmoreglue+0x28>
 800a912:	2100      	movs	r1, #0
 800a914:	002a      	movs	r2, r5
 800a916:	6001      	str	r1, [r0, #0]
 800a918:	6046      	str	r6, [r0, #4]
 800a91a:	300c      	adds	r0, #12
 800a91c:	60a0      	str	r0, [r4, #8]
 800a91e:	3268      	adds	r2, #104	; 0x68
 800a920:	f7ff fdb2 	bl	800a488 <memset>
 800a924:	0020      	movs	r0, r4
 800a926:	bd70      	pop	{r4, r5, r6, pc}

0800a928 <__sinit>:
 800a928:	6983      	ldr	r3, [r0, #24]
 800a92a:	b513      	push	{r0, r1, r4, lr}
 800a92c:	0004      	movs	r4, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d128      	bne.n	800a984 <__sinit+0x5c>
 800a932:	6483      	str	r3, [r0, #72]	; 0x48
 800a934:	64c3      	str	r3, [r0, #76]	; 0x4c
 800a936:	6503      	str	r3, [r0, #80]	; 0x50
 800a938:	4b13      	ldr	r3, [pc, #76]	; (800a988 <__sinit+0x60>)
 800a93a:	4a14      	ldr	r2, [pc, #80]	; (800a98c <__sinit+0x64>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6282      	str	r2, [r0, #40]	; 0x28
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	4298      	cmp	r0, r3
 800a944:	d101      	bne.n	800a94a <__sinit+0x22>
 800a946:	2301      	movs	r3, #1
 800a948:	6183      	str	r3, [r0, #24]
 800a94a:	0020      	movs	r0, r4
 800a94c:	f000 f820 	bl	800a990 <__sfp>
 800a950:	6060      	str	r0, [r4, #4]
 800a952:	0020      	movs	r0, r4
 800a954:	f000 f81c 	bl	800a990 <__sfp>
 800a958:	60a0      	str	r0, [r4, #8]
 800a95a:	0020      	movs	r0, r4
 800a95c:	f000 f818 	bl	800a990 <__sfp>
 800a960:	2200      	movs	r2, #0
 800a962:	60e0      	str	r0, [r4, #12]
 800a964:	2104      	movs	r1, #4
 800a966:	6860      	ldr	r0, [r4, #4]
 800a968:	f7ff ff9c 	bl	800a8a4 <std>
 800a96c:	2201      	movs	r2, #1
 800a96e:	2109      	movs	r1, #9
 800a970:	68a0      	ldr	r0, [r4, #8]
 800a972:	f7ff ff97 	bl	800a8a4 <std>
 800a976:	2202      	movs	r2, #2
 800a978:	2112      	movs	r1, #18
 800a97a:	68e0      	ldr	r0, [r4, #12]
 800a97c:	f7ff ff92 	bl	800a8a4 <std>
 800a980:	2301      	movs	r3, #1
 800a982:	61a3      	str	r3, [r4, #24]
 800a984:	bd13      	pop	{r0, r1, r4, pc}
 800a986:	46c0      	nop			; (mov r8, r8)
 800a988:	0800bea8 	.word	0x0800bea8
 800a98c:	0800a8ed 	.word	0x0800a8ed

0800a990 <__sfp>:
 800a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a992:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <__sfp+0x74>)
 800a994:	0007      	movs	r7, r0
 800a996:	681e      	ldr	r6, [r3, #0]
 800a998:	69b3      	ldr	r3, [r6, #24]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d102      	bne.n	800a9a4 <__sfp+0x14>
 800a99e:	0030      	movs	r0, r6
 800a9a0:	f7ff ffc2 	bl	800a928 <__sinit>
 800a9a4:	3648      	adds	r6, #72	; 0x48
 800a9a6:	68b4      	ldr	r4, [r6, #8]
 800a9a8:	6873      	ldr	r3, [r6, #4]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	d504      	bpl.n	800a9b8 <__sfp+0x28>
 800a9ae:	6833      	ldr	r3, [r6, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d007      	beq.n	800a9c4 <__sfp+0x34>
 800a9b4:	6836      	ldr	r6, [r6, #0]
 800a9b6:	e7f6      	b.n	800a9a6 <__sfp+0x16>
 800a9b8:	220c      	movs	r2, #12
 800a9ba:	5ea5      	ldrsh	r5, [r4, r2]
 800a9bc:	2d00      	cmp	r5, #0
 800a9be:	d00d      	beq.n	800a9dc <__sfp+0x4c>
 800a9c0:	3468      	adds	r4, #104	; 0x68
 800a9c2:	e7f2      	b.n	800a9aa <__sfp+0x1a>
 800a9c4:	2104      	movs	r1, #4
 800a9c6:	0038      	movs	r0, r7
 800a9c8:	f7ff ff98 	bl	800a8fc <__sfmoreglue>
 800a9cc:	6030      	str	r0, [r6, #0]
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d1f0      	bne.n	800a9b4 <__sfp+0x24>
 800a9d2:	230c      	movs	r3, #12
 800a9d4:	0004      	movs	r4, r0
 800a9d6:	603b      	str	r3, [r7, #0]
 800a9d8:	0020      	movs	r0, r4
 800a9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9dc:	0020      	movs	r0, r4
 800a9de:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <__sfp+0x78>)
 800a9e0:	6665      	str	r5, [r4, #100]	; 0x64
 800a9e2:	6025      	str	r5, [r4, #0]
 800a9e4:	6065      	str	r5, [r4, #4]
 800a9e6:	60a5      	str	r5, [r4, #8]
 800a9e8:	60e3      	str	r3, [r4, #12]
 800a9ea:	6125      	str	r5, [r4, #16]
 800a9ec:	6165      	str	r5, [r4, #20]
 800a9ee:	61a5      	str	r5, [r4, #24]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	0029      	movs	r1, r5
 800a9f4:	305c      	adds	r0, #92	; 0x5c
 800a9f6:	f7ff fd47 	bl	800a488 <memset>
 800a9fa:	6365      	str	r5, [r4, #52]	; 0x34
 800a9fc:	63a5      	str	r5, [r4, #56]	; 0x38
 800a9fe:	64a5      	str	r5, [r4, #72]	; 0x48
 800aa00:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aa02:	e7e9      	b.n	800a9d8 <__sfp+0x48>
 800aa04:	0800bea8 	.word	0x0800bea8
 800aa08:	ffff0001 	.word	0xffff0001

0800aa0c <_fwalk_reent>:
 800aa0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa0e:	0004      	movs	r4, r0
 800aa10:	0007      	movs	r7, r0
 800aa12:	2600      	movs	r6, #0
 800aa14:	9101      	str	r1, [sp, #4]
 800aa16:	3448      	adds	r4, #72	; 0x48
 800aa18:	2c00      	cmp	r4, #0
 800aa1a:	d101      	bne.n	800aa20 <_fwalk_reent+0x14>
 800aa1c:	0030      	movs	r0, r6
 800aa1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa20:	6863      	ldr	r3, [r4, #4]
 800aa22:	68a5      	ldr	r5, [r4, #8]
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	9b00      	ldr	r3, [sp, #0]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	d501      	bpl.n	800aa32 <_fwalk_reent+0x26>
 800aa2e:	6824      	ldr	r4, [r4, #0]
 800aa30:	e7f2      	b.n	800aa18 <_fwalk_reent+0xc>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d908      	bls.n	800aa4a <_fwalk_reent+0x3e>
 800aa38:	220e      	movs	r2, #14
 800aa3a:	5eab      	ldrsh	r3, [r5, r2]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	d004      	beq.n	800aa4a <_fwalk_reent+0x3e>
 800aa40:	0029      	movs	r1, r5
 800aa42:	0038      	movs	r0, r7
 800aa44:	9b01      	ldr	r3, [sp, #4]
 800aa46:	4798      	blx	r3
 800aa48:	4306      	orrs	r6, r0
 800aa4a:	3568      	adds	r5, #104	; 0x68
 800aa4c:	e7eb      	b.n	800aa26 <_fwalk_reent+0x1a>
	...

0800aa50 <__swhatbuf_r>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	000e      	movs	r6, r1
 800aa54:	001d      	movs	r5, r3
 800aa56:	230e      	movs	r3, #14
 800aa58:	5ec9      	ldrsh	r1, [r1, r3]
 800aa5a:	b096      	sub	sp, #88	; 0x58
 800aa5c:	0014      	movs	r4, r2
 800aa5e:	2900      	cmp	r1, #0
 800aa60:	da07      	bge.n	800aa72 <__swhatbuf_r+0x22>
 800aa62:	2300      	movs	r3, #0
 800aa64:	602b      	str	r3, [r5, #0]
 800aa66:	89b3      	ldrh	r3, [r6, #12]
 800aa68:	061b      	lsls	r3, r3, #24
 800aa6a:	d411      	bmi.n	800aa90 <__swhatbuf_r+0x40>
 800aa6c:	2380      	movs	r3, #128	; 0x80
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	e00f      	b.n	800aa92 <__swhatbuf_r+0x42>
 800aa72:	466a      	mov	r2, sp
 800aa74:	f000 fc38 	bl	800b2e8 <_fstat_r>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	dbf2      	blt.n	800aa62 <__swhatbuf_r+0x12>
 800aa7c:	22f0      	movs	r2, #240	; 0xf0
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	0212      	lsls	r2, r2, #8
 800aa82:	4013      	ands	r3, r2
 800aa84:	4a05      	ldr	r2, [pc, #20]	; (800aa9c <__swhatbuf_r+0x4c>)
 800aa86:	189b      	adds	r3, r3, r2
 800aa88:	425a      	negs	r2, r3
 800aa8a:	4153      	adcs	r3, r2
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	e7ed      	b.n	800aa6c <__swhatbuf_r+0x1c>
 800aa90:	2340      	movs	r3, #64	; 0x40
 800aa92:	2000      	movs	r0, #0
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	b016      	add	sp, #88	; 0x58
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	ffffe000 	.word	0xffffe000

0800aaa0 <__smakebuf_r>:
 800aaa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaa2:	2602      	movs	r6, #2
 800aaa4:	898b      	ldrh	r3, [r1, #12]
 800aaa6:	0005      	movs	r5, r0
 800aaa8:	000c      	movs	r4, r1
 800aaaa:	4233      	tst	r3, r6
 800aaac:	d006      	beq.n	800aabc <__smakebuf_r+0x1c>
 800aaae:	0023      	movs	r3, r4
 800aab0:	3347      	adds	r3, #71	; 0x47
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	2301      	movs	r3, #1
 800aab8:	6163      	str	r3, [r4, #20]
 800aaba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aabc:	ab01      	add	r3, sp, #4
 800aabe:	466a      	mov	r2, sp
 800aac0:	f7ff ffc6 	bl	800aa50 <__swhatbuf_r>
 800aac4:	9900      	ldr	r1, [sp, #0]
 800aac6:	0007      	movs	r7, r0
 800aac8:	0028      	movs	r0, r5
 800aaca:	f000 f877 	bl	800abbc <_malloc_r>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d108      	bne.n	800aae4 <__smakebuf_r+0x44>
 800aad2:	220c      	movs	r2, #12
 800aad4:	5ea3      	ldrsh	r3, [r4, r2]
 800aad6:	059a      	lsls	r2, r3, #22
 800aad8:	d4ef      	bmi.n	800aaba <__smakebuf_r+0x1a>
 800aada:	2203      	movs	r2, #3
 800aadc:	4393      	bics	r3, r2
 800aade:	431e      	orrs	r6, r3
 800aae0:	81a6      	strh	r6, [r4, #12]
 800aae2:	e7e4      	b.n	800aaae <__smakebuf_r+0xe>
 800aae4:	4b0f      	ldr	r3, [pc, #60]	; (800ab24 <__smakebuf_r+0x84>)
 800aae6:	62ab      	str	r3, [r5, #40]	; 0x28
 800aae8:	2380      	movs	r3, #128	; 0x80
 800aaea:	89a2      	ldrh	r2, [r4, #12]
 800aaec:	6020      	str	r0, [r4, #0]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	81a3      	strh	r3, [r4, #12]
 800aaf2:	9b00      	ldr	r3, [sp, #0]
 800aaf4:	6120      	str	r0, [r4, #16]
 800aaf6:	6163      	str	r3, [r4, #20]
 800aaf8:	9b01      	ldr	r3, [sp, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00d      	beq.n	800ab1a <__smakebuf_r+0x7a>
 800aafe:	230e      	movs	r3, #14
 800ab00:	5ee1      	ldrsh	r1, [r4, r3]
 800ab02:	0028      	movs	r0, r5
 800ab04:	f000 fc02 	bl	800b30c <_isatty_r>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d006      	beq.n	800ab1a <__smakebuf_r+0x7a>
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	4393      	bics	r3, r2
 800ab12:	001a      	movs	r2, r3
 800ab14:	2301      	movs	r3, #1
 800ab16:	4313      	orrs	r3, r2
 800ab18:	81a3      	strh	r3, [r4, #12]
 800ab1a:	89a0      	ldrh	r0, [r4, #12]
 800ab1c:	4338      	orrs	r0, r7
 800ab1e:	81a0      	strh	r0, [r4, #12]
 800ab20:	e7cb      	b.n	800aaba <__smakebuf_r+0x1a>
 800ab22:	46c0      	nop			; (mov r8, r8)
 800ab24:	0800a8ed 	.word	0x0800a8ed

0800ab28 <_free_r>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	0005      	movs	r5, r0
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d010      	beq.n	800ab52 <_free_r+0x2a>
 800ab30:	1f0c      	subs	r4, r1, #4
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	da00      	bge.n	800ab3a <_free_r+0x12>
 800ab38:	18e4      	adds	r4, r4, r3
 800ab3a:	0028      	movs	r0, r5
 800ab3c:	f000 fc17 	bl	800b36e <__malloc_lock>
 800ab40:	4a1d      	ldr	r2, [pc, #116]	; (800abb8 <_free_r+0x90>)
 800ab42:	6813      	ldr	r3, [r2, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d105      	bne.n	800ab54 <_free_r+0x2c>
 800ab48:	6063      	str	r3, [r4, #4]
 800ab4a:	6014      	str	r4, [r2, #0]
 800ab4c:	0028      	movs	r0, r5
 800ab4e:	f000 fc0f 	bl	800b370 <__malloc_unlock>
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	d909      	bls.n	800ab6c <_free_r+0x44>
 800ab58:	6821      	ldr	r1, [r4, #0]
 800ab5a:	1860      	adds	r0, r4, r1
 800ab5c:	4283      	cmp	r3, r0
 800ab5e:	d1f3      	bne.n	800ab48 <_free_r+0x20>
 800ab60:	6818      	ldr	r0, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	1841      	adds	r1, r0, r1
 800ab66:	6021      	str	r1, [r4, #0]
 800ab68:	e7ee      	b.n	800ab48 <_free_r+0x20>
 800ab6a:	0013      	movs	r3, r2
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	2a00      	cmp	r2, #0
 800ab70:	d001      	beq.n	800ab76 <_free_r+0x4e>
 800ab72:	42a2      	cmp	r2, r4
 800ab74:	d9f9      	bls.n	800ab6a <_free_r+0x42>
 800ab76:	6819      	ldr	r1, [r3, #0]
 800ab78:	1858      	adds	r0, r3, r1
 800ab7a:	42a0      	cmp	r0, r4
 800ab7c:	d10b      	bne.n	800ab96 <_free_r+0x6e>
 800ab7e:	6820      	ldr	r0, [r4, #0]
 800ab80:	1809      	adds	r1, r1, r0
 800ab82:	1858      	adds	r0, r3, r1
 800ab84:	6019      	str	r1, [r3, #0]
 800ab86:	4282      	cmp	r2, r0
 800ab88:	d1e0      	bne.n	800ab4c <_free_r+0x24>
 800ab8a:	6810      	ldr	r0, [r2, #0]
 800ab8c:	6852      	ldr	r2, [r2, #4]
 800ab8e:	1841      	adds	r1, r0, r1
 800ab90:	6019      	str	r1, [r3, #0]
 800ab92:	605a      	str	r2, [r3, #4]
 800ab94:	e7da      	b.n	800ab4c <_free_r+0x24>
 800ab96:	42a0      	cmp	r0, r4
 800ab98:	d902      	bls.n	800aba0 <_free_r+0x78>
 800ab9a:	230c      	movs	r3, #12
 800ab9c:	602b      	str	r3, [r5, #0]
 800ab9e:	e7d5      	b.n	800ab4c <_free_r+0x24>
 800aba0:	6821      	ldr	r1, [r4, #0]
 800aba2:	1860      	adds	r0, r4, r1
 800aba4:	4282      	cmp	r2, r0
 800aba6:	d103      	bne.n	800abb0 <_free_r+0x88>
 800aba8:	6810      	ldr	r0, [r2, #0]
 800abaa:	6852      	ldr	r2, [r2, #4]
 800abac:	1841      	adds	r1, r0, r1
 800abae:	6021      	str	r1, [r4, #0]
 800abb0:	6062      	str	r2, [r4, #4]
 800abb2:	605c      	str	r4, [r3, #4]
 800abb4:	e7ca      	b.n	800ab4c <_free_r+0x24>
 800abb6:	46c0      	nop			; (mov r8, r8)
 800abb8:	20000464 	.word	0x20000464

0800abbc <_malloc_r>:
 800abbc:	2303      	movs	r3, #3
 800abbe:	b570      	push	{r4, r5, r6, lr}
 800abc0:	1ccd      	adds	r5, r1, #3
 800abc2:	439d      	bics	r5, r3
 800abc4:	3508      	adds	r5, #8
 800abc6:	0006      	movs	r6, r0
 800abc8:	2d0c      	cmp	r5, #12
 800abca:	d21e      	bcs.n	800ac0a <_malloc_r+0x4e>
 800abcc:	250c      	movs	r5, #12
 800abce:	42a9      	cmp	r1, r5
 800abd0:	d81d      	bhi.n	800ac0e <_malloc_r+0x52>
 800abd2:	0030      	movs	r0, r6
 800abd4:	f000 fbcb 	bl	800b36e <__malloc_lock>
 800abd8:	4a25      	ldr	r2, [pc, #148]	; (800ac70 <_malloc_r+0xb4>)
 800abda:	6814      	ldr	r4, [r2, #0]
 800abdc:	0021      	movs	r1, r4
 800abde:	2900      	cmp	r1, #0
 800abe0:	d119      	bne.n	800ac16 <_malloc_r+0x5a>
 800abe2:	4c24      	ldr	r4, [pc, #144]	; (800ac74 <_malloc_r+0xb8>)
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d103      	bne.n	800abf2 <_malloc_r+0x36>
 800abea:	0030      	movs	r0, r6
 800abec:	f000 faf8 	bl	800b1e0 <_sbrk_r>
 800abf0:	6020      	str	r0, [r4, #0]
 800abf2:	0029      	movs	r1, r5
 800abf4:	0030      	movs	r0, r6
 800abf6:	f000 faf3 	bl	800b1e0 <_sbrk_r>
 800abfa:	1c43      	adds	r3, r0, #1
 800abfc:	d12b      	bne.n	800ac56 <_malloc_r+0x9a>
 800abfe:	230c      	movs	r3, #12
 800ac00:	0030      	movs	r0, r6
 800ac02:	6033      	str	r3, [r6, #0]
 800ac04:	f000 fbb4 	bl	800b370 <__malloc_unlock>
 800ac08:	e003      	b.n	800ac12 <_malloc_r+0x56>
 800ac0a:	2d00      	cmp	r5, #0
 800ac0c:	dadf      	bge.n	800abce <_malloc_r+0x12>
 800ac0e:	230c      	movs	r3, #12
 800ac10:	6033      	str	r3, [r6, #0]
 800ac12:	2000      	movs	r0, #0
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	680b      	ldr	r3, [r1, #0]
 800ac18:	1b5b      	subs	r3, r3, r5
 800ac1a:	d419      	bmi.n	800ac50 <_malloc_r+0x94>
 800ac1c:	2b0b      	cmp	r3, #11
 800ac1e:	d903      	bls.n	800ac28 <_malloc_r+0x6c>
 800ac20:	600b      	str	r3, [r1, #0]
 800ac22:	18cc      	adds	r4, r1, r3
 800ac24:	6025      	str	r5, [r4, #0]
 800ac26:	e003      	b.n	800ac30 <_malloc_r+0x74>
 800ac28:	684b      	ldr	r3, [r1, #4]
 800ac2a:	428c      	cmp	r4, r1
 800ac2c:	d10d      	bne.n	800ac4a <_malloc_r+0x8e>
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	0030      	movs	r0, r6
 800ac32:	f000 fb9d 	bl	800b370 <__malloc_unlock>
 800ac36:	0020      	movs	r0, r4
 800ac38:	2207      	movs	r2, #7
 800ac3a:	300b      	adds	r0, #11
 800ac3c:	1d23      	adds	r3, r4, #4
 800ac3e:	4390      	bics	r0, r2
 800ac40:	1ac3      	subs	r3, r0, r3
 800ac42:	d0e7      	beq.n	800ac14 <_malloc_r+0x58>
 800ac44:	425a      	negs	r2, r3
 800ac46:	50e2      	str	r2, [r4, r3]
 800ac48:	e7e4      	b.n	800ac14 <_malloc_r+0x58>
 800ac4a:	6063      	str	r3, [r4, #4]
 800ac4c:	000c      	movs	r4, r1
 800ac4e:	e7ef      	b.n	800ac30 <_malloc_r+0x74>
 800ac50:	000c      	movs	r4, r1
 800ac52:	6849      	ldr	r1, [r1, #4]
 800ac54:	e7c3      	b.n	800abde <_malloc_r+0x22>
 800ac56:	2303      	movs	r3, #3
 800ac58:	1cc4      	adds	r4, r0, #3
 800ac5a:	439c      	bics	r4, r3
 800ac5c:	42a0      	cmp	r0, r4
 800ac5e:	d0e1      	beq.n	800ac24 <_malloc_r+0x68>
 800ac60:	1a21      	subs	r1, r4, r0
 800ac62:	0030      	movs	r0, r6
 800ac64:	f000 fabc 	bl	800b1e0 <_sbrk_r>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d1db      	bne.n	800ac24 <_malloc_r+0x68>
 800ac6c:	e7c7      	b.n	800abfe <_malloc_r+0x42>
 800ac6e:	46c0      	nop			; (mov r8, r8)
 800ac70:	20000464 	.word	0x20000464
 800ac74:	20000468 	.word	0x20000468

0800ac78 <__sfputc_r>:
 800ac78:	6893      	ldr	r3, [r2, #8]
 800ac7a:	b510      	push	{r4, lr}
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	6093      	str	r3, [r2, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	da04      	bge.n	800ac8e <__sfputc_r+0x16>
 800ac84:	6994      	ldr	r4, [r2, #24]
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	db07      	blt.n	800ac9a <__sfputc_r+0x22>
 800ac8a:	290a      	cmp	r1, #10
 800ac8c:	d005      	beq.n	800ac9a <__sfputc_r+0x22>
 800ac8e:	6813      	ldr	r3, [r2, #0]
 800ac90:	1c58      	adds	r0, r3, #1
 800ac92:	6010      	str	r0, [r2, #0]
 800ac94:	7019      	strb	r1, [r3, #0]
 800ac96:	0008      	movs	r0, r1
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	f7ff fc81 	bl	800a5a0 <__swbuf_r>
 800ac9e:	0001      	movs	r1, r0
 800aca0:	e7f9      	b.n	800ac96 <__sfputc_r+0x1e>

0800aca2 <__sfputs_r>:
 800aca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca4:	0006      	movs	r6, r0
 800aca6:	000f      	movs	r7, r1
 800aca8:	0014      	movs	r4, r2
 800acaa:	18d5      	adds	r5, r2, r3
 800acac:	42ac      	cmp	r4, r5
 800acae:	d101      	bne.n	800acb4 <__sfputs_r+0x12>
 800acb0:	2000      	movs	r0, #0
 800acb2:	e007      	b.n	800acc4 <__sfputs_r+0x22>
 800acb4:	7821      	ldrb	r1, [r4, #0]
 800acb6:	003a      	movs	r2, r7
 800acb8:	0030      	movs	r0, r6
 800acba:	f7ff ffdd 	bl	800ac78 <__sfputc_r>
 800acbe:	3401      	adds	r4, #1
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d1f3      	bne.n	800acac <__sfputs_r+0xa>
 800acc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acc8 <_vfiprintf_r>:
 800acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acca:	b0a1      	sub	sp, #132	; 0x84
 800accc:	9003      	str	r0, [sp, #12]
 800acce:	000f      	movs	r7, r1
 800acd0:	0016      	movs	r6, r2
 800acd2:	001d      	movs	r5, r3
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d005      	beq.n	800ace4 <_vfiprintf_r+0x1c>
 800acd8:	6983      	ldr	r3, [r0, #24]
 800acda:	9305      	str	r3, [sp, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <_vfiprintf_r+0x1c>
 800ace0:	f7ff fe22 	bl	800a928 <__sinit>
 800ace4:	4b7b      	ldr	r3, [pc, #492]	; (800aed4 <_vfiprintf_r+0x20c>)
 800ace6:	429f      	cmp	r7, r3
 800ace8:	d15c      	bne.n	800ada4 <_vfiprintf_r+0xdc>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	685f      	ldr	r7, [r3, #4]
 800acee:	89bb      	ldrh	r3, [r7, #12]
 800acf0:	071b      	lsls	r3, r3, #28
 800acf2:	d563      	bpl.n	800adbc <_vfiprintf_r+0xf4>
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d060      	beq.n	800adbc <_vfiprintf_r+0xf4>
 800acfa:	2300      	movs	r3, #0
 800acfc:	ac08      	add	r4, sp, #32
 800acfe:	6163      	str	r3, [r4, #20]
 800ad00:	3320      	adds	r3, #32
 800ad02:	7663      	strb	r3, [r4, #25]
 800ad04:	3310      	adds	r3, #16
 800ad06:	76a3      	strb	r3, [r4, #26]
 800ad08:	9507      	str	r5, [sp, #28]
 800ad0a:	0035      	movs	r5, r6
 800ad0c:	782b      	ldrb	r3, [r5, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <_vfiprintf_r+0x4e>
 800ad12:	2b25      	cmp	r3, #37	; 0x25
 800ad14:	d15c      	bne.n	800add0 <_vfiprintf_r+0x108>
 800ad16:	1bab      	subs	r3, r5, r6
 800ad18:	9305      	str	r3, [sp, #20]
 800ad1a:	d00c      	beq.n	800ad36 <_vfiprintf_r+0x6e>
 800ad1c:	0032      	movs	r2, r6
 800ad1e:	0039      	movs	r1, r7
 800ad20:	9803      	ldr	r0, [sp, #12]
 800ad22:	f7ff ffbe 	bl	800aca2 <__sfputs_r>
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	d100      	bne.n	800ad2c <_vfiprintf_r+0x64>
 800ad2a:	e0c4      	b.n	800aeb6 <_vfiprintf_r+0x1ee>
 800ad2c:	6962      	ldr	r2, [r4, #20]
 800ad2e:	9b05      	ldr	r3, [sp, #20]
 800ad30:	4694      	mov	ip, r2
 800ad32:	4463      	add	r3, ip
 800ad34:	6163      	str	r3, [r4, #20]
 800ad36:	782b      	ldrb	r3, [r5, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d100      	bne.n	800ad3e <_vfiprintf_r+0x76>
 800ad3c:	e0bb      	b.n	800aeb6 <_vfiprintf_r+0x1ee>
 800ad3e:	2201      	movs	r2, #1
 800ad40:	2300      	movs	r3, #0
 800ad42:	4252      	negs	r2, r2
 800ad44:	6062      	str	r2, [r4, #4]
 800ad46:	a904      	add	r1, sp, #16
 800ad48:	3254      	adds	r2, #84	; 0x54
 800ad4a:	1852      	adds	r2, r2, r1
 800ad4c:	1c6e      	adds	r6, r5, #1
 800ad4e:	6023      	str	r3, [r4, #0]
 800ad50:	60e3      	str	r3, [r4, #12]
 800ad52:	60a3      	str	r3, [r4, #8]
 800ad54:	7013      	strb	r3, [r2, #0]
 800ad56:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad58:	7831      	ldrb	r1, [r6, #0]
 800ad5a:	2205      	movs	r2, #5
 800ad5c:	485e      	ldr	r0, [pc, #376]	; (800aed8 <_vfiprintf_r+0x210>)
 800ad5e:	f000 fafb 	bl	800b358 <memchr>
 800ad62:	1c75      	adds	r5, r6, #1
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d135      	bne.n	800add4 <_vfiprintf_r+0x10c>
 800ad68:	6822      	ldr	r2, [r4, #0]
 800ad6a:	06d3      	lsls	r3, r2, #27
 800ad6c:	d504      	bpl.n	800ad78 <_vfiprintf_r+0xb0>
 800ad6e:	2353      	movs	r3, #83	; 0x53
 800ad70:	a904      	add	r1, sp, #16
 800ad72:	185b      	adds	r3, r3, r1
 800ad74:	2120      	movs	r1, #32
 800ad76:	7019      	strb	r1, [r3, #0]
 800ad78:	0713      	lsls	r3, r2, #28
 800ad7a:	d504      	bpl.n	800ad86 <_vfiprintf_r+0xbe>
 800ad7c:	2353      	movs	r3, #83	; 0x53
 800ad7e:	a904      	add	r1, sp, #16
 800ad80:	185b      	adds	r3, r3, r1
 800ad82:	212b      	movs	r1, #43	; 0x2b
 800ad84:	7019      	strb	r1, [r3, #0]
 800ad86:	7833      	ldrb	r3, [r6, #0]
 800ad88:	2b2a      	cmp	r3, #42	; 0x2a
 800ad8a:	d02c      	beq.n	800ade6 <_vfiprintf_r+0x11e>
 800ad8c:	0035      	movs	r5, r6
 800ad8e:	2100      	movs	r1, #0
 800ad90:	200a      	movs	r0, #10
 800ad92:	68e3      	ldr	r3, [r4, #12]
 800ad94:	782a      	ldrb	r2, [r5, #0]
 800ad96:	1c6e      	adds	r6, r5, #1
 800ad98:	3a30      	subs	r2, #48	; 0x30
 800ad9a:	2a09      	cmp	r2, #9
 800ad9c:	d964      	bls.n	800ae68 <_vfiprintf_r+0x1a0>
 800ad9e:	2900      	cmp	r1, #0
 800ada0:	d02e      	beq.n	800ae00 <_vfiprintf_r+0x138>
 800ada2:	e026      	b.n	800adf2 <_vfiprintf_r+0x12a>
 800ada4:	4b4d      	ldr	r3, [pc, #308]	; (800aedc <_vfiprintf_r+0x214>)
 800ada6:	429f      	cmp	r7, r3
 800ada8:	d102      	bne.n	800adb0 <_vfiprintf_r+0xe8>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	689f      	ldr	r7, [r3, #8]
 800adae:	e79e      	b.n	800acee <_vfiprintf_r+0x26>
 800adb0:	4b4b      	ldr	r3, [pc, #300]	; (800aee0 <_vfiprintf_r+0x218>)
 800adb2:	429f      	cmp	r7, r3
 800adb4:	d19b      	bne.n	800acee <_vfiprintf_r+0x26>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	68df      	ldr	r7, [r3, #12]
 800adba:	e798      	b.n	800acee <_vfiprintf_r+0x26>
 800adbc:	0039      	movs	r1, r7
 800adbe:	9803      	ldr	r0, [sp, #12]
 800adc0:	f7ff fc44 	bl	800a64c <__swsetup_r>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d098      	beq.n	800acfa <_vfiprintf_r+0x32>
 800adc8:	2001      	movs	r0, #1
 800adca:	4240      	negs	r0, r0
 800adcc:	b021      	add	sp, #132	; 0x84
 800adce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add0:	3501      	adds	r5, #1
 800add2:	e79b      	b.n	800ad0c <_vfiprintf_r+0x44>
 800add4:	4b40      	ldr	r3, [pc, #256]	; (800aed8 <_vfiprintf_r+0x210>)
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	1ac0      	subs	r0, r0, r3
 800adda:	2301      	movs	r3, #1
 800addc:	4083      	lsls	r3, r0
 800adde:	4313      	orrs	r3, r2
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	002e      	movs	r6, r5
 800ade4:	e7b8      	b.n	800ad58 <_vfiprintf_r+0x90>
 800ade6:	9b07      	ldr	r3, [sp, #28]
 800ade8:	1d19      	adds	r1, r3, #4
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	9107      	str	r1, [sp, #28]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	db01      	blt.n	800adf6 <_vfiprintf_r+0x12e>
 800adf2:	930b      	str	r3, [sp, #44]	; 0x2c
 800adf4:	e004      	b.n	800ae00 <_vfiprintf_r+0x138>
 800adf6:	425b      	negs	r3, r3
 800adf8:	60e3      	str	r3, [r4, #12]
 800adfa:	2302      	movs	r3, #2
 800adfc:	4313      	orrs	r3, r2
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	782b      	ldrb	r3, [r5, #0]
 800ae02:	2b2e      	cmp	r3, #46	; 0x2e
 800ae04:	d10a      	bne.n	800ae1c <_vfiprintf_r+0x154>
 800ae06:	786b      	ldrb	r3, [r5, #1]
 800ae08:	2b2a      	cmp	r3, #42	; 0x2a
 800ae0a:	d135      	bne.n	800ae78 <_vfiprintf_r+0x1b0>
 800ae0c:	9b07      	ldr	r3, [sp, #28]
 800ae0e:	3502      	adds	r5, #2
 800ae10:	1d1a      	adds	r2, r3, #4
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	9207      	str	r2, [sp, #28]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	db2b      	blt.n	800ae72 <_vfiprintf_r+0x1aa>
 800ae1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae1c:	4e31      	ldr	r6, [pc, #196]	; (800aee4 <_vfiprintf_r+0x21c>)
 800ae1e:	7829      	ldrb	r1, [r5, #0]
 800ae20:	2203      	movs	r2, #3
 800ae22:	0030      	movs	r0, r6
 800ae24:	f000 fa98 	bl	800b358 <memchr>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d006      	beq.n	800ae3a <_vfiprintf_r+0x172>
 800ae2c:	2340      	movs	r3, #64	; 0x40
 800ae2e:	1b80      	subs	r0, r0, r6
 800ae30:	4083      	lsls	r3, r0
 800ae32:	6822      	ldr	r2, [r4, #0]
 800ae34:	3501      	adds	r5, #1
 800ae36:	4313      	orrs	r3, r2
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	7829      	ldrb	r1, [r5, #0]
 800ae3c:	2206      	movs	r2, #6
 800ae3e:	482a      	ldr	r0, [pc, #168]	; (800aee8 <_vfiprintf_r+0x220>)
 800ae40:	1c6e      	adds	r6, r5, #1
 800ae42:	7621      	strb	r1, [r4, #24]
 800ae44:	f000 fa88 	bl	800b358 <memchr>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d03a      	beq.n	800aec2 <_vfiprintf_r+0x1fa>
 800ae4c:	4b27      	ldr	r3, [pc, #156]	; (800aeec <_vfiprintf_r+0x224>)
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d125      	bne.n	800ae9e <_vfiprintf_r+0x1d6>
 800ae52:	2207      	movs	r2, #7
 800ae54:	9b07      	ldr	r3, [sp, #28]
 800ae56:	3307      	adds	r3, #7
 800ae58:	4393      	bics	r3, r2
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	9307      	str	r3, [sp, #28]
 800ae5e:	6963      	ldr	r3, [r4, #20]
 800ae60:	9a04      	ldr	r2, [sp, #16]
 800ae62:	189b      	adds	r3, r3, r2
 800ae64:	6163      	str	r3, [r4, #20]
 800ae66:	e750      	b.n	800ad0a <_vfiprintf_r+0x42>
 800ae68:	4343      	muls	r3, r0
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	189b      	adds	r3, r3, r2
 800ae6e:	0035      	movs	r5, r6
 800ae70:	e790      	b.n	800ad94 <_vfiprintf_r+0xcc>
 800ae72:	2301      	movs	r3, #1
 800ae74:	425b      	negs	r3, r3
 800ae76:	e7d0      	b.n	800ae1a <_vfiprintf_r+0x152>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	200a      	movs	r0, #10
 800ae7c:	001a      	movs	r2, r3
 800ae7e:	3501      	adds	r5, #1
 800ae80:	6063      	str	r3, [r4, #4]
 800ae82:	7829      	ldrb	r1, [r5, #0]
 800ae84:	1c6e      	adds	r6, r5, #1
 800ae86:	3930      	subs	r1, #48	; 0x30
 800ae88:	2909      	cmp	r1, #9
 800ae8a:	d903      	bls.n	800ae94 <_vfiprintf_r+0x1cc>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0c5      	beq.n	800ae1c <_vfiprintf_r+0x154>
 800ae90:	9209      	str	r2, [sp, #36]	; 0x24
 800ae92:	e7c3      	b.n	800ae1c <_vfiprintf_r+0x154>
 800ae94:	4342      	muls	r2, r0
 800ae96:	2301      	movs	r3, #1
 800ae98:	1852      	adds	r2, r2, r1
 800ae9a:	0035      	movs	r5, r6
 800ae9c:	e7f1      	b.n	800ae82 <_vfiprintf_r+0x1ba>
 800ae9e:	ab07      	add	r3, sp, #28
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	003a      	movs	r2, r7
 800aea4:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <_vfiprintf_r+0x228>)
 800aea6:	0021      	movs	r1, r4
 800aea8:	9803      	ldr	r0, [sp, #12]
 800aeaa:	e000      	b.n	800aeae <_vfiprintf_r+0x1e6>
 800aeac:	bf00      	nop
 800aeae:	9004      	str	r0, [sp, #16]
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	d1d3      	bne.n	800ae5e <_vfiprintf_r+0x196>
 800aeb6:	89bb      	ldrh	r3, [r7, #12]
 800aeb8:	065b      	lsls	r3, r3, #25
 800aeba:	d500      	bpl.n	800aebe <_vfiprintf_r+0x1f6>
 800aebc:	e784      	b.n	800adc8 <_vfiprintf_r+0x100>
 800aebe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aec0:	e784      	b.n	800adcc <_vfiprintf_r+0x104>
 800aec2:	ab07      	add	r3, sp, #28
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	003a      	movs	r2, r7
 800aec8:	4b09      	ldr	r3, [pc, #36]	; (800aef0 <_vfiprintf_r+0x228>)
 800aeca:	0021      	movs	r1, r4
 800aecc:	9803      	ldr	r0, [sp, #12]
 800aece:	f000 f87f 	bl	800afd0 <_printf_i>
 800aed2:	e7ec      	b.n	800aeae <_vfiprintf_r+0x1e6>
 800aed4:	0800becc 	.word	0x0800becc
 800aed8:	0800bf0c 	.word	0x0800bf0c
 800aedc:	0800beec 	.word	0x0800beec
 800aee0:	0800beac 	.word	0x0800beac
 800aee4:	0800bf12 	.word	0x0800bf12
 800aee8:	0800bf16 	.word	0x0800bf16
 800aeec:	00000000 	.word	0x00000000
 800aef0:	0800aca3 	.word	0x0800aca3

0800aef4 <_printf_common>:
 800aef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aef6:	0015      	movs	r5, r2
 800aef8:	9301      	str	r3, [sp, #4]
 800aefa:	688a      	ldr	r2, [r1, #8]
 800aefc:	690b      	ldr	r3, [r1, #16]
 800aefe:	9000      	str	r0, [sp, #0]
 800af00:	000c      	movs	r4, r1
 800af02:	4293      	cmp	r3, r2
 800af04:	da00      	bge.n	800af08 <_printf_common+0x14>
 800af06:	0013      	movs	r3, r2
 800af08:	0022      	movs	r2, r4
 800af0a:	602b      	str	r3, [r5, #0]
 800af0c:	3243      	adds	r2, #67	; 0x43
 800af0e:	7812      	ldrb	r2, [r2, #0]
 800af10:	2a00      	cmp	r2, #0
 800af12:	d001      	beq.n	800af18 <_printf_common+0x24>
 800af14:	3301      	adds	r3, #1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	069b      	lsls	r3, r3, #26
 800af1c:	d502      	bpl.n	800af24 <_printf_common+0x30>
 800af1e:	682b      	ldr	r3, [r5, #0]
 800af20:	3302      	adds	r3, #2
 800af22:	602b      	str	r3, [r5, #0]
 800af24:	2706      	movs	r7, #6
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	401f      	ands	r7, r3
 800af2a:	d027      	beq.n	800af7c <_printf_common+0x88>
 800af2c:	0023      	movs	r3, r4
 800af2e:	3343      	adds	r3, #67	; 0x43
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	1e5a      	subs	r2, r3, #1
 800af34:	4193      	sbcs	r3, r2
 800af36:	6822      	ldr	r2, [r4, #0]
 800af38:	0692      	lsls	r2, r2, #26
 800af3a:	d430      	bmi.n	800af9e <_printf_common+0xaa>
 800af3c:	0022      	movs	r2, r4
 800af3e:	9901      	ldr	r1, [sp, #4]
 800af40:	3243      	adds	r2, #67	; 0x43
 800af42:	9800      	ldr	r0, [sp, #0]
 800af44:	9e08      	ldr	r6, [sp, #32]
 800af46:	47b0      	blx	r6
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d025      	beq.n	800af98 <_printf_common+0xa4>
 800af4c:	2306      	movs	r3, #6
 800af4e:	6820      	ldr	r0, [r4, #0]
 800af50:	682a      	ldr	r2, [r5, #0]
 800af52:	68e1      	ldr	r1, [r4, #12]
 800af54:	4003      	ands	r3, r0
 800af56:	2500      	movs	r5, #0
 800af58:	2b04      	cmp	r3, #4
 800af5a:	d103      	bne.n	800af64 <_printf_common+0x70>
 800af5c:	1a8d      	subs	r5, r1, r2
 800af5e:	43eb      	mvns	r3, r5
 800af60:	17db      	asrs	r3, r3, #31
 800af62:	401d      	ands	r5, r3
 800af64:	68a3      	ldr	r3, [r4, #8]
 800af66:	6922      	ldr	r2, [r4, #16]
 800af68:	4293      	cmp	r3, r2
 800af6a:	dd01      	ble.n	800af70 <_printf_common+0x7c>
 800af6c:	1a9b      	subs	r3, r3, r2
 800af6e:	18ed      	adds	r5, r5, r3
 800af70:	2700      	movs	r7, #0
 800af72:	42bd      	cmp	r5, r7
 800af74:	d120      	bne.n	800afb8 <_printf_common+0xc4>
 800af76:	2000      	movs	r0, #0
 800af78:	e010      	b.n	800af9c <_printf_common+0xa8>
 800af7a:	3701      	adds	r7, #1
 800af7c:	68e3      	ldr	r3, [r4, #12]
 800af7e:	682a      	ldr	r2, [r5, #0]
 800af80:	1a9b      	subs	r3, r3, r2
 800af82:	42bb      	cmp	r3, r7
 800af84:	ddd2      	ble.n	800af2c <_printf_common+0x38>
 800af86:	0022      	movs	r2, r4
 800af88:	2301      	movs	r3, #1
 800af8a:	3219      	adds	r2, #25
 800af8c:	9901      	ldr	r1, [sp, #4]
 800af8e:	9800      	ldr	r0, [sp, #0]
 800af90:	9e08      	ldr	r6, [sp, #32]
 800af92:	47b0      	blx	r6
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d1f0      	bne.n	800af7a <_printf_common+0x86>
 800af98:	2001      	movs	r0, #1
 800af9a:	4240      	negs	r0, r0
 800af9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af9e:	2030      	movs	r0, #48	; 0x30
 800afa0:	18e1      	adds	r1, r4, r3
 800afa2:	3143      	adds	r1, #67	; 0x43
 800afa4:	7008      	strb	r0, [r1, #0]
 800afa6:	0021      	movs	r1, r4
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	3145      	adds	r1, #69	; 0x45
 800afac:	7809      	ldrb	r1, [r1, #0]
 800afae:	18a2      	adds	r2, r4, r2
 800afb0:	3243      	adds	r2, #67	; 0x43
 800afb2:	3302      	adds	r3, #2
 800afb4:	7011      	strb	r1, [r2, #0]
 800afb6:	e7c1      	b.n	800af3c <_printf_common+0x48>
 800afb8:	0022      	movs	r2, r4
 800afba:	2301      	movs	r3, #1
 800afbc:	321a      	adds	r2, #26
 800afbe:	9901      	ldr	r1, [sp, #4]
 800afc0:	9800      	ldr	r0, [sp, #0]
 800afc2:	9e08      	ldr	r6, [sp, #32]
 800afc4:	47b0      	blx	r6
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	d0e6      	beq.n	800af98 <_printf_common+0xa4>
 800afca:	3701      	adds	r7, #1
 800afcc:	e7d1      	b.n	800af72 <_printf_common+0x7e>
	...

0800afd0 <_printf_i>:
 800afd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afd2:	b089      	sub	sp, #36	; 0x24
 800afd4:	9204      	str	r2, [sp, #16]
 800afd6:	000a      	movs	r2, r1
 800afd8:	3243      	adds	r2, #67	; 0x43
 800afda:	9305      	str	r3, [sp, #20]
 800afdc:	9003      	str	r0, [sp, #12]
 800afde:	9202      	str	r2, [sp, #8]
 800afe0:	7e0a      	ldrb	r2, [r1, #24]
 800afe2:	000c      	movs	r4, r1
 800afe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afe6:	2a6e      	cmp	r2, #110	; 0x6e
 800afe8:	d100      	bne.n	800afec <_printf_i+0x1c>
 800afea:	e086      	b.n	800b0fa <_printf_i+0x12a>
 800afec:	d81f      	bhi.n	800b02e <_printf_i+0x5e>
 800afee:	2a63      	cmp	r2, #99	; 0x63
 800aff0:	d033      	beq.n	800b05a <_printf_i+0x8a>
 800aff2:	d808      	bhi.n	800b006 <_printf_i+0x36>
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	d100      	bne.n	800affa <_printf_i+0x2a>
 800aff8:	e08c      	b.n	800b114 <_printf_i+0x144>
 800affa:	2a58      	cmp	r2, #88	; 0x58
 800affc:	d04d      	beq.n	800b09a <_printf_i+0xca>
 800affe:	0025      	movs	r5, r4
 800b000:	3542      	adds	r5, #66	; 0x42
 800b002:	702a      	strb	r2, [r5, #0]
 800b004:	e030      	b.n	800b068 <_printf_i+0x98>
 800b006:	2a64      	cmp	r2, #100	; 0x64
 800b008:	d001      	beq.n	800b00e <_printf_i+0x3e>
 800b00a:	2a69      	cmp	r2, #105	; 0x69
 800b00c:	d1f7      	bne.n	800affe <_printf_i+0x2e>
 800b00e:	6819      	ldr	r1, [r3, #0]
 800b010:	6825      	ldr	r5, [r4, #0]
 800b012:	1d0a      	adds	r2, r1, #4
 800b014:	0628      	lsls	r0, r5, #24
 800b016:	d529      	bpl.n	800b06c <_printf_i+0x9c>
 800b018:	6808      	ldr	r0, [r1, #0]
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	2800      	cmp	r0, #0
 800b01e:	da03      	bge.n	800b028 <_printf_i+0x58>
 800b020:	232d      	movs	r3, #45	; 0x2d
 800b022:	9a02      	ldr	r2, [sp, #8]
 800b024:	4240      	negs	r0, r0
 800b026:	7013      	strb	r3, [r2, #0]
 800b028:	4e6b      	ldr	r6, [pc, #428]	; (800b1d8 <_printf_i+0x208>)
 800b02a:	270a      	movs	r7, #10
 800b02c:	e04f      	b.n	800b0ce <_printf_i+0xfe>
 800b02e:	2a73      	cmp	r2, #115	; 0x73
 800b030:	d074      	beq.n	800b11c <_printf_i+0x14c>
 800b032:	d808      	bhi.n	800b046 <_printf_i+0x76>
 800b034:	2a6f      	cmp	r2, #111	; 0x6f
 800b036:	d01f      	beq.n	800b078 <_printf_i+0xa8>
 800b038:	2a70      	cmp	r2, #112	; 0x70
 800b03a:	d1e0      	bne.n	800affe <_printf_i+0x2e>
 800b03c:	2220      	movs	r2, #32
 800b03e:	6809      	ldr	r1, [r1, #0]
 800b040:	430a      	orrs	r2, r1
 800b042:	6022      	str	r2, [r4, #0]
 800b044:	e003      	b.n	800b04e <_printf_i+0x7e>
 800b046:	2a75      	cmp	r2, #117	; 0x75
 800b048:	d016      	beq.n	800b078 <_printf_i+0xa8>
 800b04a:	2a78      	cmp	r2, #120	; 0x78
 800b04c:	d1d7      	bne.n	800affe <_printf_i+0x2e>
 800b04e:	0022      	movs	r2, r4
 800b050:	2178      	movs	r1, #120	; 0x78
 800b052:	3245      	adds	r2, #69	; 0x45
 800b054:	7011      	strb	r1, [r2, #0]
 800b056:	4e61      	ldr	r6, [pc, #388]	; (800b1dc <_printf_i+0x20c>)
 800b058:	e022      	b.n	800b0a0 <_printf_i+0xd0>
 800b05a:	0025      	movs	r5, r4
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	3542      	adds	r5, #66	; 0x42
 800b060:	1d11      	adds	r1, r2, #4
 800b062:	6019      	str	r1, [r3, #0]
 800b064:	6813      	ldr	r3, [r2, #0]
 800b066:	702b      	strb	r3, [r5, #0]
 800b068:	2301      	movs	r3, #1
 800b06a:	e065      	b.n	800b138 <_printf_i+0x168>
 800b06c:	6808      	ldr	r0, [r1, #0]
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	0669      	lsls	r1, r5, #25
 800b072:	d5d3      	bpl.n	800b01c <_printf_i+0x4c>
 800b074:	b200      	sxth	r0, r0
 800b076:	e7d1      	b.n	800b01c <_printf_i+0x4c>
 800b078:	6819      	ldr	r1, [r3, #0]
 800b07a:	6825      	ldr	r5, [r4, #0]
 800b07c:	1d08      	adds	r0, r1, #4
 800b07e:	6018      	str	r0, [r3, #0]
 800b080:	6808      	ldr	r0, [r1, #0]
 800b082:	062e      	lsls	r6, r5, #24
 800b084:	d505      	bpl.n	800b092 <_printf_i+0xc2>
 800b086:	4e54      	ldr	r6, [pc, #336]	; (800b1d8 <_printf_i+0x208>)
 800b088:	2708      	movs	r7, #8
 800b08a:	2a6f      	cmp	r2, #111	; 0x6f
 800b08c:	d01b      	beq.n	800b0c6 <_printf_i+0xf6>
 800b08e:	270a      	movs	r7, #10
 800b090:	e019      	b.n	800b0c6 <_printf_i+0xf6>
 800b092:	066d      	lsls	r5, r5, #25
 800b094:	d5f7      	bpl.n	800b086 <_printf_i+0xb6>
 800b096:	b280      	uxth	r0, r0
 800b098:	e7f5      	b.n	800b086 <_printf_i+0xb6>
 800b09a:	3145      	adds	r1, #69	; 0x45
 800b09c:	4e4e      	ldr	r6, [pc, #312]	; (800b1d8 <_printf_i+0x208>)
 800b09e:	700a      	strb	r2, [r1, #0]
 800b0a0:	6818      	ldr	r0, [r3, #0]
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	1d01      	adds	r1, r0, #4
 800b0a6:	6800      	ldr	r0, [r0, #0]
 800b0a8:	6019      	str	r1, [r3, #0]
 800b0aa:	0615      	lsls	r5, r2, #24
 800b0ac:	d521      	bpl.n	800b0f2 <_printf_i+0x122>
 800b0ae:	07d3      	lsls	r3, r2, #31
 800b0b0:	d502      	bpl.n	800b0b8 <_printf_i+0xe8>
 800b0b2:	2320      	movs	r3, #32
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	6022      	str	r2, [r4, #0]
 800b0b8:	2710      	movs	r7, #16
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d103      	bne.n	800b0c6 <_printf_i+0xf6>
 800b0be:	2320      	movs	r3, #32
 800b0c0:	6822      	ldr	r2, [r4, #0]
 800b0c2:	439a      	bics	r2, r3
 800b0c4:	6022      	str	r2, [r4, #0]
 800b0c6:	0023      	movs	r3, r4
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	3343      	adds	r3, #67	; 0x43
 800b0cc:	701a      	strb	r2, [r3, #0]
 800b0ce:	6863      	ldr	r3, [r4, #4]
 800b0d0:	60a3      	str	r3, [r4, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	db58      	blt.n	800b188 <_printf_i+0x1b8>
 800b0d6:	2204      	movs	r2, #4
 800b0d8:	6821      	ldr	r1, [r4, #0]
 800b0da:	4391      	bics	r1, r2
 800b0dc:	6021      	str	r1, [r4, #0]
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d154      	bne.n	800b18c <_printf_i+0x1bc>
 800b0e2:	9d02      	ldr	r5, [sp, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d05a      	beq.n	800b19e <_printf_i+0x1ce>
 800b0e8:	0025      	movs	r5, r4
 800b0ea:	7833      	ldrb	r3, [r6, #0]
 800b0ec:	3542      	adds	r5, #66	; 0x42
 800b0ee:	702b      	strb	r3, [r5, #0]
 800b0f0:	e055      	b.n	800b19e <_printf_i+0x1ce>
 800b0f2:	0655      	lsls	r5, r2, #25
 800b0f4:	d5db      	bpl.n	800b0ae <_printf_i+0xde>
 800b0f6:	b280      	uxth	r0, r0
 800b0f8:	e7d9      	b.n	800b0ae <_printf_i+0xde>
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	680d      	ldr	r5, [r1, #0]
 800b0fe:	1d10      	adds	r0, r2, #4
 800b100:	6949      	ldr	r1, [r1, #20]
 800b102:	6018      	str	r0, [r3, #0]
 800b104:	6813      	ldr	r3, [r2, #0]
 800b106:	062e      	lsls	r6, r5, #24
 800b108:	d501      	bpl.n	800b10e <_printf_i+0x13e>
 800b10a:	6019      	str	r1, [r3, #0]
 800b10c:	e002      	b.n	800b114 <_printf_i+0x144>
 800b10e:	066d      	lsls	r5, r5, #25
 800b110:	d5fb      	bpl.n	800b10a <_printf_i+0x13a>
 800b112:	8019      	strh	r1, [r3, #0]
 800b114:	2300      	movs	r3, #0
 800b116:	9d02      	ldr	r5, [sp, #8]
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	e04f      	b.n	800b1bc <_printf_i+0x1ec>
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	1d11      	adds	r1, r2, #4
 800b120:	6019      	str	r1, [r3, #0]
 800b122:	6815      	ldr	r5, [r2, #0]
 800b124:	2100      	movs	r1, #0
 800b126:	6862      	ldr	r2, [r4, #4]
 800b128:	0028      	movs	r0, r5
 800b12a:	f000 f915 	bl	800b358 <memchr>
 800b12e:	2800      	cmp	r0, #0
 800b130:	d001      	beq.n	800b136 <_printf_i+0x166>
 800b132:	1b40      	subs	r0, r0, r5
 800b134:	6060      	str	r0, [r4, #4]
 800b136:	6863      	ldr	r3, [r4, #4]
 800b138:	6123      	str	r3, [r4, #16]
 800b13a:	2300      	movs	r3, #0
 800b13c:	9a02      	ldr	r2, [sp, #8]
 800b13e:	7013      	strb	r3, [r2, #0]
 800b140:	e03c      	b.n	800b1bc <_printf_i+0x1ec>
 800b142:	6923      	ldr	r3, [r4, #16]
 800b144:	002a      	movs	r2, r5
 800b146:	9904      	ldr	r1, [sp, #16]
 800b148:	9803      	ldr	r0, [sp, #12]
 800b14a:	9d05      	ldr	r5, [sp, #20]
 800b14c:	47a8      	blx	r5
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	d03e      	beq.n	800b1d0 <_printf_i+0x200>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	079b      	lsls	r3, r3, #30
 800b156:	d415      	bmi.n	800b184 <_printf_i+0x1b4>
 800b158:	9b07      	ldr	r3, [sp, #28]
 800b15a:	68e0      	ldr	r0, [r4, #12]
 800b15c:	4298      	cmp	r0, r3
 800b15e:	da39      	bge.n	800b1d4 <_printf_i+0x204>
 800b160:	0018      	movs	r0, r3
 800b162:	e037      	b.n	800b1d4 <_printf_i+0x204>
 800b164:	0022      	movs	r2, r4
 800b166:	2301      	movs	r3, #1
 800b168:	3219      	adds	r2, #25
 800b16a:	9904      	ldr	r1, [sp, #16]
 800b16c:	9803      	ldr	r0, [sp, #12]
 800b16e:	9e05      	ldr	r6, [sp, #20]
 800b170:	47b0      	blx	r6
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	d02c      	beq.n	800b1d0 <_printf_i+0x200>
 800b176:	3501      	adds	r5, #1
 800b178:	68e3      	ldr	r3, [r4, #12]
 800b17a:	9a07      	ldr	r2, [sp, #28]
 800b17c:	1a9b      	subs	r3, r3, r2
 800b17e:	42ab      	cmp	r3, r5
 800b180:	dcf0      	bgt.n	800b164 <_printf_i+0x194>
 800b182:	e7e9      	b.n	800b158 <_printf_i+0x188>
 800b184:	2500      	movs	r5, #0
 800b186:	e7f7      	b.n	800b178 <_printf_i+0x1a8>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d0ad      	beq.n	800b0e8 <_printf_i+0x118>
 800b18c:	9d02      	ldr	r5, [sp, #8]
 800b18e:	0039      	movs	r1, r7
 800b190:	f7f5 f840 	bl	8000214 <__aeabi_uidivmod>
 800b194:	5c73      	ldrb	r3, [r6, r1]
 800b196:	3d01      	subs	r5, #1
 800b198:	702b      	strb	r3, [r5, #0]
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d1f7      	bne.n	800b18e <_printf_i+0x1be>
 800b19e:	2f08      	cmp	r7, #8
 800b1a0:	d109      	bne.n	800b1b6 <_printf_i+0x1e6>
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	07db      	lsls	r3, r3, #31
 800b1a6:	d506      	bpl.n	800b1b6 <_printf_i+0x1e6>
 800b1a8:	6863      	ldr	r3, [r4, #4]
 800b1aa:	6922      	ldr	r2, [r4, #16]
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	dc02      	bgt.n	800b1b6 <_printf_i+0x1e6>
 800b1b0:	2330      	movs	r3, #48	; 0x30
 800b1b2:	3d01      	subs	r5, #1
 800b1b4:	702b      	strb	r3, [r5, #0]
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	1b5b      	subs	r3, r3, r5
 800b1ba:	6123      	str	r3, [r4, #16]
 800b1bc:	9b05      	ldr	r3, [sp, #20]
 800b1be:	aa07      	add	r2, sp, #28
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	0021      	movs	r1, r4
 800b1c4:	9b04      	ldr	r3, [sp, #16]
 800b1c6:	9803      	ldr	r0, [sp, #12]
 800b1c8:	f7ff fe94 	bl	800aef4 <_printf_common>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d1b8      	bne.n	800b142 <_printf_i+0x172>
 800b1d0:	2001      	movs	r0, #1
 800b1d2:	4240      	negs	r0, r0
 800b1d4:	b009      	add	sp, #36	; 0x24
 800b1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d8:	0800bf1d 	.word	0x0800bf1d
 800b1dc:	0800bf2e 	.word	0x0800bf2e

0800b1e0 <_sbrk_r>:
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	b570      	push	{r4, r5, r6, lr}
 800b1e4:	4c06      	ldr	r4, [pc, #24]	; (800b200 <_sbrk_r+0x20>)
 800b1e6:	0005      	movs	r5, r0
 800b1e8:	0008      	movs	r0, r1
 800b1ea:	6023      	str	r3, [r4, #0]
 800b1ec:	f7f5 fb38 	bl	8000860 <_sbrk>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d103      	bne.n	800b1fc <_sbrk_r+0x1c>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d000      	beq.n	800b1fc <_sbrk_r+0x1c>
 800b1fa:	602b      	str	r3, [r5, #0]
 800b1fc:	bd70      	pop	{r4, r5, r6, pc}
 800b1fe:	46c0      	nop			; (mov r8, r8)
 800b200:	20000cf8 	.word	0x20000cf8

0800b204 <__sread>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	000c      	movs	r4, r1
 800b208:	250e      	movs	r5, #14
 800b20a:	5f49      	ldrsh	r1, [r1, r5]
 800b20c:	f000 f8b2 	bl	800b374 <_read_r>
 800b210:	2800      	cmp	r0, #0
 800b212:	db03      	blt.n	800b21c <__sread+0x18>
 800b214:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b216:	181b      	adds	r3, r3, r0
 800b218:	6563      	str	r3, [r4, #84]	; 0x54
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	4a02      	ldr	r2, [pc, #8]	; (800b228 <__sread+0x24>)
 800b220:	4013      	ands	r3, r2
 800b222:	81a3      	strh	r3, [r4, #12]
 800b224:	e7f9      	b.n	800b21a <__sread+0x16>
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	ffffefff 	.word	0xffffefff

0800b22c <__swrite>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	001f      	movs	r7, r3
 800b230:	898b      	ldrh	r3, [r1, #12]
 800b232:	0005      	movs	r5, r0
 800b234:	000c      	movs	r4, r1
 800b236:	0016      	movs	r6, r2
 800b238:	05db      	lsls	r3, r3, #23
 800b23a:	d505      	bpl.n	800b248 <__swrite+0x1c>
 800b23c:	230e      	movs	r3, #14
 800b23e:	5ec9      	ldrsh	r1, [r1, r3]
 800b240:	2200      	movs	r2, #0
 800b242:	2302      	movs	r3, #2
 800b244:	f000 f874 	bl	800b330 <_lseek_r>
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	4a05      	ldr	r2, [pc, #20]	; (800b260 <__swrite+0x34>)
 800b24c:	0028      	movs	r0, r5
 800b24e:	4013      	ands	r3, r2
 800b250:	81a3      	strh	r3, [r4, #12]
 800b252:	0032      	movs	r2, r6
 800b254:	230e      	movs	r3, #14
 800b256:	5ee1      	ldrsh	r1, [r4, r3]
 800b258:	003b      	movs	r3, r7
 800b25a:	f000 f81f 	bl	800b29c <_write_r>
 800b25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b260:	ffffefff 	.word	0xffffefff

0800b264 <__sseek>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	000c      	movs	r4, r1
 800b268:	250e      	movs	r5, #14
 800b26a:	5f49      	ldrsh	r1, [r1, r5]
 800b26c:	f000 f860 	bl	800b330 <_lseek_r>
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	1c42      	adds	r2, r0, #1
 800b274:	d103      	bne.n	800b27e <__sseek+0x1a>
 800b276:	4a05      	ldr	r2, [pc, #20]	; (800b28c <__sseek+0x28>)
 800b278:	4013      	ands	r3, r2
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
 800b27e:	2280      	movs	r2, #128	; 0x80
 800b280:	0152      	lsls	r2, r2, #5
 800b282:	4313      	orrs	r3, r2
 800b284:	81a3      	strh	r3, [r4, #12]
 800b286:	6560      	str	r0, [r4, #84]	; 0x54
 800b288:	e7f8      	b.n	800b27c <__sseek+0x18>
 800b28a:	46c0      	nop			; (mov r8, r8)
 800b28c:	ffffefff 	.word	0xffffefff

0800b290 <__sclose>:
 800b290:	b510      	push	{r4, lr}
 800b292:	230e      	movs	r3, #14
 800b294:	5ec9      	ldrsh	r1, [r1, r3]
 800b296:	f000 f815 	bl	800b2c4 <_close_r>
 800b29a:	bd10      	pop	{r4, pc}

0800b29c <_write_r>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	0005      	movs	r5, r0
 800b2a0:	0008      	movs	r0, r1
 800b2a2:	0011      	movs	r1, r2
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4c06      	ldr	r4, [pc, #24]	; (800b2c0 <_write_r+0x24>)
 800b2a8:	6022      	str	r2, [r4, #0]
 800b2aa:	001a      	movs	r2, r3
 800b2ac:	f7f5 fa8f 	bl	80007ce <_write>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d103      	bne.n	800b2bc <_write_r+0x20>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d000      	beq.n	800b2bc <_write_r+0x20>
 800b2ba:	602b      	str	r3, [r5, #0]
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
 800b2be:	46c0      	nop			; (mov r8, r8)
 800b2c0:	20000cf8 	.word	0x20000cf8

0800b2c4 <_close_r>:
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	b570      	push	{r4, r5, r6, lr}
 800b2c8:	4c06      	ldr	r4, [pc, #24]	; (800b2e4 <_close_r+0x20>)
 800b2ca:	0005      	movs	r5, r0
 800b2cc:	0008      	movs	r0, r1
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	f7f5 fa99 	bl	8000806 <_close>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d103      	bne.n	800b2e0 <_close_r+0x1c>
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d000      	beq.n	800b2e0 <_close_r+0x1c>
 800b2de:	602b      	str	r3, [r5, #0]
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	20000cf8 	.word	0x20000cf8

0800b2e8 <_fstat_r>:
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	b570      	push	{r4, r5, r6, lr}
 800b2ec:	4c06      	ldr	r4, [pc, #24]	; (800b308 <_fstat_r+0x20>)
 800b2ee:	0005      	movs	r5, r0
 800b2f0:	0008      	movs	r0, r1
 800b2f2:	0011      	movs	r1, r2
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	f7f5 fa90 	bl	800081a <_fstat>
 800b2fa:	1c43      	adds	r3, r0, #1
 800b2fc:	d103      	bne.n	800b306 <_fstat_r+0x1e>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d000      	beq.n	800b306 <_fstat_r+0x1e>
 800b304:	602b      	str	r3, [r5, #0]
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	20000cf8 	.word	0x20000cf8

0800b30c <_isatty_r>:
 800b30c:	2300      	movs	r3, #0
 800b30e:	b570      	push	{r4, r5, r6, lr}
 800b310:	4c06      	ldr	r4, [pc, #24]	; (800b32c <_isatty_r+0x20>)
 800b312:	0005      	movs	r5, r0
 800b314:	0008      	movs	r0, r1
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	f7f5 fa8d 	bl	8000836 <_isatty>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d103      	bne.n	800b328 <_isatty_r+0x1c>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d000      	beq.n	800b328 <_isatty_r+0x1c>
 800b326:	602b      	str	r3, [r5, #0]
 800b328:	bd70      	pop	{r4, r5, r6, pc}
 800b32a:	46c0      	nop			; (mov r8, r8)
 800b32c:	20000cf8 	.word	0x20000cf8

0800b330 <_lseek_r>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	0005      	movs	r5, r0
 800b334:	0008      	movs	r0, r1
 800b336:	0011      	movs	r1, r2
 800b338:	2200      	movs	r2, #0
 800b33a:	4c06      	ldr	r4, [pc, #24]	; (800b354 <_lseek_r+0x24>)
 800b33c:	6022      	str	r2, [r4, #0]
 800b33e:	001a      	movs	r2, r3
 800b340:	f7f5 fa82 	bl	8000848 <_lseek>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d103      	bne.n	800b350 <_lseek_r+0x20>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d000      	beq.n	800b350 <_lseek_r+0x20>
 800b34e:	602b      	str	r3, [r5, #0]
 800b350:	bd70      	pop	{r4, r5, r6, pc}
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	20000cf8 	.word	0x20000cf8

0800b358 <memchr>:
 800b358:	b2c9      	uxtb	r1, r1
 800b35a:	1882      	adds	r2, r0, r2
 800b35c:	4290      	cmp	r0, r2
 800b35e:	d101      	bne.n	800b364 <memchr+0xc>
 800b360:	2000      	movs	r0, #0
 800b362:	4770      	bx	lr
 800b364:	7803      	ldrb	r3, [r0, #0]
 800b366:	428b      	cmp	r3, r1
 800b368:	d0fb      	beq.n	800b362 <memchr+0xa>
 800b36a:	3001      	adds	r0, #1
 800b36c:	e7f6      	b.n	800b35c <memchr+0x4>

0800b36e <__malloc_lock>:
 800b36e:	4770      	bx	lr

0800b370 <__malloc_unlock>:
 800b370:	4770      	bx	lr
	...

0800b374 <_read_r>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	0005      	movs	r5, r0
 800b378:	0008      	movs	r0, r1
 800b37a:	0011      	movs	r1, r2
 800b37c:	2200      	movs	r2, #0
 800b37e:	4c06      	ldr	r4, [pc, #24]	; (800b398 <_read_r+0x24>)
 800b380:	6022      	str	r2, [r4, #0]
 800b382:	001a      	movs	r2, r3
 800b384:	f7f5 fa06 	bl	8000794 <_read>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d103      	bne.n	800b394 <_read_r+0x20>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d000      	beq.n	800b394 <_read_r+0x20>
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	bd70      	pop	{r4, r5, r6, pc}
 800b396:	46c0      	nop			; (mov r8, r8)
 800b398:	20000cf8 	.word	0x20000cf8

0800b39c <_init>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a2:	bc08      	pop	{r3}
 800b3a4:	469e      	mov	lr, r3
 800b3a6:	4770      	bx	lr

0800b3a8 <_fini>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	46c0      	nop			; (mov r8, r8)
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr
